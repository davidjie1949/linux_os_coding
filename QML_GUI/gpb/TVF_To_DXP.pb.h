// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TVF_To_DXP.proto

#ifndef PROTOBUF_TVF_5fTo_5fDXP_2eproto__INCLUDED
#define PROTOBUF_TVF_5fTo_5fDXP_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "TVF_To_DXP_info.pb.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

namespace protobuf_TVF_5fTo_5fDXP_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[23];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsCancelPulloverImpl();
void InitDefaultsCancelPullover();
void InitDefaultsCancelPulloverRespImpl();
void InitDefaultsCancelPulloverResp();
void InitDefaultsGoAckImpl();
void InitDefaultsGoAck();
void InitDefaultsGoAckRespImpl();
void InitDefaultsGoAckResp();
void InitDefaultsPassengerPulloverImpl();
void InitDefaultsPassengerPullover();
void InitDefaultsPassengerPulloverRespImpl();
void InitDefaultsPassengerPulloverResp();
void InitDefaultsNewPassengerCountImpl();
void InitDefaultsNewPassengerCount();
void InitDefaultsNewPassengerCountRespImpl();
void InitDefaultsNewPassengerCountResp();
void InitDefaultsTripIDRequestMoreTimeImpl();
void InitDefaultsTripIDRequestMoreTime();
void InitDefaultsTripIDRequestMoreTimeRespImpl();
void InitDefaultsTripIDRequestMoreTimeResp();
void InitDefaultsPublishArrivalImpl();
void InitDefaultsPublishArrival();
void InitDefaultsPublishLingerImpl();
void InitDefaultsPublishLinger();
void InitDefaultsPublishGoButtonStatusImpl();
void InitDefaultsPublishGoButtonStatus();
void InitDefaultsPublishOnboardingInfo_TripOnboardInfo_PickupLocationImpl();
void InitDefaultsPublishOnboardingInfo_TripOnboardInfo_PickupLocation();
void InitDefaultsPublishOnboardingInfo_TripOnboardInfo_DropoffLocationImpl();
void InitDefaultsPublishOnboardingInfo_TripOnboardInfo_DropoffLocation();
void InitDefaultsPublishOnboardingInfo_TripOnboardInfoImpl();
void InitDefaultsPublishOnboardingInfo_TripOnboardInfo();
void InitDefaultsPublishOnboardingInfoImpl();
void InitDefaultsPublishOnboardingInfo();
void InitDefaultsPublishMrcImpl();
void InitDefaultsPublishMrc();
void InitDefaultsPublishDriveUpdatesImpl();
void InitDefaultsPublishDriveUpdates();
void InitDefaultsPublishOffboardingTripsImpl();
void InitDefaultsPublishOffboardingTrips();
void InitDefaultsPublishActiveTripInfo_TripActiveInfo_DropOffGPSImpl();
void InitDefaultsPublishActiveTripInfo_TripActiveInfo_DropOffGPS();
void InitDefaultsPublishActiveTripInfo_TripActiveInfoImpl();
void InitDefaultsPublishActiveTripInfo_TripActiveInfo();
void InitDefaultsPublishActiveTripInfoImpl();
void InitDefaultsPublishActiveTripInfo();
inline void InitDefaults() {
  InitDefaultsCancelPullover();
  InitDefaultsCancelPulloverResp();
  InitDefaultsGoAck();
  InitDefaultsGoAckResp();
  InitDefaultsPassengerPullover();
  InitDefaultsPassengerPulloverResp();
  InitDefaultsNewPassengerCount();
  InitDefaultsNewPassengerCountResp();
  InitDefaultsTripIDRequestMoreTime();
  InitDefaultsTripIDRequestMoreTimeResp();
  InitDefaultsPublishArrival();
  InitDefaultsPublishLinger();
  InitDefaultsPublishGoButtonStatus();
  InitDefaultsPublishOnboardingInfo_TripOnboardInfo_PickupLocation();
  InitDefaultsPublishOnboardingInfo_TripOnboardInfo_DropoffLocation();
  InitDefaultsPublishOnboardingInfo_TripOnboardInfo();
  InitDefaultsPublishOnboardingInfo();
  InitDefaultsPublishMrc();
  InitDefaultsPublishDriveUpdates();
  InitDefaultsPublishOffboardingTrips();
  InitDefaultsPublishActiveTripInfo_TripActiveInfo_DropOffGPS();
  InitDefaultsPublishActiveTripInfo_TripActiveInfo();
  InitDefaultsPublishActiveTripInfo();
}
}  // namespace protobuf_TVF_5fTo_5fDXP_2eproto
namespace ford {
namespace av {
namespace taas {
class CancelPullover;
class CancelPulloverDefaultTypeInternal;
extern CancelPulloverDefaultTypeInternal _CancelPullover_default_instance_;
class CancelPulloverResp;
class CancelPulloverRespDefaultTypeInternal;
extern CancelPulloverRespDefaultTypeInternal _CancelPulloverResp_default_instance_;
class GoAck;
class GoAckDefaultTypeInternal;
extern GoAckDefaultTypeInternal _GoAck_default_instance_;
class GoAckResp;
class GoAckRespDefaultTypeInternal;
extern GoAckRespDefaultTypeInternal _GoAckResp_default_instance_;
class NewPassengerCount;
class NewPassengerCountDefaultTypeInternal;
extern NewPassengerCountDefaultTypeInternal _NewPassengerCount_default_instance_;
class NewPassengerCountResp;
class NewPassengerCountRespDefaultTypeInternal;
extern NewPassengerCountRespDefaultTypeInternal _NewPassengerCountResp_default_instance_;
class PassengerPullover;
class PassengerPulloverDefaultTypeInternal;
extern PassengerPulloverDefaultTypeInternal _PassengerPullover_default_instance_;
class PassengerPulloverResp;
class PassengerPulloverRespDefaultTypeInternal;
extern PassengerPulloverRespDefaultTypeInternal _PassengerPulloverResp_default_instance_;
class PublishActiveTripInfo;
class PublishActiveTripInfoDefaultTypeInternal;
extern PublishActiveTripInfoDefaultTypeInternal _PublishActiveTripInfo_default_instance_;
class PublishActiveTripInfo_TripActiveInfo;
class PublishActiveTripInfo_TripActiveInfoDefaultTypeInternal;
extern PublishActiveTripInfo_TripActiveInfoDefaultTypeInternal _PublishActiveTripInfo_TripActiveInfo_default_instance_;
class PublishActiveTripInfo_TripActiveInfo_DropOffGPS;
class PublishActiveTripInfo_TripActiveInfo_DropOffGPSDefaultTypeInternal;
extern PublishActiveTripInfo_TripActiveInfo_DropOffGPSDefaultTypeInternal _PublishActiveTripInfo_TripActiveInfo_DropOffGPS_default_instance_;
class PublishArrival;
class PublishArrivalDefaultTypeInternal;
extern PublishArrivalDefaultTypeInternal _PublishArrival_default_instance_;
class PublishDriveUpdates;
class PublishDriveUpdatesDefaultTypeInternal;
extern PublishDriveUpdatesDefaultTypeInternal _PublishDriveUpdates_default_instance_;
class PublishGoButtonStatus;
class PublishGoButtonStatusDefaultTypeInternal;
extern PublishGoButtonStatusDefaultTypeInternal _PublishGoButtonStatus_default_instance_;
class PublishLinger;
class PublishLingerDefaultTypeInternal;
extern PublishLingerDefaultTypeInternal _PublishLinger_default_instance_;
class PublishMrc;
class PublishMrcDefaultTypeInternal;
extern PublishMrcDefaultTypeInternal _PublishMrc_default_instance_;
class PublishOffboardingTrips;
class PublishOffboardingTripsDefaultTypeInternal;
extern PublishOffboardingTripsDefaultTypeInternal _PublishOffboardingTrips_default_instance_;
class PublishOnboardingInfo;
class PublishOnboardingInfoDefaultTypeInternal;
extern PublishOnboardingInfoDefaultTypeInternal _PublishOnboardingInfo_default_instance_;
class PublishOnboardingInfo_TripOnboardInfo;
class PublishOnboardingInfo_TripOnboardInfoDefaultTypeInternal;
extern PublishOnboardingInfo_TripOnboardInfoDefaultTypeInternal _PublishOnboardingInfo_TripOnboardInfo_default_instance_;
class PublishOnboardingInfo_TripOnboardInfo_DropoffLocation;
class PublishOnboardingInfo_TripOnboardInfo_DropoffLocationDefaultTypeInternal;
extern PublishOnboardingInfo_TripOnboardInfo_DropoffLocationDefaultTypeInternal _PublishOnboardingInfo_TripOnboardInfo_DropoffLocation_default_instance_;
class PublishOnboardingInfo_TripOnboardInfo_PickupLocation;
class PublishOnboardingInfo_TripOnboardInfo_PickupLocationDefaultTypeInternal;
extern PublishOnboardingInfo_TripOnboardInfo_PickupLocationDefaultTypeInternal _PublishOnboardingInfo_TripOnboardInfo_PickupLocation_default_instance_;
class TripIDRequestMoreTime;
class TripIDRequestMoreTimeDefaultTypeInternal;
extern TripIDRequestMoreTimeDefaultTypeInternal _TripIDRequestMoreTime_default_instance_;
class TripIDRequestMoreTimeResp;
class TripIDRequestMoreTimeRespDefaultTypeInternal;
extern TripIDRequestMoreTimeRespDefaultTypeInternal _TripIDRequestMoreTimeResp_default_instance_;
}  // namespace taas
}  // namespace av
}  // namespace ford
namespace ford {
namespace av {
namespace taas {

enum CancelPulloverResp_PulloverCancelStatus {
  CancelPulloverResp_PulloverCancelStatus_PULLOVER_CANCEL_NULL = 0,
  CancelPulloverResp_PulloverCancelStatus_PULLOVER_CANCEL_DECLINED = 1,
  CancelPulloverResp_PulloverCancelStatus_PULLOVER_CANCEL_ACCEPTED = 2,
  CancelPulloverResp_PulloverCancelStatus_CancelPulloverResp_PulloverCancelStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CancelPulloverResp_PulloverCancelStatus_CancelPulloverResp_PulloverCancelStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CancelPulloverResp_PulloverCancelStatus_IsValid(int value);
const CancelPulloverResp_PulloverCancelStatus CancelPulloverResp_PulloverCancelStatus_PulloverCancelStatus_MIN = CancelPulloverResp_PulloverCancelStatus_PULLOVER_CANCEL_NULL;
const CancelPulloverResp_PulloverCancelStatus CancelPulloverResp_PulloverCancelStatus_PulloverCancelStatus_MAX = CancelPulloverResp_PulloverCancelStatus_PULLOVER_CANCEL_ACCEPTED;
const int CancelPulloverResp_PulloverCancelStatus_PulloverCancelStatus_ARRAYSIZE = CancelPulloverResp_PulloverCancelStatus_PulloverCancelStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* CancelPulloverResp_PulloverCancelStatus_descriptor();
inline const ::std::string& CancelPulloverResp_PulloverCancelStatus_Name(CancelPulloverResp_PulloverCancelStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    CancelPulloverResp_PulloverCancelStatus_descriptor(), value);
}
inline bool CancelPulloverResp_PulloverCancelStatus_Parse(
    const ::std::string& name, CancelPulloverResp_PulloverCancelStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CancelPulloverResp_PulloverCancelStatus>(
    CancelPulloverResp_PulloverCancelStatus_descriptor(), name, value);
}
enum GoAckResp_GoACKRespStatus {
  GoAckResp_GoACKRespStatus_GO_DECLINED_NULL = 0,
  GoAckResp_GoACKRespStatus_GO_DECLINED_AWAITING_VDS = 1,
  GoAckResp_GoACKRespStatus_GO_DECLINED_AWAITING_VDS_DOORS_OPEN = 2,
  GoAckResp_GoACKRespStatus_GO_DECLINED_DOORS_OPEN = 3,
  GoAckResp_GoACKRespStatus_GO_ENABLED = 4,
  GoAckResp_GoACKRespStatus_GoAckResp_GoACKRespStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  GoAckResp_GoACKRespStatus_GoAckResp_GoACKRespStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool GoAckResp_GoACKRespStatus_IsValid(int value);
const GoAckResp_GoACKRespStatus GoAckResp_GoACKRespStatus_GoACKRespStatus_MIN = GoAckResp_GoACKRespStatus_GO_DECLINED_NULL;
const GoAckResp_GoACKRespStatus GoAckResp_GoACKRespStatus_GoACKRespStatus_MAX = GoAckResp_GoACKRespStatus_GO_ENABLED;
const int GoAckResp_GoACKRespStatus_GoACKRespStatus_ARRAYSIZE = GoAckResp_GoACKRespStatus_GoACKRespStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* GoAckResp_GoACKRespStatus_descriptor();
inline const ::std::string& GoAckResp_GoACKRespStatus_Name(GoAckResp_GoACKRespStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    GoAckResp_GoACKRespStatus_descriptor(), value);
}
inline bool GoAckResp_GoACKRespStatus_Parse(
    const ::std::string& name, GoAckResp_GoACKRespStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GoAckResp_GoACKRespStatus>(
    GoAckResp_GoACKRespStatus_descriptor(), name, value);
}
enum PassengerPulloverResp_PulloverStatus {
  PassengerPulloverResp_PulloverStatus_PULLOVER_NULL = 0,
  PassengerPulloverResp_PulloverStatus_PULLOVER_DECLINED = 1,
  PassengerPulloverResp_PulloverStatus_PULLOVER_ACCEPTED = 2,
  PassengerPulloverResp_PulloverStatus_PassengerPulloverResp_PulloverStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PassengerPulloverResp_PulloverStatus_PassengerPulloverResp_PulloverStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PassengerPulloverResp_PulloverStatus_IsValid(int value);
const PassengerPulloverResp_PulloverStatus PassengerPulloverResp_PulloverStatus_PulloverStatus_MIN = PassengerPulloverResp_PulloverStatus_PULLOVER_NULL;
const PassengerPulloverResp_PulloverStatus PassengerPulloverResp_PulloverStatus_PulloverStatus_MAX = PassengerPulloverResp_PulloverStatus_PULLOVER_ACCEPTED;
const int PassengerPulloverResp_PulloverStatus_PulloverStatus_ARRAYSIZE = PassengerPulloverResp_PulloverStatus_PulloverStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* PassengerPulloverResp_PulloverStatus_descriptor();
inline const ::std::string& PassengerPulloverResp_PulloverStatus_Name(PassengerPulloverResp_PulloverStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    PassengerPulloverResp_PulloverStatus_descriptor(), value);
}
inline bool PassengerPulloverResp_PulloverStatus_Parse(
    const ::std::string& name, PassengerPulloverResp_PulloverStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PassengerPulloverResp_PulloverStatus>(
    PassengerPulloverResp_PulloverStatus_descriptor(), name, value);
}
enum NewPassengerCountResp_PassCountStatus {
  NewPassengerCountResp_PassCountStatus_PASS_COUNT_NULL = 0,
  NewPassengerCountResp_PassCountStatus_PASS_COUNT_ERROR = 1,
  NewPassengerCountResp_PassCountStatus_PASS_COUNT_CHANGED = 2,
  NewPassengerCountResp_PassCountStatus_NewPassengerCountResp_PassCountStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  NewPassengerCountResp_PassCountStatus_NewPassengerCountResp_PassCountStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool NewPassengerCountResp_PassCountStatus_IsValid(int value);
const NewPassengerCountResp_PassCountStatus NewPassengerCountResp_PassCountStatus_PassCountStatus_MIN = NewPassengerCountResp_PassCountStatus_PASS_COUNT_NULL;
const NewPassengerCountResp_PassCountStatus NewPassengerCountResp_PassCountStatus_PassCountStatus_MAX = NewPassengerCountResp_PassCountStatus_PASS_COUNT_CHANGED;
const int NewPassengerCountResp_PassCountStatus_PassCountStatus_ARRAYSIZE = NewPassengerCountResp_PassCountStatus_PassCountStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* NewPassengerCountResp_PassCountStatus_descriptor();
inline const ::std::string& NewPassengerCountResp_PassCountStatus_Name(NewPassengerCountResp_PassCountStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    NewPassengerCountResp_PassCountStatus_descriptor(), value);
}
inline bool NewPassengerCountResp_PassCountStatus_Parse(
    const ::std::string& name, NewPassengerCountResp_PassCountStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NewPassengerCountResp_PassCountStatus>(
    NewPassengerCountResp_PassCountStatus_descriptor(), name, value);
}
enum TripIDRequestMoreTimeResp_LingerRequestStatus {
  TripIDRequestMoreTimeResp_LingerRequestStatus_TIME_EXTENSION_NULL = 0,
  TripIDRequestMoreTimeResp_LingerRequestStatus_TIME_EXTENSION_DECLINED = 1,
  TripIDRequestMoreTimeResp_LingerRequestStatus_TIME_EXTENDED = 2,
  TripIDRequestMoreTimeResp_LingerRequestStatus_TripIDRequestMoreTimeResp_LingerRequestStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TripIDRequestMoreTimeResp_LingerRequestStatus_TripIDRequestMoreTimeResp_LingerRequestStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TripIDRequestMoreTimeResp_LingerRequestStatus_IsValid(int value);
const TripIDRequestMoreTimeResp_LingerRequestStatus TripIDRequestMoreTimeResp_LingerRequestStatus_LingerRequestStatus_MIN = TripIDRequestMoreTimeResp_LingerRequestStatus_TIME_EXTENSION_NULL;
const TripIDRequestMoreTimeResp_LingerRequestStatus TripIDRequestMoreTimeResp_LingerRequestStatus_LingerRequestStatus_MAX = TripIDRequestMoreTimeResp_LingerRequestStatus_TIME_EXTENDED;
const int TripIDRequestMoreTimeResp_LingerRequestStatus_LingerRequestStatus_ARRAYSIZE = TripIDRequestMoreTimeResp_LingerRequestStatus_LingerRequestStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* TripIDRequestMoreTimeResp_LingerRequestStatus_descriptor();
inline const ::std::string& TripIDRequestMoreTimeResp_LingerRequestStatus_Name(TripIDRequestMoreTimeResp_LingerRequestStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    TripIDRequestMoreTimeResp_LingerRequestStatus_descriptor(), value);
}
inline bool TripIDRequestMoreTimeResp_LingerRequestStatus_Parse(
    const ::std::string& name, TripIDRequestMoreTimeResp_LingerRequestStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TripIDRequestMoreTimeResp_LingerRequestStatus>(
    TripIDRequestMoreTimeResp_LingerRequestStatus_descriptor(), name, value);
}
enum PublishArrival_CurbSide {
  PublishArrival_CurbSide_CURB_SIDE_NULL = 0,
  PublishArrival_CurbSide_CURB_SIDE_LEFT = 1,
  PublishArrival_CurbSide_CURB_SIDE_RIGHT = 2,
  PublishArrival_CurbSide_CURB_SIDE_BOTH = 3,
  PublishArrival_CurbSide_CURB_SIDE_NEITHER = 4,
  PublishArrival_CurbSide_PublishArrival_CurbSide_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PublishArrival_CurbSide_PublishArrival_CurbSide_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PublishArrival_CurbSide_IsValid(int value);
const PublishArrival_CurbSide PublishArrival_CurbSide_CurbSide_MIN = PublishArrival_CurbSide_CURB_SIDE_NULL;
const PublishArrival_CurbSide PublishArrival_CurbSide_CurbSide_MAX = PublishArrival_CurbSide_CURB_SIDE_NEITHER;
const int PublishArrival_CurbSide_CurbSide_ARRAYSIZE = PublishArrival_CurbSide_CurbSide_MAX + 1;

const ::google::protobuf::EnumDescriptor* PublishArrival_CurbSide_descriptor();
inline const ::std::string& PublishArrival_CurbSide_Name(PublishArrival_CurbSide value) {
  return ::google::protobuf::internal::NameOfEnum(
    PublishArrival_CurbSide_descriptor(), value);
}
inline bool PublishArrival_CurbSide_Parse(
    const ::std::string& name, PublishArrival_CurbSide* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PublishArrival_CurbSide>(
    PublishArrival_CurbSide_descriptor(), name, value);
}
enum PublishGoButtonStatus_GoButtonStatus {
  PublishGoButtonStatus_GoButtonStatus_GO_DISABLED_NULL = 0,
  PublishGoButtonStatus_GoButtonStatus_GO_DISABLED_AWAITING_VDS = 1,
  PublishGoButtonStatus_GoButtonStatus_GO_DISABLED_AWAITING_VDS_DOORS_OPEN = 2,
  PublishGoButtonStatus_GoButtonStatus_GO_DISABLED_DOORS_OPEN = 3,
  PublishGoButtonStatus_GoButtonStatus_GO_ENABLED = 4,
  PublishGoButtonStatus_GoButtonStatus_PublishGoButtonStatus_GoButtonStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PublishGoButtonStatus_GoButtonStatus_PublishGoButtonStatus_GoButtonStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PublishGoButtonStatus_GoButtonStatus_IsValid(int value);
const PublishGoButtonStatus_GoButtonStatus PublishGoButtonStatus_GoButtonStatus_GoButtonStatus_MIN = PublishGoButtonStatus_GoButtonStatus_GO_DISABLED_NULL;
const PublishGoButtonStatus_GoButtonStatus PublishGoButtonStatus_GoButtonStatus_GoButtonStatus_MAX = PublishGoButtonStatus_GoButtonStatus_GO_ENABLED;
const int PublishGoButtonStatus_GoButtonStatus_GoButtonStatus_ARRAYSIZE = PublishGoButtonStatus_GoButtonStatus_GoButtonStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* PublishGoButtonStatus_GoButtonStatus_descriptor();
inline const ::std::string& PublishGoButtonStatus_GoButtonStatus_Name(PublishGoButtonStatus_GoButtonStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    PublishGoButtonStatus_GoButtonStatus_descriptor(), value);
}
inline bool PublishGoButtonStatus_GoButtonStatus_Parse(
    const ::std::string& name, PublishGoButtonStatus_GoButtonStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PublishGoButtonStatus_GoButtonStatus>(
    PublishGoButtonStatus_GoButtonStatus_descriptor(), name, value);
}
enum PublishMrc_MrcDescription {
  PublishMrc_MrcDescription_FAULT_DESCRIPTION_TBD_FMES = 0,
  PublishMrc_MrcDescription_PublishMrc_MrcDescription_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PublishMrc_MrcDescription_PublishMrc_MrcDescription_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PublishMrc_MrcDescription_IsValid(int value);
const PublishMrc_MrcDescription PublishMrc_MrcDescription_MrcDescription_MIN = PublishMrc_MrcDescription_FAULT_DESCRIPTION_TBD_FMES;
const PublishMrc_MrcDescription PublishMrc_MrcDescription_MrcDescription_MAX = PublishMrc_MrcDescription_FAULT_DESCRIPTION_TBD_FMES;
const int PublishMrc_MrcDescription_MrcDescription_ARRAYSIZE = PublishMrc_MrcDescription_MrcDescription_MAX + 1;

const ::google::protobuf::EnumDescriptor* PublishMrc_MrcDescription_descriptor();
inline const ::std::string& PublishMrc_MrcDescription_Name(PublishMrc_MrcDescription value) {
  return ::google::protobuf::internal::NameOfEnum(
    PublishMrc_MrcDescription_descriptor(), value);
}
inline bool PublishMrc_MrcDescription_Parse(
    const ::std::string& name, PublishMrc_MrcDescription* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PublishMrc_MrcDescription>(
    PublishMrc_MrcDescription_descriptor(), name, value);
}
enum PublishMrc_Recoverable {
  PublishMrc_Recoverable_RECOVERABLE_TBD_FMES = 0,
  PublishMrc_Recoverable_PublishMrc_Recoverable_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PublishMrc_Recoverable_PublishMrc_Recoverable_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PublishMrc_Recoverable_IsValid(int value);
const PublishMrc_Recoverable PublishMrc_Recoverable_Recoverable_MIN = PublishMrc_Recoverable_RECOVERABLE_TBD_FMES;
const PublishMrc_Recoverable PublishMrc_Recoverable_Recoverable_MAX = PublishMrc_Recoverable_RECOVERABLE_TBD_FMES;
const int PublishMrc_Recoverable_Recoverable_ARRAYSIZE = PublishMrc_Recoverable_Recoverable_MAX + 1;

const ::google::protobuf::EnumDescriptor* PublishMrc_Recoverable_descriptor();
inline const ::std::string& PublishMrc_Recoverable_Name(PublishMrc_Recoverable value) {
  return ::google::protobuf::internal::NameOfEnum(
    PublishMrc_Recoverable_descriptor(), value);
}
inline bool PublishMrc_Recoverable_Parse(
    const ::std::string& name, PublishMrc_Recoverable* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PublishMrc_Recoverable>(
    PublishMrc_Recoverable_descriptor(), name, value);
}
enum PublishMrc_PesState {
  PublishMrc_PesState_PES_STATE_TBD_FMES = 0,
  PublishMrc_PesState_PublishMrc_PesState_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PublishMrc_PesState_PublishMrc_PesState_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PublishMrc_PesState_IsValid(int value);
const PublishMrc_PesState PublishMrc_PesState_PesState_MIN = PublishMrc_PesState_PES_STATE_TBD_FMES;
const PublishMrc_PesState PublishMrc_PesState_PesState_MAX = PublishMrc_PesState_PES_STATE_TBD_FMES;
const int PublishMrc_PesState_PesState_ARRAYSIZE = PublishMrc_PesState_PesState_MAX + 1;

const ::google::protobuf::EnumDescriptor* PublishMrc_PesState_descriptor();
inline const ::std::string& PublishMrc_PesState_Name(PublishMrc_PesState value) {
  return ::google::protobuf::internal::NameOfEnum(
    PublishMrc_PesState_descriptor(), value);
}
inline bool PublishMrc_PesState_Parse(
    const ::std::string& name, PublishMrc_PesState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PublishMrc_PesState>(
    PublishMrc_PesState_descriptor(), name, value);
}
enum PublishMrc_ConveniencePullover {
  PublishMrc_ConveniencePullover_CONVENIENCE_PULLOVER_TBD_FMES = 0,
  PublishMrc_ConveniencePullover_PublishMrc_ConveniencePullover_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PublishMrc_ConveniencePullover_PublishMrc_ConveniencePullover_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PublishMrc_ConveniencePullover_IsValid(int value);
const PublishMrc_ConveniencePullover PublishMrc_ConveniencePullover_ConveniencePullover_MIN = PublishMrc_ConveniencePullover_CONVENIENCE_PULLOVER_TBD_FMES;
const PublishMrc_ConveniencePullover PublishMrc_ConveniencePullover_ConveniencePullover_MAX = PublishMrc_ConveniencePullover_CONVENIENCE_PULLOVER_TBD_FMES;
const int PublishMrc_ConveniencePullover_ConveniencePullover_ARRAYSIZE = PublishMrc_ConveniencePullover_ConveniencePullover_MAX + 1;

const ::google::protobuf::EnumDescriptor* PublishMrc_ConveniencePullover_descriptor();
inline const ::std::string& PublishMrc_ConveniencePullover_Name(PublishMrc_ConveniencePullover value) {
  return ::google::protobuf::internal::NameOfEnum(
    PublishMrc_ConveniencePullover_descriptor(), value);
}
inline bool PublishMrc_ConveniencePullover_Parse(
    const ::std::string& name, PublishMrc_ConveniencePullover* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PublishMrc_ConveniencePullover>(
    PublishMrc_ConveniencePullover_descriptor(), name, value);
}
// ===================================================================

class CancelPullover : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.CancelPullover) */ {
 public:
  CancelPullover();
  virtual ~CancelPullover();

  CancelPullover(const CancelPullover& from);

  inline CancelPullover& operator=(const CancelPullover& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CancelPullover(CancelPullover&& from) noexcept
    : CancelPullover() {
    *this = ::std::move(from);
  }

  inline CancelPullover& operator=(CancelPullover&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelPullover& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelPullover* internal_default_instance() {
    return reinterpret_cast<const CancelPullover*>(
               &_CancelPullover_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CancelPullover* other);
  friend void swap(CancelPullover& a, CancelPullover& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CancelPullover* New() const PROTOBUF_FINAL { return New(NULL); }

  CancelPullover* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CancelPullover& from);
  void MergeFrom(const CancelPullover& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CancelPullover* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ford.av.taas.__ApiVersion __api_version = 1;
  bool has___api_version() const;
  void clear___api_version();
  static const int kApiVersionFieldNumber = 1;
  const ::ford::av::taas::__ApiVersion& __api_version() const;
  ::ford::av::taas::__ApiVersion* release___api_version();
  ::ford::av::taas::__ApiVersion* mutable___api_version();
  void set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version);

  // bool cancel_pullover = 2;
  void clear_cancel_pullover();
  static const int kCancelPulloverFieldNumber = 2;
  bool cancel_pullover() const;
  void set_cancel_pullover(bool value);

  // @@protoc_insertion_point(class_scope:ford.av.taas.CancelPullover)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ford::av::taas::__ApiVersion* __api_version_;
  bool cancel_pullover_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsCancelPulloverImpl();
};
// -------------------------------------------------------------------

class CancelPulloverResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.CancelPulloverResp) */ {
 public:
  CancelPulloverResp();
  virtual ~CancelPulloverResp();

  CancelPulloverResp(const CancelPulloverResp& from);

  inline CancelPulloverResp& operator=(const CancelPulloverResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CancelPulloverResp(CancelPulloverResp&& from) noexcept
    : CancelPulloverResp() {
    *this = ::std::move(from);
  }

  inline CancelPulloverResp& operator=(CancelPulloverResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelPulloverResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelPulloverResp* internal_default_instance() {
    return reinterpret_cast<const CancelPulloverResp*>(
               &_CancelPulloverResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(CancelPulloverResp* other);
  friend void swap(CancelPulloverResp& a, CancelPulloverResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CancelPulloverResp* New() const PROTOBUF_FINAL { return New(NULL); }

  CancelPulloverResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CancelPulloverResp& from);
  void MergeFrom(const CancelPulloverResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CancelPulloverResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CancelPulloverResp_PulloverCancelStatus PulloverCancelStatus;
  static const PulloverCancelStatus PULLOVER_CANCEL_NULL =
    CancelPulloverResp_PulloverCancelStatus_PULLOVER_CANCEL_NULL;
  static const PulloverCancelStatus PULLOVER_CANCEL_DECLINED =
    CancelPulloverResp_PulloverCancelStatus_PULLOVER_CANCEL_DECLINED;
  static const PulloverCancelStatus PULLOVER_CANCEL_ACCEPTED =
    CancelPulloverResp_PulloverCancelStatus_PULLOVER_CANCEL_ACCEPTED;
  static inline bool PulloverCancelStatus_IsValid(int value) {
    return CancelPulloverResp_PulloverCancelStatus_IsValid(value);
  }
  static const PulloverCancelStatus PulloverCancelStatus_MIN =
    CancelPulloverResp_PulloverCancelStatus_PulloverCancelStatus_MIN;
  static const PulloverCancelStatus PulloverCancelStatus_MAX =
    CancelPulloverResp_PulloverCancelStatus_PulloverCancelStatus_MAX;
  static const int PulloverCancelStatus_ARRAYSIZE =
    CancelPulloverResp_PulloverCancelStatus_PulloverCancelStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PulloverCancelStatus_descriptor() {
    return CancelPulloverResp_PulloverCancelStatus_descriptor();
  }
  static inline const ::std::string& PulloverCancelStatus_Name(PulloverCancelStatus value) {
    return CancelPulloverResp_PulloverCancelStatus_Name(value);
  }
  static inline bool PulloverCancelStatus_Parse(const ::std::string& name,
      PulloverCancelStatus* value) {
    return CancelPulloverResp_PulloverCancelStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ford.av.taas.__ApiVersion __api_version = 1;
  bool has___api_version() const;
  void clear___api_version();
  static const int kApiVersionFieldNumber = 1;
  const ::ford::av::taas::__ApiVersion& __api_version() const;
  ::ford::av::taas::__ApiVersion* release___api_version();
  ::ford::av::taas::__ApiVersion* mutable___api_version();
  void set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version);

  // .ford.av.taas.CancelPulloverResp.PulloverCancelStatus cancel_pullover_status = 2;
  void clear_cancel_pullover_status();
  static const int kCancelPulloverStatusFieldNumber = 2;
  ::ford::av::taas::CancelPulloverResp_PulloverCancelStatus cancel_pullover_status() const;
  void set_cancel_pullover_status(::ford::av::taas::CancelPulloverResp_PulloverCancelStatus value);

  // @@protoc_insertion_point(class_scope:ford.av.taas.CancelPulloverResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ford::av::taas::__ApiVersion* __api_version_;
  int cancel_pullover_status_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsCancelPulloverRespImpl();
};
// -------------------------------------------------------------------

class GoAck : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.GoAck) */ {
 public:
  GoAck();
  virtual ~GoAck();

  GoAck(const GoAck& from);

  inline GoAck& operator=(const GoAck& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GoAck(GoAck&& from) noexcept
    : GoAck() {
    *this = ::std::move(from);
  }

  inline GoAck& operator=(GoAck&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GoAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GoAck* internal_default_instance() {
    return reinterpret_cast<const GoAck*>(
               &_GoAck_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(GoAck* other);
  friend void swap(GoAck& a, GoAck& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GoAck* New() const PROTOBUF_FINAL { return New(NULL); }

  GoAck* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GoAck& from);
  void MergeFrom(const GoAck& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GoAck* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes trip_id = 2;
  void clear_trip_id();
  static const int kTripIdFieldNumber = 2;
  const ::std::string& trip_id() const;
  void set_trip_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trip_id(::std::string&& value);
  #endif
  void set_trip_id(const char* value);
  void set_trip_id(const void* value, size_t size);
  ::std::string* mutable_trip_id();
  ::std::string* release_trip_id();
  void set_allocated_trip_id(::std::string* trip_id);

  // .ford.av.taas.__ApiVersion __api_version = 1;
  bool has___api_version() const;
  void clear___api_version();
  static const int kApiVersionFieldNumber = 1;
  const ::ford::av::taas::__ApiVersion& __api_version() const;
  ::ford::av::taas::__ApiVersion* release___api_version();
  ::ford::av::taas::__ApiVersion* mutable___api_version();
  void set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version);

  // @@protoc_insertion_point(class_scope:ford.av.taas.GoAck)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr trip_id_;
  ::ford::av::taas::__ApiVersion* __api_version_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsGoAckImpl();
};
// -------------------------------------------------------------------

class GoAckResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.GoAckResp) */ {
 public:
  GoAckResp();
  virtual ~GoAckResp();

  GoAckResp(const GoAckResp& from);

  inline GoAckResp& operator=(const GoAckResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GoAckResp(GoAckResp&& from) noexcept
    : GoAckResp() {
    *this = ::std::move(from);
  }

  inline GoAckResp& operator=(GoAckResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GoAckResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GoAckResp* internal_default_instance() {
    return reinterpret_cast<const GoAckResp*>(
               &_GoAckResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(GoAckResp* other);
  friend void swap(GoAckResp& a, GoAckResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GoAckResp* New() const PROTOBUF_FINAL { return New(NULL); }

  GoAckResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const GoAckResp& from);
  void MergeFrom(const GoAckResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(GoAckResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef GoAckResp_GoACKRespStatus GoACKRespStatus;
  static const GoACKRespStatus GO_DECLINED_NULL =
    GoAckResp_GoACKRespStatus_GO_DECLINED_NULL;
  static const GoACKRespStatus GO_DECLINED_AWAITING_VDS =
    GoAckResp_GoACKRespStatus_GO_DECLINED_AWAITING_VDS;
  static const GoACKRespStatus GO_DECLINED_AWAITING_VDS_DOORS_OPEN =
    GoAckResp_GoACKRespStatus_GO_DECLINED_AWAITING_VDS_DOORS_OPEN;
  static const GoACKRespStatus GO_DECLINED_DOORS_OPEN =
    GoAckResp_GoACKRespStatus_GO_DECLINED_DOORS_OPEN;
  static const GoACKRespStatus GO_ENABLED =
    GoAckResp_GoACKRespStatus_GO_ENABLED;
  static inline bool GoACKRespStatus_IsValid(int value) {
    return GoAckResp_GoACKRespStatus_IsValid(value);
  }
  static const GoACKRespStatus GoACKRespStatus_MIN =
    GoAckResp_GoACKRespStatus_GoACKRespStatus_MIN;
  static const GoACKRespStatus GoACKRespStatus_MAX =
    GoAckResp_GoACKRespStatus_GoACKRespStatus_MAX;
  static const int GoACKRespStatus_ARRAYSIZE =
    GoAckResp_GoACKRespStatus_GoACKRespStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GoACKRespStatus_descriptor() {
    return GoAckResp_GoACKRespStatus_descriptor();
  }
  static inline const ::std::string& GoACKRespStatus_Name(GoACKRespStatus value) {
    return GoAckResp_GoACKRespStatus_Name(value);
  }
  static inline bool GoACKRespStatus_Parse(const ::std::string& name,
      GoACKRespStatus* value) {
    return GoAckResp_GoACKRespStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ford.av.taas.__ApiVersion __api_version = 1;
  bool has___api_version() const;
  void clear___api_version();
  static const int kApiVersionFieldNumber = 1;
  const ::ford::av::taas::__ApiVersion& __api_version() const;
  ::ford::av::taas::__ApiVersion* release___api_version();
  ::ford::av::taas::__ApiVersion* mutable___api_version();
  void set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version);

  // .ford.av.taas.GoAckResp.GoACKRespStatus go_ack_status = 2;
  void clear_go_ack_status();
  static const int kGoAckStatusFieldNumber = 2;
  ::ford::av::taas::GoAckResp_GoACKRespStatus go_ack_status() const;
  void set_go_ack_status(::ford::av::taas::GoAckResp_GoACKRespStatus value);

  // @@protoc_insertion_point(class_scope:ford.av.taas.GoAckResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ford::av::taas::__ApiVersion* __api_version_;
  int go_ack_status_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsGoAckRespImpl();
};
// -------------------------------------------------------------------

class PassengerPullover : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.PassengerPullover) */ {
 public:
  PassengerPullover();
  virtual ~PassengerPullover();

  PassengerPullover(const PassengerPullover& from);

  inline PassengerPullover& operator=(const PassengerPullover& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PassengerPullover(PassengerPullover&& from) noexcept
    : PassengerPullover() {
    *this = ::std::move(from);
  }

  inline PassengerPullover& operator=(PassengerPullover&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PassengerPullover& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PassengerPullover* internal_default_instance() {
    return reinterpret_cast<const PassengerPullover*>(
               &_PassengerPullover_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PassengerPullover* other);
  friend void swap(PassengerPullover& a, PassengerPullover& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PassengerPullover* New() const PROTOBUF_FINAL { return New(NULL); }

  PassengerPullover* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PassengerPullover& from);
  void MergeFrom(const PassengerPullover& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PassengerPullover* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ford.av.taas.__ApiVersion __api_version = 1;
  bool has___api_version() const;
  void clear___api_version();
  static const int kApiVersionFieldNumber = 1;
  const ::ford::av::taas::__ApiVersion& __api_version() const;
  ::ford::av::taas::__ApiVersion* release___api_version();
  ::ford::av::taas::__ApiVersion* mutable___api_version();
  void set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version);

  // bool passenger_pullover = 2;
  void clear_passenger_pullover();
  static const int kPassengerPulloverFieldNumber = 2;
  bool passenger_pullover() const;
  void set_passenger_pullover(bool value);

  // @@protoc_insertion_point(class_scope:ford.av.taas.PassengerPullover)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ford::av::taas::__ApiVersion* __api_version_;
  bool passenger_pullover_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPassengerPulloverImpl();
};
// -------------------------------------------------------------------

class PassengerPulloverResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.PassengerPulloverResp) */ {
 public:
  PassengerPulloverResp();
  virtual ~PassengerPulloverResp();

  PassengerPulloverResp(const PassengerPulloverResp& from);

  inline PassengerPulloverResp& operator=(const PassengerPulloverResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PassengerPulloverResp(PassengerPulloverResp&& from) noexcept
    : PassengerPulloverResp() {
    *this = ::std::move(from);
  }

  inline PassengerPulloverResp& operator=(PassengerPulloverResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PassengerPulloverResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PassengerPulloverResp* internal_default_instance() {
    return reinterpret_cast<const PassengerPulloverResp*>(
               &_PassengerPulloverResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PassengerPulloverResp* other);
  friend void swap(PassengerPulloverResp& a, PassengerPulloverResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PassengerPulloverResp* New() const PROTOBUF_FINAL { return New(NULL); }

  PassengerPulloverResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PassengerPulloverResp& from);
  void MergeFrom(const PassengerPulloverResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PassengerPulloverResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PassengerPulloverResp_PulloverStatus PulloverStatus;
  static const PulloverStatus PULLOVER_NULL =
    PassengerPulloverResp_PulloverStatus_PULLOVER_NULL;
  static const PulloverStatus PULLOVER_DECLINED =
    PassengerPulloverResp_PulloverStatus_PULLOVER_DECLINED;
  static const PulloverStatus PULLOVER_ACCEPTED =
    PassengerPulloverResp_PulloverStatus_PULLOVER_ACCEPTED;
  static inline bool PulloverStatus_IsValid(int value) {
    return PassengerPulloverResp_PulloverStatus_IsValid(value);
  }
  static const PulloverStatus PulloverStatus_MIN =
    PassengerPulloverResp_PulloverStatus_PulloverStatus_MIN;
  static const PulloverStatus PulloverStatus_MAX =
    PassengerPulloverResp_PulloverStatus_PulloverStatus_MAX;
  static const int PulloverStatus_ARRAYSIZE =
    PassengerPulloverResp_PulloverStatus_PulloverStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PulloverStatus_descriptor() {
    return PassengerPulloverResp_PulloverStatus_descriptor();
  }
  static inline const ::std::string& PulloverStatus_Name(PulloverStatus value) {
    return PassengerPulloverResp_PulloverStatus_Name(value);
  }
  static inline bool PulloverStatus_Parse(const ::std::string& name,
      PulloverStatus* value) {
    return PassengerPulloverResp_PulloverStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ford.av.taas.__ApiVersion __api_version = 1;
  bool has___api_version() const;
  void clear___api_version();
  static const int kApiVersionFieldNumber = 1;
  const ::ford::av::taas::__ApiVersion& __api_version() const;
  ::ford::av::taas::__ApiVersion* release___api_version();
  ::ford::av::taas::__ApiVersion* mutable___api_version();
  void set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version);

  // .ford.av.taas.PassengerPulloverResp.PulloverStatus passenger_pullover_status = 2;
  void clear_passenger_pullover_status();
  static const int kPassengerPulloverStatusFieldNumber = 2;
  ::ford::av::taas::PassengerPulloverResp_PulloverStatus passenger_pullover_status() const;
  void set_passenger_pullover_status(::ford::av::taas::PassengerPulloverResp_PulloverStatus value);

  // @@protoc_insertion_point(class_scope:ford.av.taas.PassengerPulloverResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ford::av::taas::__ApiVersion* __api_version_;
  int passenger_pullover_status_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPassengerPulloverRespImpl();
};
// -------------------------------------------------------------------

class NewPassengerCount : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.NewPassengerCount) */ {
 public:
  NewPassengerCount();
  virtual ~NewPassengerCount();

  NewPassengerCount(const NewPassengerCount& from);

  inline NewPassengerCount& operator=(const NewPassengerCount& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewPassengerCount(NewPassengerCount&& from) noexcept
    : NewPassengerCount() {
    *this = ::std::move(from);
  }

  inline NewPassengerCount& operator=(NewPassengerCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewPassengerCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewPassengerCount* internal_default_instance() {
    return reinterpret_cast<const NewPassengerCount*>(
               &_NewPassengerCount_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(NewPassengerCount* other);
  friend void swap(NewPassengerCount& a, NewPassengerCount& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewPassengerCount* New() const PROTOBUF_FINAL { return New(NULL); }

  NewPassengerCount* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NewPassengerCount& from);
  void MergeFrom(const NewPassengerCount& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NewPassengerCount* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes trip_id = 2;
  void clear_trip_id();
  static const int kTripIdFieldNumber = 2;
  const ::std::string& trip_id() const;
  void set_trip_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trip_id(::std::string&& value);
  #endif
  void set_trip_id(const char* value);
  void set_trip_id(const void* value, size_t size);
  ::std::string* mutable_trip_id();
  ::std::string* release_trip_id();
  void set_allocated_trip_id(::std::string* trip_id);

  // .ford.av.taas.__ApiVersion __api_version = 1;
  bool has___api_version() const;
  void clear___api_version();
  static const int kApiVersionFieldNumber = 1;
  const ::ford::av::taas::__ApiVersion& __api_version() const;
  ::ford::av::taas::__ApiVersion* release___api_version();
  ::ford::av::taas::__ApiVersion* mutable___api_version();
  void set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version);

  // uint32 pass_count = 3;
  void clear_pass_count();
  static const int kPassCountFieldNumber = 3;
  ::google::protobuf::uint32 pass_count() const;
  void set_pass_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ford.av.taas.NewPassengerCount)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr trip_id_;
  ::ford::av::taas::__ApiVersion* __api_version_;
  ::google::protobuf::uint32 pass_count_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsNewPassengerCountImpl();
};
// -------------------------------------------------------------------

class NewPassengerCountResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.NewPassengerCountResp) */ {
 public:
  NewPassengerCountResp();
  virtual ~NewPassengerCountResp();

  NewPassengerCountResp(const NewPassengerCountResp& from);

  inline NewPassengerCountResp& operator=(const NewPassengerCountResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NewPassengerCountResp(NewPassengerCountResp&& from) noexcept
    : NewPassengerCountResp() {
    *this = ::std::move(from);
  }

  inline NewPassengerCountResp& operator=(NewPassengerCountResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewPassengerCountResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NewPassengerCountResp* internal_default_instance() {
    return reinterpret_cast<const NewPassengerCountResp*>(
               &_NewPassengerCountResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(NewPassengerCountResp* other);
  friend void swap(NewPassengerCountResp& a, NewPassengerCountResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NewPassengerCountResp* New() const PROTOBUF_FINAL { return New(NULL); }

  NewPassengerCountResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const NewPassengerCountResp& from);
  void MergeFrom(const NewPassengerCountResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(NewPassengerCountResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef NewPassengerCountResp_PassCountStatus PassCountStatus;
  static const PassCountStatus PASS_COUNT_NULL =
    NewPassengerCountResp_PassCountStatus_PASS_COUNT_NULL;
  static const PassCountStatus PASS_COUNT_ERROR =
    NewPassengerCountResp_PassCountStatus_PASS_COUNT_ERROR;
  static const PassCountStatus PASS_COUNT_CHANGED =
    NewPassengerCountResp_PassCountStatus_PASS_COUNT_CHANGED;
  static inline bool PassCountStatus_IsValid(int value) {
    return NewPassengerCountResp_PassCountStatus_IsValid(value);
  }
  static const PassCountStatus PassCountStatus_MIN =
    NewPassengerCountResp_PassCountStatus_PassCountStatus_MIN;
  static const PassCountStatus PassCountStatus_MAX =
    NewPassengerCountResp_PassCountStatus_PassCountStatus_MAX;
  static const int PassCountStatus_ARRAYSIZE =
    NewPassengerCountResp_PassCountStatus_PassCountStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PassCountStatus_descriptor() {
    return NewPassengerCountResp_PassCountStatus_descriptor();
  }
  static inline const ::std::string& PassCountStatus_Name(PassCountStatus value) {
    return NewPassengerCountResp_PassCountStatus_Name(value);
  }
  static inline bool PassCountStatus_Parse(const ::std::string& name,
      PassCountStatus* value) {
    return NewPassengerCountResp_PassCountStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ford.av.taas.__ApiVersion __api_version = 1;
  bool has___api_version() const;
  void clear___api_version();
  static const int kApiVersionFieldNumber = 1;
  const ::ford::av::taas::__ApiVersion& __api_version() const;
  ::ford::av::taas::__ApiVersion* release___api_version();
  ::ford::av::taas::__ApiVersion* mutable___api_version();
  void set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version);

  // .ford.av.taas.NewPassengerCountResp.PassCountStatus pass_count_status = 2;
  void clear_pass_count_status();
  static const int kPassCountStatusFieldNumber = 2;
  ::ford::av::taas::NewPassengerCountResp_PassCountStatus pass_count_status() const;
  void set_pass_count_status(::ford::av::taas::NewPassengerCountResp_PassCountStatus value);

  // @@protoc_insertion_point(class_scope:ford.av.taas.NewPassengerCountResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ford::av::taas::__ApiVersion* __api_version_;
  int pass_count_status_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsNewPassengerCountRespImpl();
};
// -------------------------------------------------------------------

class TripIDRequestMoreTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.TripIDRequestMoreTime) */ {
 public:
  TripIDRequestMoreTime();
  virtual ~TripIDRequestMoreTime();

  TripIDRequestMoreTime(const TripIDRequestMoreTime& from);

  inline TripIDRequestMoreTime& operator=(const TripIDRequestMoreTime& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TripIDRequestMoreTime(TripIDRequestMoreTime&& from) noexcept
    : TripIDRequestMoreTime() {
    *this = ::std::move(from);
  }

  inline TripIDRequestMoreTime& operator=(TripIDRequestMoreTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TripIDRequestMoreTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TripIDRequestMoreTime* internal_default_instance() {
    return reinterpret_cast<const TripIDRequestMoreTime*>(
               &_TripIDRequestMoreTime_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(TripIDRequestMoreTime* other);
  friend void swap(TripIDRequestMoreTime& a, TripIDRequestMoreTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TripIDRequestMoreTime* New() const PROTOBUF_FINAL { return New(NULL); }

  TripIDRequestMoreTime* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TripIDRequestMoreTime& from);
  void MergeFrom(const TripIDRequestMoreTime& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TripIDRequestMoreTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes trip_id = 2;
  void clear_trip_id();
  static const int kTripIdFieldNumber = 2;
  const ::std::string& trip_id() const;
  void set_trip_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trip_id(::std::string&& value);
  #endif
  void set_trip_id(const char* value);
  void set_trip_id(const void* value, size_t size);
  ::std::string* mutable_trip_id();
  ::std::string* release_trip_id();
  void set_allocated_trip_id(::std::string* trip_id);

  // .ford.av.taas.__ApiVersion __api_version = 1;
  bool has___api_version() const;
  void clear___api_version();
  static const int kApiVersionFieldNumber = 1;
  const ::ford::av::taas::__ApiVersion& __api_version() const;
  ::ford::av::taas::__ApiVersion* release___api_version();
  ::ford::av::taas::__ApiVersion* mutable___api_version();
  void set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version);

  // @@protoc_insertion_point(class_scope:ford.av.taas.TripIDRequestMoreTime)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr trip_id_;
  ::ford::av::taas::__ApiVersion* __api_version_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsTripIDRequestMoreTimeImpl();
};
// -------------------------------------------------------------------

class TripIDRequestMoreTimeResp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.TripIDRequestMoreTimeResp) */ {
 public:
  TripIDRequestMoreTimeResp();
  virtual ~TripIDRequestMoreTimeResp();

  TripIDRequestMoreTimeResp(const TripIDRequestMoreTimeResp& from);

  inline TripIDRequestMoreTimeResp& operator=(const TripIDRequestMoreTimeResp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TripIDRequestMoreTimeResp(TripIDRequestMoreTimeResp&& from) noexcept
    : TripIDRequestMoreTimeResp() {
    *this = ::std::move(from);
  }

  inline TripIDRequestMoreTimeResp& operator=(TripIDRequestMoreTimeResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TripIDRequestMoreTimeResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TripIDRequestMoreTimeResp* internal_default_instance() {
    return reinterpret_cast<const TripIDRequestMoreTimeResp*>(
               &_TripIDRequestMoreTimeResp_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(TripIDRequestMoreTimeResp* other);
  friend void swap(TripIDRequestMoreTimeResp& a, TripIDRequestMoreTimeResp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TripIDRequestMoreTimeResp* New() const PROTOBUF_FINAL { return New(NULL); }

  TripIDRequestMoreTimeResp* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const TripIDRequestMoreTimeResp& from);
  void MergeFrom(const TripIDRequestMoreTimeResp& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(TripIDRequestMoreTimeResp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TripIDRequestMoreTimeResp_LingerRequestStatus LingerRequestStatus;
  static const LingerRequestStatus TIME_EXTENSION_NULL =
    TripIDRequestMoreTimeResp_LingerRequestStatus_TIME_EXTENSION_NULL;
  static const LingerRequestStatus TIME_EXTENSION_DECLINED =
    TripIDRequestMoreTimeResp_LingerRequestStatus_TIME_EXTENSION_DECLINED;
  static const LingerRequestStatus TIME_EXTENDED =
    TripIDRequestMoreTimeResp_LingerRequestStatus_TIME_EXTENDED;
  static inline bool LingerRequestStatus_IsValid(int value) {
    return TripIDRequestMoreTimeResp_LingerRequestStatus_IsValid(value);
  }
  static const LingerRequestStatus LingerRequestStatus_MIN =
    TripIDRequestMoreTimeResp_LingerRequestStatus_LingerRequestStatus_MIN;
  static const LingerRequestStatus LingerRequestStatus_MAX =
    TripIDRequestMoreTimeResp_LingerRequestStatus_LingerRequestStatus_MAX;
  static const int LingerRequestStatus_ARRAYSIZE =
    TripIDRequestMoreTimeResp_LingerRequestStatus_LingerRequestStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LingerRequestStatus_descriptor() {
    return TripIDRequestMoreTimeResp_LingerRequestStatus_descriptor();
  }
  static inline const ::std::string& LingerRequestStatus_Name(LingerRequestStatus value) {
    return TripIDRequestMoreTimeResp_LingerRequestStatus_Name(value);
  }
  static inline bool LingerRequestStatus_Parse(const ::std::string& name,
      LingerRequestStatus* value) {
    return TripIDRequestMoreTimeResp_LingerRequestStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ford.av.taas.__ApiVersion __api_version = 1;
  bool has___api_version() const;
  void clear___api_version();
  static const int kApiVersionFieldNumber = 1;
  const ::ford::av::taas::__ApiVersion& __api_version() const;
  ::ford::av::taas::__ApiVersion* release___api_version();
  ::ford::av::taas::__ApiVersion* mutable___api_version();
  void set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version);

  // .ford.av.taas.TripIDRequestMoreTimeResp.LingerRequestStatus more_time_status = 2;
  void clear_more_time_status();
  static const int kMoreTimeStatusFieldNumber = 2;
  ::ford::av::taas::TripIDRequestMoreTimeResp_LingerRequestStatus more_time_status() const;
  void set_more_time_status(::ford::av::taas::TripIDRequestMoreTimeResp_LingerRequestStatus value);

  // @@protoc_insertion_point(class_scope:ford.av.taas.TripIDRequestMoreTimeResp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ford::av::taas::__ApiVersion* __api_version_;
  int more_time_status_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsTripIDRequestMoreTimeRespImpl();
};
// -------------------------------------------------------------------

class PublishArrival : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.PublishArrival) */ {
 public:
  PublishArrival();
  virtual ~PublishArrival();

  PublishArrival(const PublishArrival& from);

  inline PublishArrival& operator=(const PublishArrival& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishArrival(PublishArrival&& from) noexcept
    : PublishArrival() {
    *this = ::std::move(from);
  }

  inline PublishArrival& operator=(PublishArrival&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishArrival& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishArrival* internal_default_instance() {
    return reinterpret_cast<const PublishArrival*>(
               &_PublishArrival_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(PublishArrival* other);
  friend void swap(PublishArrival& a, PublishArrival& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishArrival* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishArrival* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishArrival& from);
  void MergeFrom(const PublishArrival& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishArrival* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PublishArrival_CurbSide CurbSide;
  static const CurbSide CURB_SIDE_NULL =
    PublishArrival_CurbSide_CURB_SIDE_NULL;
  static const CurbSide CURB_SIDE_LEFT =
    PublishArrival_CurbSide_CURB_SIDE_LEFT;
  static const CurbSide CURB_SIDE_RIGHT =
    PublishArrival_CurbSide_CURB_SIDE_RIGHT;
  static const CurbSide CURB_SIDE_BOTH =
    PublishArrival_CurbSide_CURB_SIDE_BOTH;
  static const CurbSide CURB_SIDE_NEITHER =
    PublishArrival_CurbSide_CURB_SIDE_NEITHER;
  static inline bool CurbSide_IsValid(int value) {
    return PublishArrival_CurbSide_IsValid(value);
  }
  static const CurbSide CurbSide_MIN =
    PublishArrival_CurbSide_CurbSide_MIN;
  static const CurbSide CurbSide_MAX =
    PublishArrival_CurbSide_CurbSide_MAX;
  static const int CurbSide_ARRAYSIZE =
    PublishArrival_CurbSide_CurbSide_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CurbSide_descriptor() {
    return PublishArrival_CurbSide_descriptor();
  }
  static inline const ::std::string& CurbSide_Name(CurbSide value) {
    return PublishArrival_CurbSide_Name(value);
  }
  static inline bool CurbSide_Parse(const ::std::string& name,
      CurbSide* value) {
    return PublishArrival_CurbSide_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ford.av.taas.__ApiVersion __api_version = 1;
  bool has___api_version() const;
  void clear___api_version();
  static const int kApiVersionFieldNumber = 1;
  const ::ford::av::taas::__ApiVersion& __api_version() const;
  ::ford::av::taas::__ApiVersion* release___api_version();
  ::ford::av::taas::__ApiVersion* mutable___api_version();
  void set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version);

  // bool should_disp = 2;
  void clear_should_disp();
  static const int kShouldDispFieldNumber = 2;
  bool should_disp() const;
  void set_should_disp(bool value);

  // .ford.av.taas.PublishArrival.CurbSide curbside = 3;
  void clear_curbside();
  static const int kCurbsideFieldNumber = 3;
  ::ford::av::taas::PublishArrival_CurbSide curbside() const;
  void set_curbside(::ford::av::taas::PublishArrival_CurbSide value);

  // @@protoc_insertion_point(class_scope:ford.av.taas.PublishArrival)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ford::av::taas::__ApiVersion* __api_version_;
  bool should_disp_;
  int curbside_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishArrivalImpl();
};
// -------------------------------------------------------------------

class PublishLinger : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.PublishLinger) */ {
 public:
  PublishLinger();
  virtual ~PublishLinger();

  PublishLinger(const PublishLinger& from);

  inline PublishLinger& operator=(const PublishLinger& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishLinger(PublishLinger&& from) noexcept
    : PublishLinger() {
    *this = ::std::move(from);
  }

  inline PublishLinger& operator=(PublishLinger&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishLinger& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishLinger* internal_default_instance() {
    return reinterpret_cast<const PublishLinger*>(
               &_PublishLinger_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(PublishLinger* other);
  friend void swap(PublishLinger& a, PublishLinger& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishLinger* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishLinger* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishLinger& from);
  void MergeFrom(const PublishLinger& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishLinger* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ford.av.taas.__ApiVersion __api_version = 1;
  bool has___api_version() const;
  void clear___api_version();
  static const int kApiVersionFieldNumber = 1;
  const ::ford::av::taas::__ApiVersion& __api_version() const;
  ::ford::av::taas::__ApiVersion* release___api_version();
  ::ford::av::taas::__ApiVersion* mutable___api_version();
  void set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version);

  // uint32 linger_rem = 2;
  void clear_linger_rem();
  static const int kLingerRemFieldNumber = 2;
  ::google::protobuf::uint32 linger_rem() const;
  void set_linger_rem(::google::protobuf::uint32 value);

  // bool linger_exc = 3;
  void clear_linger_exc();
  static const int kLingerExcFieldNumber = 3;
  bool linger_exc() const;
  void set_linger_exc(bool value);

  // bool can_extend_linger = 4;
  void clear_can_extend_linger();
  static const int kCanExtendLingerFieldNumber = 4;
  bool can_extend_linger() const;
  void set_can_extend_linger(bool value);

  // bool emphatic_leave = 5;
  void clear_emphatic_leave();
  static const int kEmphaticLeaveFieldNumber = 5;
  bool emphatic_leave() const;
  void set_emphatic_leave(bool value);

  // @@protoc_insertion_point(class_scope:ford.av.taas.PublishLinger)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ford::av::taas::__ApiVersion* __api_version_;
  ::google::protobuf::uint32 linger_rem_;
  bool linger_exc_;
  bool can_extend_linger_;
  bool emphatic_leave_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishLingerImpl();
};
// -------------------------------------------------------------------

class PublishGoButtonStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.PublishGoButtonStatus) */ {
 public:
  PublishGoButtonStatus();
  virtual ~PublishGoButtonStatus();

  PublishGoButtonStatus(const PublishGoButtonStatus& from);

  inline PublishGoButtonStatus& operator=(const PublishGoButtonStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishGoButtonStatus(PublishGoButtonStatus&& from) noexcept
    : PublishGoButtonStatus() {
    *this = ::std::move(from);
  }

  inline PublishGoButtonStatus& operator=(PublishGoButtonStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishGoButtonStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishGoButtonStatus* internal_default_instance() {
    return reinterpret_cast<const PublishGoButtonStatus*>(
               &_PublishGoButtonStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(PublishGoButtonStatus* other);
  friend void swap(PublishGoButtonStatus& a, PublishGoButtonStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishGoButtonStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishGoButtonStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishGoButtonStatus& from);
  void MergeFrom(const PublishGoButtonStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishGoButtonStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PublishGoButtonStatus_GoButtonStatus GoButtonStatus;
  static const GoButtonStatus GO_DISABLED_NULL =
    PublishGoButtonStatus_GoButtonStatus_GO_DISABLED_NULL;
  static const GoButtonStatus GO_DISABLED_AWAITING_VDS =
    PublishGoButtonStatus_GoButtonStatus_GO_DISABLED_AWAITING_VDS;
  static const GoButtonStatus GO_DISABLED_AWAITING_VDS_DOORS_OPEN =
    PublishGoButtonStatus_GoButtonStatus_GO_DISABLED_AWAITING_VDS_DOORS_OPEN;
  static const GoButtonStatus GO_DISABLED_DOORS_OPEN =
    PublishGoButtonStatus_GoButtonStatus_GO_DISABLED_DOORS_OPEN;
  static const GoButtonStatus GO_ENABLED =
    PublishGoButtonStatus_GoButtonStatus_GO_ENABLED;
  static inline bool GoButtonStatus_IsValid(int value) {
    return PublishGoButtonStatus_GoButtonStatus_IsValid(value);
  }
  static const GoButtonStatus GoButtonStatus_MIN =
    PublishGoButtonStatus_GoButtonStatus_GoButtonStatus_MIN;
  static const GoButtonStatus GoButtonStatus_MAX =
    PublishGoButtonStatus_GoButtonStatus_GoButtonStatus_MAX;
  static const int GoButtonStatus_ARRAYSIZE =
    PublishGoButtonStatus_GoButtonStatus_GoButtonStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  GoButtonStatus_descriptor() {
    return PublishGoButtonStatus_GoButtonStatus_descriptor();
  }
  static inline const ::std::string& GoButtonStatus_Name(GoButtonStatus value) {
    return PublishGoButtonStatus_GoButtonStatus_Name(value);
  }
  static inline bool GoButtonStatus_Parse(const ::std::string& name,
      GoButtonStatus* value) {
    return PublishGoButtonStatus_GoButtonStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ford.av.taas.__ApiVersion __api_version = 1;
  bool has___api_version() const;
  void clear___api_version();
  static const int kApiVersionFieldNumber = 1;
  const ::ford::av::taas::__ApiVersion& __api_version() const;
  ::ford::av::taas::__ApiVersion* release___api_version();
  ::ford::av::taas::__ApiVersion* mutable___api_version();
  void set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version);

  // .ford.av.taas.PublishGoButtonStatus.GoButtonStatus go_button_enable = 2;
  void clear_go_button_enable();
  static const int kGoButtonEnableFieldNumber = 2;
  ::ford::av::taas::PublishGoButtonStatus_GoButtonStatus go_button_enable() const;
  void set_go_button_enable(::ford::av::taas::PublishGoButtonStatus_GoButtonStatus value);

  // @@protoc_insertion_point(class_scope:ford.av.taas.PublishGoButtonStatus)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ford::av::taas::__ApiVersion* __api_version_;
  int go_button_enable_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishGoButtonStatusImpl();
};
// -------------------------------------------------------------------

class PublishOnboardingInfo_TripOnboardInfo_PickupLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation) */ {
 public:
  PublishOnboardingInfo_TripOnboardInfo_PickupLocation();
  virtual ~PublishOnboardingInfo_TripOnboardInfo_PickupLocation();

  PublishOnboardingInfo_TripOnboardInfo_PickupLocation(const PublishOnboardingInfo_TripOnboardInfo_PickupLocation& from);

  inline PublishOnboardingInfo_TripOnboardInfo_PickupLocation& operator=(const PublishOnboardingInfo_TripOnboardInfo_PickupLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishOnboardingInfo_TripOnboardInfo_PickupLocation(PublishOnboardingInfo_TripOnboardInfo_PickupLocation&& from) noexcept
    : PublishOnboardingInfo_TripOnboardInfo_PickupLocation() {
    *this = ::std::move(from);
  }

  inline PublishOnboardingInfo_TripOnboardInfo_PickupLocation& operator=(PublishOnboardingInfo_TripOnboardInfo_PickupLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishOnboardingInfo_TripOnboardInfo_PickupLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishOnboardingInfo_TripOnboardInfo_PickupLocation* internal_default_instance() {
    return reinterpret_cast<const PublishOnboardingInfo_TripOnboardInfo_PickupLocation*>(
               &_PublishOnboardingInfo_TripOnboardInfo_PickupLocation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(PublishOnboardingInfo_TripOnboardInfo_PickupLocation* other);
  friend void swap(PublishOnboardingInfo_TripOnboardInfo_PickupLocation& a, PublishOnboardingInfo_TripOnboardInfo_PickupLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishOnboardingInfo_TripOnboardInfo_PickupLocation* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishOnboardingInfo_TripOnboardInfo_PickupLocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishOnboardingInfo_TripOnboardInfo_PickupLocation& from);
  void MergeFrom(const PublishOnboardingInfo_TripOnboardInfo_PickupLocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishOnboardingInfo_TripOnboardInfo_PickupLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 pickup_latitude_degree = 1;
  void clear_pickup_latitude_degree();
  static const int kPickupLatitudeDegreeFieldNumber = 1;
  ::google::protobuf::uint32 pickup_latitude_degree() const;
  void set_pickup_latitude_degree(::google::protobuf::uint32 value);

  // uint32 pickup_latitude_minute = 2;
  void clear_pickup_latitude_minute();
  static const int kPickupLatitudeMinuteFieldNumber = 2;
  ::google::protobuf::uint32 pickup_latitude_minute() const;
  void set_pickup_latitude_minute(::google::protobuf::uint32 value);

  // uint32 pickup_latitude_mmin = 3;
  void clear_pickup_latitude_mmin();
  static const int kPickupLatitudeMminFieldNumber = 3;
  ::google::protobuf::uint32 pickup_latitude_mmin() const;
  void set_pickup_latitude_mmin(::google::protobuf::uint32 value);

  // uint32 pickup_longitude_degree = 5;
  void clear_pickup_longitude_degree();
  static const int kPickupLongitudeDegreeFieldNumber = 5;
  ::google::protobuf::uint32 pickup_longitude_degree() const;
  void set_pickup_longitude_degree(::google::protobuf::uint32 value);

  // uint32 pickup_longitude_minute = 6;
  void clear_pickup_longitude_minute();
  static const int kPickupLongitudeMinuteFieldNumber = 6;
  ::google::protobuf::uint32 pickup_longitude_minute() const;
  void set_pickup_longitude_minute(::google::protobuf::uint32 value);

  // bool pickup_latitiude_orientation = 4;
  void clear_pickup_latitiude_orientation();
  static const int kPickupLatitiudeOrientationFieldNumber = 4;
  bool pickup_latitiude_orientation() const;
  void set_pickup_latitiude_orientation(bool value);

  // bool pickup_longitude_orientation = 8;
  void clear_pickup_longitude_orientation();
  static const int kPickupLongitudeOrientationFieldNumber = 8;
  bool pickup_longitude_orientation() const;
  void set_pickup_longitude_orientation(bool value);

  // uint32 pickup_longitude_mmin = 7;
  void clear_pickup_longitude_mmin();
  static const int kPickupLongitudeMminFieldNumber = 7;
  ::google::protobuf::uint32 pickup_longitude_mmin() const;
  void set_pickup_longitude_mmin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 pickup_latitude_degree_;
  ::google::protobuf::uint32 pickup_latitude_minute_;
  ::google::protobuf::uint32 pickup_latitude_mmin_;
  ::google::protobuf::uint32 pickup_longitude_degree_;
  ::google::protobuf::uint32 pickup_longitude_minute_;
  bool pickup_latitiude_orientation_;
  bool pickup_longitude_orientation_;
  ::google::protobuf::uint32 pickup_longitude_mmin_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishOnboardingInfo_TripOnboardInfo_PickupLocationImpl();
};
// -------------------------------------------------------------------

class PublishOnboardingInfo_TripOnboardInfo_DropoffLocation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation) */ {
 public:
  PublishOnboardingInfo_TripOnboardInfo_DropoffLocation();
  virtual ~PublishOnboardingInfo_TripOnboardInfo_DropoffLocation();

  PublishOnboardingInfo_TripOnboardInfo_DropoffLocation(const PublishOnboardingInfo_TripOnboardInfo_DropoffLocation& from);

  inline PublishOnboardingInfo_TripOnboardInfo_DropoffLocation& operator=(const PublishOnboardingInfo_TripOnboardInfo_DropoffLocation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishOnboardingInfo_TripOnboardInfo_DropoffLocation(PublishOnboardingInfo_TripOnboardInfo_DropoffLocation&& from) noexcept
    : PublishOnboardingInfo_TripOnboardInfo_DropoffLocation() {
    *this = ::std::move(from);
  }

  inline PublishOnboardingInfo_TripOnboardInfo_DropoffLocation& operator=(PublishOnboardingInfo_TripOnboardInfo_DropoffLocation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishOnboardingInfo_TripOnboardInfo_DropoffLocation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishOnboardingInfo_TripOnboardInfo_DropoffLocation* internal_default_instance() {
    return reinterpret_cast<const PublishOnboardingInfo_TripOnboardInfo_DropoffLocation*>(
               &_PublishOnboardingInfo_TripOnboardInfo_DropoffLocation_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(PublishOnboardingInfo_TripOnboardInfo_DropoffLocation* other);
  friend void swap(PublishOnboardingInfo_TripOnboardInfo_DropoffLocation& a, PublishOnboardingInfo_TripOnboardInfo_DropoffLocation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishOnboardingInfo_TripOnboardInfo_DropoffLocation* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishOnboardingInfo_TripOnboardInfo_DropoffLocation* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishOnboardingInfo_TripOnboardInfo_DropoffLocation& from);
  void MergeFrom(const PublishOnboardingInfo_TripOnboardInfo_DropoffLocation& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishOnboardingInfo_TripOnboardInfo_DropoffLocation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 dropoff_latitude_degree = 1;
  void clear_dropoff_latitude_degree();
  static const int kDropoffLatitudeDegreeFieldNumber = 1;
  ::google::protobuf::uint32 dropoff_latitude_degree() const;
  void set_dropoff_latitude_degree(::google::protobuf::uint32 value);

  // uint32 dropoff_latitude_minute = 2;
  void clear_dropoff_latitude_minute();
  static const int kDropoffLatitudeMinuteFieldNumber = 2;
  ::google::protobuf::uint32 dropoff_latitude_minute() const;
  void set_dropoff_latitude_minute(::google::protobuf::uint32 value);

  // uint32 dropoff_latitude_mmin = 3;
  void clear_dropoff_latitude_mmin();
  static const int kDropoffLatitudeMminFieldNumber = 3;
  ::google::protobuf::uint32 dropoff_latitude_mmin() const;
  void set_dropoff_latitude_mmin(::google::protobuf::uint32 value);

  // uint32 dropoff_longitude_degree = 5;
  void clear_dropoff_longitude_degree();
  static const int kDropoffLongitudeDegreeFieldNumber = 5;
  ::google::protobuf::uint32 dropoff_longitude_degree() const;
  void set_dropoff_longitude_degree(::google::protobuf::uint32 value);

  // uint32 dropoff_longitude_minute = 6;
  void clear_dropoff_longitude_minute();
  static const int kDropoffLongitudeMinuteFieldNumber = 6;
  ::google::protobuf::uint32 dropoff_longitude_minute() const;
  void set_dropoff_longitude_minute(::google::protobuf::uint32 value);

  // bool dropoff_latitiude_orientation = 4;
  void clear_dropoff_latitiude_orientation();
  static const int kDropoffLatitiudeOrientationFieldNumber = 4;
  bool dropoff_latitiude_orientation() const;
  void set_dropoff_latitiude_orientation(bool value);

  // bool dropoff_longitude_orientation = 8;
  void clear_dropoff_longitude_orientation();
  static const int kDropoffLongitudeOrientationFieldNumber = 8;
  bool dropoff_longitude_orientation() const;
  void set_dropoff_longitude_orientation(bool value);

  // uint32 dropoff_longitude_mmin = 7;
  void clear_dropoff_longitude_mmin();
  static const int kDropoffLongitudeMminFieldNumber = 7;
  ::google::protobuf::uint32 dropoff_longitude_mmin() const;
  void set_dropoff_longitude_mmin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 dropoff_latitude_degree_;
  ::google::protobuf::uint32 dropoff_latitude_minute_;
  ::google::protobuf::uint32 dropoff_latitude_mmin_;
  ::google::protobuf::uint32 dropoff_longitude_degree_;
  ::google::protobuf::uint32 dropoff_longitude_minute_;
  bool dropoff_latitiude_orientation_;
  bool dropoff_longitude_orientation_;
  ::google::protobuf::uint32 dropoff_longitude_mmin_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishOnboardingInfo_TripOnboardInfo_DropoffLocationImpl();
};
// -------------------------------------------------------------------

class PublishOnboardingInfo_TripOnboardInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo) */ {
 public:
  PublishOnboardingInfo_TripOnboardInfo();
  virtual ~PublishOnboardingInfo_TripOnboardInfo();

  PublishOnboardingInfo_TripOnboardInfo(const PublishOnboardingInfo_TripOnboardInfo& from);

  inline PublishOnboardingInfo_TripOnboardInfo& operator=(const PublishOnboardingInfo_TripOnboardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishOnboardingInfo_TripOnboardInfo(PublishOnboardingInfo_TripOnboardInfo&& from) noexcept
    : PublishOnboardingInfo_TripOnboardInfo() {
    *this = ::std::move(from);
  }

  inline PublishOnboardingInfo_TripOnboardInfo& operator=(PublishOnboardingInfo_TripOnboardInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishOnboardingInfo_TripOnboardInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishOnboardingInfo_TripOnboardInfo* internal_default_instance() {
    return reinterpret_cast<const PublishOnboardingInfo_TripOnboardInfo*>(
               &_PublishOnboardingInfo_TripOnboardInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(PublishOnboardingInfo_TripOnboardInfo* other);
  friend void swap(PublishOnboardingInfo_TripOnboardInfo& a, PublishOnboardingInfo_TripOnboardInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishOnboardingInfo_TripOnboardInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishOnboardingInfo_TripOnboardInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishOnboardingInfo_TripOnboardInfo& from);
  void MergeFrom(const PublishOnboardingInfo_TripOnboardInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishOnboardingInfo_TripOnboardInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PublishOnboardingInfo_TripOnboardInfo_PickupLocation PickupLocation;
  typedef PublishOnboardingInfo_TripOnboardInfo_DropoffLocation DropoffLocation;

  // accessors -------------------------------------------------------

  // bytes TripID = 1;
  void clear_tripid();
  static const int kTripIDFieldNumber = 1;
  const ::std::string& tripid() const;
  void set_tripid(const ::std::string& value);
  #if LANG_CXX11
  void set_tripid(::std::string&& value);
  #endif
  void set_tripid(const char* value);
  void set_tripid(const void* value, size_t size);
  ::std::string* mutable_tripid();
  ::std::string* release_tripid();
  void set_allocated_tripid(::std::string* tripid);

  // string pickup_name = 5;
  void clear_pickup_name();
  static const int kPickupNameFieldNumber = 5;
  const ::std::string& pickup_name() const;
  void set_pickup_name(const ::std::string& value);
  #if LANG_CXX11
  void set_pickup_name(::std::string&& value);
  #endif
  void set_pickup_name(const char* value);
  void set_pickup_name(const char* value, size_t size);
  ::std::string* mutable_pickup_name();
  ::std::string* release_pickup_name();
  void set_allocated_pickup_name(::std::string* pickup_name);

  // string dropoff_name = 8;
  void clear_dropoff_name();
  static const int kDropoffNameFieldNumber = 8;
  const ::std::string& dropoff_name() const;
  void set_dropoff_name(const ::std::string& value);
  #if LANG_CXX11
  void set_dropoff_name(::std::string&& value);
  #endif
  void set_dropoff_name(const char* value);
  void set_dropoff_name(const char* value, size_t size);
  ::std::string* mutable_dropoff_name();
  ::std::string* release_dropoff_name();
  void set_allocated_dropoff_name(::std::string* dropoff_name);

  // .ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation pickup_location = 6;
  bool has_pickup_location() const;
  void clear_pickup_location();
  static const int kPickupLocationFieldNumber = 6;
  const ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation& pickup_location() const;
  ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation* release_pickup_location();
  ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation* mutable_pickup_location();
  void set_allocated_pickup_location(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation* pickup_location);

  // .ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation dropoff_location = 7;
  bool has_dropoff_location() const;
  void clear_dropoff_location();
  static const int kDropoffLocationFieldNumber = 7;
  const ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation& dropoff_location() const;
  ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation* release_dropoff_location();
  ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation* mutable_dropoff_location();
  void set_allocated_dropoff_location(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation* dropoff_location);

  // bool possibly_present = 2;
  void clear_possibly_present();
  static const int kPossiblyPresentFieldNumber = 2;
  bool possibly_present() const;
  void set_possibly_present(bool value);

  // bool can_update_passengers = 3;
  void clear_can_update_passengers();
  static const int kCanUpdatePassengersFieldNumber = 3;
  bool can_update_passengers() const;
  void set_can_update_passengers(bool value);

  // uint32 exp_num_pass = 4;
  void clear_exp_num_pass();
  static const int kExpNumPassFieldNumber = 4;
  ::google::protobuf::uint32 exp_num_pass() const;
  void set_exp_num_pass(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr tripid_;
  ::google::protobuf::internal::ArenaStringPtr pickup_name_;
  ::google::protobuf::internal::ArenaStringPtr dropoff_name_;
  ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation* pickup_location_;
  ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation* dropoff_location_;
  bool possibly_present_;
  bool can_update_passengers_;
  ::google::protobuf::uint32 exp_num_pass_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishOnboardingInfo_TripOnboardInfoImpl();
};
// -------------------------------------------------------------------

class PublishOnboardingInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.PublishOnboardingInfo) */ {
 public:
  PublishOnboardingInfo();
  virtual ~PublishOnboardingInfo();

  PublishOnboardingInfo(const PublishOnboardingInfo& from);

  inline PublishOnboardingInfo& operator=(const PublishOnboardingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishOnboardingInfo(PublishOnboardingInfo&& from) noexcept
    : PublishOnboardingInfo() {
    *this = ::std::move(from);
  }

  inline PublishOnboardingInfo& operator=(PublishOnboardingInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishOnboardingInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishOnboardingInfo* internal_default_instance() {
    return reinterpret_cast<const PublishOnboardingInfo*>(
               &_PublishOnboardingInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(PublishOnboardingInfo* other);
  friend void swap(PublishOnboardingInfo& a, PublishOnboardingInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishOnboardingInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishOnboardingInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishOnboardingInfo& from);
  void MergeFrom(const PublishOnboardingInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishOnboardingInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PublishOnboardingInfo_TripOnboardInfo TripOnboardInfo;

  // accessors -------------------------------------------------------

  // repeated .ford.av.taas.PublishOnboardingInfo.TripOnboardInfo Trip_Onboard_Info = 2;
  int trip_onboard_info_size() const;
  void clear_trip_onboard_info();
  static const int kTripOnboardInfoFieldNumber = 2;
  const ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo& trip_onboard_info(int index) const;
  ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo* mutable_trip_onboard_info(int index);
  ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo* add_trip_onboard_info();
  ::google::protobuf::RepeatedPtrField< ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo >*
      mutable_trip_onboard_info();
  const ::google::protobuf::RepeatedPtrField< ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo >&
      trip_onboard_info() const;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  bool has___api_version() const;
  void clear___api_version();
  static const int kApiVersionFieldNumber = 1;
  const ::ford::av::taas::__ApiVersion& __api_version() const;
  ::ford::av::taas::__ApiVersion* release___api_version();
  ::ford::av::taas::__ApiVersion* mutable___api_version();
  void set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version);

  // bool can_update_passengers = 3;
  void clear_can_update_passengers();
  static const int kCanUpdatePassengersFieldNumber = 3;
  bool can_update_passengers() const;
  void set_can_update_passengers(bool value);

  // @@protoc_insertion_point(class_scope:ford.av.taas.PublishOnboardingInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo > trip_onboard_info_;
  ::ford::av::taas::__ApiVersion* __api_version_;
  bool can_update_passengers_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishOnboardingInfoImpl();
};
// -------------------------------------------------------------------

class PublishMrc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.PublishMrc) */ {
 public:
  PublishMrc();
  virtual ~PublishMrc();

  PublishMrc(const PublishMrc& from);

  inline PublishMrc& operator=(const PublishMrc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishMrc(PublishMrc&& from) noexcept
    : PublishMrc() {
    *this = ::std::move(from);
  }

  inline PublishMrc& operator=(PublishMrc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishMrc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishMrc* internal_default_instance() {
    return reinterpret_cast<const PublishMrc*>(
               &_PublishMrc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(PublishMrc* other);
  friend void swap(PublishMrc& a, PublishMrc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishMrc* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishMrc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishMrc& from);
  void MergeFrom(const PublishMrc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishMrc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PublishMrc_MrcDescription MrcDescription;
  static const MrcDescription FAULT_DESCRIPTION_TBD_FMES =
    PublishMrc_MrcDescription_FAULT_DESCRIPTION_TBD_FMES;
  static inline bool MrcDescription_IsValid(int value) {
    return PublishMrc_MrcDescription_IsValid(value);
  }
  static const MrcDescription MrcDescription_MIN =
    PublishMrc_MrcDescription_MrcDescription_MIN;
  static const MrcDescription MrcDescription_MAX =
    PublishMrc_MrcDescription_MrcDescription_MAX;
  static const int MrcDescription_ARRAYSIZE =
    PublishMrc_MrcDescription_MrcDescription_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MrcDescription_descriptor() {
    return PublishMrc_MrcDescription_descriptor();
  }
  static inline const ::std::string& MrcDescription_Name(MrcDescription value) {
    return PublishMrc_MrcDescription_Name(value);
  }
  static inline bool MrcDescription_Parse(const ::std::string& name,
      MrcDescription* value) {
    return PublishMrc_MrcDescription_Parse(name, value);
  }

  typedef PublishMrc_Recoverable Recoverable;
  static const Recoverable RECOVERABLE_TBD_FMES =
    PublishMrc_Recoverable_RECOVERABLE_TBD_FMES;
  static inline bool Recoverable_IsValid(int value) {
    return PublishMrc_Recoverable_IsValid(value);
  }
  static const Recoverable Recoverable_MIN =
    PublishMrc_Recoverable_Recoverable_MIN;
  static const Recoverable Recoverable_MAX =
    PublishMrc_Recoverable_Recoverable_MAX;
  static const int Recoverable_ARRAYSIZE =
    PublishMrc_Recoverable_Recoverable_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Recoverable_descriptor() {
    return PublishMrc_Recoverable_descriptor();
  }
  static inline const ::std::string& Recoverable_Name(Recoverable value) {
    return PublishMrc_Recoverable_Name(value);
  }
  static inline bool Recoverable_Parse(const ::std::string& name,
      Recoverable* value) {
    return PublishMrc_Recoverable_Parse(name, value);
  }

  typedef PublishMrc_PesState PesState;
  static const PesState PES_STATE_TBD_FMES =
    PublishMrc_PesState_PES_STATE_TBD_FMES;
  static inline bool PesState_IsValid(int value) {
    return PublishMrc_PesState_IsValid(value);
  }
  static const PesState PesState_MIN =
    PublishMrc_PesState_PesState_MIN;
  static const PesState PesState_MAX =
    PublishMrc_PesState_PesState_MAX;
  static const int PesState_ARRAYSIZE =
    PublishMrc_PesState_PesState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  PesState_descriptor() {
    return PublishMrc_PesState_descriptor();
  }
  static inline const ::std::string& PesState_Name(PesState value) {
    return PublishMrc_PesState_Name(value);
  }
  static inline bool PesState_Parse(const ::std::string& name,
      PesState* value) {
    return PublishMrc_PesState_Parse(name, value);
  }

  typedef PublishMrc_ConveniencePullover ConveniencePullover;
  static const ConveniencePullover CONVENIENCE_PULLOVER_TBD_FMES =
    PublishMrc_ConveniencePullover_CONVENIENCE_PULLOVER_TBD_FMES;
  static inline bool ConveniencePullover_IsValid(int value) {
    return PublishMrc_ConveniencePullover_IsValid(value);
  }
  static const ConveniencePullover ConveniencePullover_MIN =
    PublishMrc_ConveniencePullover_ConveniencePullover_MIN;
  static const ConveniencePullover ConveniencePullover_MAX =
    PublishMrc_ConveniencePullover_ConveniencePullover_MAX;
  static const int ConveniencePullover_ARRAYSIZE =
    PublishMrc_ConveniencePullover_ConveniencePullover_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ConveniencePullover_descriptor() {
    return PublishMrc_ConveniencePullover_descriptor();
  }
  static inline const ::std::string& ConveniencePullover_Name(ConveniencePullover value) {
    return PublishMrc_ConveniencePullover_Name(value);
  }
  static inline bool ConveniencePullover_Parse(const ::std::string& name,
      ConveniencePullover* value) {
    return PublishMrc_ConveniencePullover_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .ford.av.taas.__ApiVersion __api_version = 1;
  bool has___api_version() const;
  void clear___api_version();
  static const int kApiVersionFieldNumber = 1;
  const ::ford::av::taas::__ApiVersion& __api_version() const;
  ::ford::av::taas::__ApiVersion* release___api_version();
  ::ford::av::taas::__ApiVersion* mutable___api_version();
  void set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version);

  // .ford.av.taas.PublishMrc.MrcDescription fault_description = 2;
  void clear_fault_description();
  static const int kFaultDescriptionFieldNumber = 2;
  ::ford::av::taas::PublishMrc_MrcDescription fault_description() const;
  void set_fault_description(::ford::av::taas::PublishMrc_MrcDescription value);

  // .ford.av.taas.PublishMrc.Recoverable recoverable = 4;
  void clear_recoverable();
  static const int kRecoverableFieldNumber = 4;
  ::ford::av::taas::PublishMrc_Recoverable recoverable() const;
  void set_recoverable(::ford::av::taas::PublishMrc_Recoverable value);

  // bool completed = 3;
  void clear_completed();
  static const int kCompletedFieldNumber = 3;
  bool completed() const;
  void set_completed(bool value);

  // bool doors_open = 5;
  void clear_doors_open();
  static const int kDoorsOpenFieldNumber = 5;
  bool doors_open() const;
  void set_doors_open(bool value);

  // bool leo_stop_active = 6;
  void clear_leo_stop_active();
  static const int kLeoStopActiveFieldNumber = 6;
  bool leo_stop_active() const;
  void set_leo_stop_active(bool value);

  // bool cloud_stop_active = 8;
  void clear_cloud_stop_active();
  static const int kCloudStopActiveFieldNumber = 8;
  bool cloud_stop_active() const;
  void set_cloud_stop_active(bool value);

  // .ford.av.taas.PublishMrc.PesState pes_state = 7;
  void clear_pes_state();
  static const int kPesStateFieldNumber = 7;
  ::ford::av::taas::PublishMrc_PesState pes_state() const;
  void set_pes_state(::ford::av::taas::PublishMrc_PesState value);

  // .ford.av.taas.PublishMrc.ConveniencePullover convenience_pullover = 9;
  void clear_convenience_pullover();
  static const int kConveniencePulloverFieldNumber = 9;
  ::ford::av::taas::PublishMrc_ConveniencePullover convenience_pullover() const;
  void set_convenience_pullover(::ford::av::taas::PublishMrc_ConveniencePullover value);

  // bool liftgate_open = 10;
  void clear_liftgate_open();
  static const int kLiftgateOpenFieldNumber = 10;
  bool liftgate_open() const;
  void set_liftgate_open(bool value);

  // @@protoc_insertion_point(class_scope:ford.av.taas.PublishMrc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ford::av::taas::__ApiVersion* __api_version_;
  int fault_description_;
  int recoverable_;
  bool completed_;
  bool doors_open_;
  bool leo_stop_active_;
  bool cloud_stop_active_;
  int pes_state_;
  int convenience_pullover_;
  bool liftgate_open_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishMrcImpl();
};
// -------------------------------------------------------------------

class PublishDriveUpdates : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.PublishDriveUpdates) */ {
 public:
  PublishDriveUpdates();
  virtual ~PublishDriveUpdates();

  PublishDriveUpdates(const PublishDriveUpdates& from);

  inline PublishDriveUpdates& operator=(const PublishDriveUpdates& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishDriveUpdates(PublishDriveUpdates&& from) noexcept
    : PublishDriveUpdates() {
    *this = ::std::move(from);
  }

  inline PublishDriveUpdates& operator=(PublishDriveUpdates&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishDriveUpdates& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishDriveUpdates* internal_default_instance() {
    return reinterpret_cast<const PublishDriveUpdates*>(
               &_PublishDriveUpdates_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(PublishDriveUpdates* other);
  friend void swap(PublishDriveUpdates& a, PublishDriveUpdates& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishDriveUpdates* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishDriveUpdates* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishDriveUpdates& from);
  void MergeFrom(const PublishDriveUpdates& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishDriveUpdates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ford.av.taas.__ApiVersion __api_version = 1;
  bool has___api_version() const;
  void clear___api_version();
  static const int kApiVersionFieldNumber = 1;
  const ::ford::av::taas::__ApiVersion& __api_version() const;
  ::ford::av::taas::__ApiVersion* release___api_version();
  ::ford::av::taas::__ApiVersion* mutable___api_version();
  void set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version);

  // uint32 eta = 3;
  void clear_eta();
  static const int kEtaFieldNumber = 3;
  ::google::protobuf::uint32 eta() const;
  void set_eta(::google::protobuf::uint32 value);

  // bool arrival_imminent = 2;
  void clear_arrival_imminent();
  static const int kArrivalImminentFieldNumber = 2;
  bool arrival_imminent() const;
  void set_arrival_imminent(bool value);

  // bool stop_location_updated = 4;
  void clear_stop_location_updated();
  static const int kStopLocationUpdatedFieldNumber = 4;
  bool stop_location_updated() const;
  void set_stop_location_updated(bool value);

  // @@protoc_insertion_point(class_scope:ford.av.taas.PublishDriveUpdates)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ford::av::taas::__ApiVersion* __api_version_;
  ::google::protobuf::uint32 eta_;
  bool arrival_imminent_;
  bool stop_location_updated_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishDriveUpdatesImpl();
};
// -------------------------------------------------------------------

class PublishOffboardingTrips : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.PublishOffboardingTrips) */ {
 public:
  PublishOffboardingTrips();
  virtual ~PublishOffboardingTrips();

  PublishOffboardingTrips(const PublishOffboardingTrips& from);

  inline PublishOffboardingTrips& operator=(const PublishOffboardingTrips& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishOffboardingTrips(PublishOffboardingTrips&& from) noexcept
    : PublishOffboardingTrips() {
    *this = ::std::move(from);
  }

  inline PublishOffboardingTrips& operator=(PublishOffboardingTrips&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishOffboardingTrips& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishOffboardingTrips* internal_default_instance() {
    return reinterpret_cast<const PublishOffboardingTrips*>(
               &_PublishOffboardingTrips_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(PublishOffboardingTrips* other);
  friend void swap(PublishOffboardingTrips& a, PublishOffboardingTrips& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishOffboardingTrips* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishOffboardingTrips* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishOffboardingTrips& from);
  void MergeFrom(const PublishOffboardingTrips& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishOffboardingTrips* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated bytes trip_ids_offboarding = 2;
  int trip_ids_offboarding_size() const;
  void clear_trip_ids_offboarding();
  static const int kTripIdsOffboardingFieldNumber = 2;
  const ::std::string& trip_ids_offboarding(int index) const;
  ::std::string* mutable_trip_ids_offboarding(int index);
  void set_trip_ids_offboarding(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_trip_ids_offboarding(int index, ::std::string&& value);
  #endif
  void set_trip_ids_offboarding(int index, const char* value);
  void set_trip_ids_offboarding(int index, const void* value, size_t size);
  ::std::string* add_trip_ids_offboarding();
  void add_trip_ids_offboarding(const ::std::string& value);
  #if LANG_CXX11
  void add_trip_ids_offboarding(::std::string&& value);
  #endif
  void add_trip_ids_offboarding(const char* value);
  void add_trip_ids_offboarding(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& trip_ids_offboarding() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_trip_ids_offboarding();

  // .ford.av.taas.__ApiVersion __api_version = 1;
  bool has___api_version() const;
  void clear___api_version();
  static const int kApiVersionFieldNumber = 1;
  const ::ford::av::taas::__ApiVersion& __api_version() const;
  ::ford::av::taas::__ApiVersion* release___api_version();
  ::ford::av::taas::__ApiVersion* mutable___api_version();
  void set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version);

  // @@protoc_insertion_point(class_scope:ford.av.taas.PublishOffboardingTrips)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> trip_ids_offboarding_;
  ::ford::av::taas::__ApiVersion* __api_version_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishOffboardingTripsImpl();
};
// -------------------------------------------------------------------

class PublishActiveTripInfo_TripActiveInfo_DropOffGPS : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS) */ {
 public:
  PublishActiveTripInfo_TripActiveInfo_DropOffGPS();
  virtual ~PublishActiveTripInfo_TripActiveInfo_DropOffGPS();

  PublishActiveTripInfo_TripActiveInfo_DropOffGPS(const PublishActiveTripInfo_TripActiveInfo_DropOffGPS& from);

  inline PublishActiveTripInfo_TripActiveInfo_DropOffGPS& operator=(const PublishActiveTripInfo_TripActiveInfo_DropOffGPS& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishActiveTripInfo_TripActiveInfo_DropOffGPS(PublishActiveTripInfo_TripActiveInfo_DropOffGPS&& from) noexcept
    : PublishActiveTripInfo_TripActiveInfo_DropOffGPS() {
    *this = ::std::move(from);
  }

  inline PublishActiveTripInfo_TripActiveInfo_DropOffGPS& operator=(PublishActiveTripInfo_TripActiveInfo_DropOffGPS&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishActiveTripInfo_TripActiveInfo_DropOffGPS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishActiveTripInfo_TripActiveInfo_DropOffGPS* internal_default_instance() {
    return reinterpret_cast<const PublishActiveTripInfo_TripActiveInfo_DropOffGPS*>(
               &_PublishActiveTripInfo_TripActiveInfo_DropOffGPS_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(PublishActiveTripInfo_TripActiveInfo_DropOffGPS* other);
  friend void swap(PublishActiveTripInfo_TripActiveInfo_DropOffGPS& a, PublishActiveTripInfo_TripActiveInfo_DropOffGPS& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishActiveTripInfo_TripActiveInfo_DropOffGPS* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishActiveTripInfo_TripActiveInfo_DropOffGPS* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishActiveTripInfo_TripActiveInfo_DropOffGPS& from);
  void MergeFrom(const PublishActiveTripInfo_TripActiveInfo_DropOffGPS& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishActiveTripInfo_TripActiveInfo_DropOffGPS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 drop_off_latitude_degree = 1;
  void clear_drop_off_latitude_degree();
  static const int kDropOffLatitudeDegreeFieldNumber = 1;
  ::google::protobuf::uint32 drop_off_latitude_degree() const;
  void set_drop_off_latitude_degree(::google::protobuf::uint32 value);

  // uint32 drop_off_latitude_minute = 2;
  void clear_drop_off_latitude_minute();
  static const int kDropOffLatitudeMinuteFieldNumber = 2;
  ::google::protobuf::uint32 drop_off_latitude_minute() const;
  void set_drop_off_latitude_minute(::google::protobuf::uint32 value);

  // uint32 drop_off_latitude_mmin = 3;
  void clear_drop_off_latitude_mmin();
  static const int kDropOffLatitudeMminFieldNumber = 3;
  ::google::protobuf::uint32 drop_off_latitude_mmin() const;
  void set_drop_off_latitude_mmin(::google::protobuf::uint32 value);

  // uint32 drop_off_longitude_degree = 5;
  void clear_drop_off_longitude_degree();
  static const int kDropOffLongitudeDegreeFieldNumber = 5;
  ::google::protobuf::uint32 drop_off_longitude_degree() const;
  void set_drop_off_longitude_degree(::google::protobuf::uint32 value);

  // uint32 drop_off_longitude_minute = 6;
  void clear_drop_off_longitude_minute();
  static const int kDropOffLongitudeMinuteFieldNumber = 6;
  ::google::protobuf::uint32 drop_off_longitude_minute() const;
  void set_drop_off_longitude_minute(::google::protobuf::uint32 value);

  // bool drop_off_latitiude_orientation = 4;
  void clear_drop_off_latitiude_orientation();
  static const int kDropOffLatitiudeOrientationFieldNumber = 4;
  bool drop_off_latitiude_orientation() const;
  void set_drop_off_latitiude_orientation(bool value);

  // bool drop_off_longitude_orientation = 8;
  void clear_drop_off_longitude_orientation();
  static const int kDropOffLongitudeOrientationFieldNumber = 8;
  bool drop_off_longitude_orientation() const;
  void set_drop_off_longitude_orientation(bool value);

  // uint32 drop_off_longitude_mmin = 7;
  void clear_drop_off_longitude_mmin();
  static const int kDropOffLongitudeMminFieldNumber = 7;
  ::google::protobuf::uint32 drop_off_longitude_mmin() const;
  void set_drop_off_longitude_mmin(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 drop_off_latitude_degree_;
  ::google::protobuf::uint32 drop_off_latitude_minute_;
  ::google::protobuf::uint32 drop_off_latitude_mmin_;
  ::google::protobuf::uint32 drop_off_longitude_degree_;
  ::google::protobuf::uint32 drop_off_longitude_minute_;
  bool drop_off_latitiude_orientation_;
  bool drop_off_longitude_orientation_;
  ::google::protobuf::uint32 drop_off_longitude_mmin_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishActiveTripInfo_TripActiveInfo_DropOffGPSImpl();
};
// -------------------------------------------------------------------

class PublishActiveTripInfo_TripActiveInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.PublishActiveTripInfo.TripActiveInfo) */ {
 public:
  PublishActiveTripInfo_TripActiveInfo();
  virtual ~PublishActiveTripInfo_TripActiveInfo();

  PublishActiveTripInfo_TripActiveInfo(const PublishActiveTripInfo_TripActiveInfo& from);

  inline PublishActiveTripInfo_TripActiveInfo& operator=(const PublishActiveTripInfo_TripActiveInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishActiveTripInfo_TripActiveInfo(PublishActiveTripInfo_TripActiveInfo&& from) noexcept
    : PublishActiveTripInfo_TripActiveInfo() {
    *this = ::std::move(from);
  }

  inline PublishActiveTripInfo_TripActiveInfo& operator=(PublishActiveTripInfo_TripActiveInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishActiveTripInfo_TripActiveInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishActiveTripInfo_TripActiveInfo* internal_default_instance() {
    return reinterpret_cast<const PublishActiveTripInfo_TripActiveInfo*>(
               &_PublishActiveTripInfo_TripActiveInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(PublishActiveTripInfo_TripActiveInfo* other);
  friend void swap(PublishActiveTripInfo_TripActiveInfo& a, PublishActiveTripInfo_TripActiveInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishActiveTripInfo_TripActiveInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishActiveTripInfo_TripActiveInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishActiveTripInfo_TripActiveInfo& from);
  void MergeFrom(const PublishActiveTripInfo_TripActiveInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishActiveTripInfo_TripActiveInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PublishActiveTripInfo_TripActiveInfo_DropOffGPS DropOffGPS;

  // accessors -------------------------------------------------------

  // bytes trip_id = 1;
  void clear_trip_id();
  static const int kTripIdFieldNumber = 1;
  const ::std::string& trip_id() const;
  void set_trip_id(const ::std::string& value);
  #if LANG_CXX11
  void set_trip_id(::std::string&& value);
  #endif
  void set_trip_id(const char* value);
  void set_trip_id(const void* value, size_t size);
  ::std::string* mutable_trip_id();
  ::std::string* release_trip_id();
  void set_allocated_trip_id(::std::string* trip_id);

  // string drop_off_name = 2;
  void clear_drop_off_name();
  static const int kDropOffNameFieldNumber = 2;
  const ::std::string& drop_off_name() const;
  void set_drop_off_name(const ::std::string& value);
  #if LANG_CXX11
  void set_drop_off_name(::std::string&& value);
  #endif
  void set_drop_off_name(const char* value);
  void set_drop_off_name(const char* value, size_t size);
  ::std::string* mutable_drop_off_name();
  ::std::string* release_drop_off_name();
  void set_allocated_drop_off_name(::std::string* drop_off_name);

  // .ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS drop_off_GPS = 3;
  bool has_drop_off_gps() const;
  void clear_drop_off_gps();
  static const int kDropOffGPSFieldNumber = 3;
  const ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS& drop_off_gps() const;
  ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS* release_drop_off_gps();
  ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS* mutable_drop_off_gps();
  void set_allocated_drop_off_gps(::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS* drop_off_gps);

  // uint32 eta = 4;
  void clear_eta();
  static const int kEtaFieldNumber = 4;
  ::google::protobuf::uint32 eta() const;
  void set_eta(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ford.av.taas.PublishActiveTripInfo.TripActiveInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr trip_id_;
  ::google::protobuf::internal::ArenaStringPtr drop_off_name_;
  ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS* drop_off_gps_;
  ::google::protobuf::uint32 eta_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishActiveTripInfo_TripActiveInfoImpl();
};
// -------------------------------------------------------------------

class PublishActiveTripInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ford.av.taas.PublishActiveTripInfo) */ {
 public:
  PublishActiveTripInfo();
  virtual ~PublishActiveTripInfo();

  PublishActiveTripInfo(const PublishActiveTripInfo& from);

  inline PublishActiveTripInfo& operator=(const PublishActiveTripInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PublishActiveTripInfo(PublishActiveTripInfo&& from) noexcept
    : PublishActiveTripInfo() {
    *this = ::std::move(from);
  }

  inline PublishActiveTripInfo& operator=(PublishActiveTripInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PublishActiveTripInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PublishActiveTripInfo* internal_default_instance() {
    return reinterpret_cast<const PublishActiveTripInfo*>(
               &_PublishActiveTripInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(PublishActiveTripInfo* other);
  friend void swap(PublishActiveTripInfo& a, PublishActiveTripInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PublishActiveTripInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PublishActiveTripInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PublishActiveTripInfo& from);
  void MergeFrom(const PublishActiveTripInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PublishActiveTripInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef PublishActiveTripInfo_TripActiveInfo TripActiveInfo;

  // accessors -------------------------------------------------------

  // repeated .ford.av.taas.PublishActiveTripInfo.TripActiveInfo trip_active_info = 2;
  int trip_active_info_size() const;
  void clear_trip_active_info();
  static const int kTripActiveInfoFieldNumber = 2;
  const ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo& trip_active_info(int index) const;
  ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo* mutable_trip_active_info(int index);
  ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo* add_trip_active_info();
  ::google::protobuf::RepeatedPtrField< ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo >*
      mutable_trip_active_info();
  const ::google::protobuf::RepeatedPtrField< ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo >&
      trip_active_info() const;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  bool has___api_version() const;
  void clear___api_version();
  static const int kApiVersionFieldNumber = 1;
  const ::ford::av::taas::__ApiVersion& __api_version() const;
  ::ford::av::taas::__ApiVersion* release___api_version();
  ::ford::av::taas::__ApiVersion* mutable___api_version();
  void set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version);

  // @@protoc_insertion_point(class_scope:ford.av.taas.PublishActiveTripInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo > trip_active_info_;
  ::ford::av::taas::__ApiVersion* __api_version_;
  mutable int _cached_size_;
  friend struct ::protobuf_TVF_5fTo_5fDXP_2eproto::TableStruct;
  friend void ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishActiveTripInfoImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CancelPullover

// .ford.av.taas.__ApiVersion __api_version = 1;
inline bool CancelPullover::has___api_version() const {
  return this != internal_default_instance() && __api_version_ != NULL;
}
inline const ::ford::av::taas::__ApiVersion& CancelPullover::__api_version() const {
  const ::ford::av::taas::__ApiVersion* p = __api_version_;
  // @@protoc_insertion_point(field_get:ford.av.taas.CancelPullover.__api_version)
  return p != NULL ? *p : *reinterpret_cast<const ::ford::av::taas::__ApiVersion*>(
      &::ford::av::taas::___ApiVersion_default_instance_);
}
inline ::ford::av::taas::__ApiVersion* CancelPullover::release___api_version() {
  // @@protoc_insertion_point(field_release:ford.av.taas.CancelPullover.__api_version)
  
  ::ford::av::taas::__ApiVersion* temp = __api_version_;
  __api_version_ = NULL;
  return temp;
}
inline ::ford::av::taas::__ApiVersion* CancelPullover::mutable___api_version() {
  
  if (__api_version_ == NULL) {
    __api_version_ = new ::ford::av::taas::__ApiVersion;
  }
  // @@protoc_insertion_point(field_mutable:ford.av.taas.CancelPullover.__api_version)
  return __api_version_;
}
inline void CancelPullover::set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(__api_version_);
  }
  if (__api_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      __api_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, __api_version, submessage_arena);
    }
    
  } else {
    
  }
  __api_version_ = __api_version;
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.CancelPullover.__api_version)
}

// bool cancel_pullover = 2;
inline void CancelPullover::clear_cancel_pullover() {
  cancel_pullover_ = false;
}
inline bool CancelPullover::cancel_pullover() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.CancelPullover.cancel_pullover)
  return cancel_pullover_;
}
inline void CancelPullover::set_cancel_pullover(bool value) {
  
  cancel_pullover_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.CancelPullover.cancel_pullover)
}

// -------------------------------------------------------------------

// CancelPulloverResp

// .ford.av.taas.__ApiVersion __api_version = 1;
inline bool CancelPulloverResp::has___api_version() const {
  return this != internal_default_instance() && __api_version_ != NULL;
}
inline const ::ford::av::taas::__ApiVersion& CancelPulloverResp::__api_version() const {
  const ::ford::av::taas::__ApiVersion* p = __api_version_;
  // @@protoc_insertion_point(field_get:ford.av.taas.CancelPulloverResp.__api_version)
  return p != NULL ? *p : *reinterpret_cast<const ::ford::av::taas::__ApiVersion*>(
      &::ford::av::taas::___ApiVersion_default_instance_);
}
inline ::ford::av::taas::__ApiVersion* CancelPulloverResp::release___api_version() {
  // @@protoc_insertion_point(field_release:ford.av.taas.CancelPulloverResp.__api_version)
  
  ::ford::av::taas::__ApiVersion* temp = __api_version_;
  __api_version_ = NULL;
  return temp;
}
inline ::ford::av::taas::__ApiVersion* CancelPulloverResp::mutable___api_version() {
  
  if (__api_version_ == NULL) {
    __api_version_ = new ::ford::av::taas::__ApiVersion;
  }
  // @@protoc_insertion_point(field_mutable:ford.av.taas.CancelPulloverResp.__api_version)
  return __api_version_;
}
inline void CancelPulloverResp::set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(__api_version_);
  }
  if (__api_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      __api_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, __api_version, submessage_arena);
    }
    
  } else {
    
  }
  __api_version_ = __api_version;
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.CancelPulloverResp.__api_version)
}

// .ford.av.taas.CancelPulloverResp.PulloverCancelStatus cancel_pullover_status = 2;
inline void CancelPulloverResp::clear_cancel_pullover_status() {
  cancel_pullover_status_ = 0;
}
inline ::ford::av::taas::CancelPulloverResp_PulloverCancelStatus CancelPulloverResp::cancel_pullover_status() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.CancelPulloverResp.cancel_pullover_status)
  return static_cast< ::ford::av::taas::CancelPulloverResp_PulloverCancelStatus >(cancel_pullover_status_);
}
inline void CancelPulloverResp::set_cancel_pullover_status(::ford::av::taas::CancelPulloverResp_PulloverCancelStatus value) {
  
  cancel_pullover_status_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.CancelPulloverResp.cancel_pullover_status)
}

// -------------------------------------------------------------------

// GoAck

// .ford.av.taas.__ApiVersion __api_version = 1;
inline bool GoAck::has___api_version() const {
  return this != internal_default_instance() && __api_version_ != NULL;
}
inline const ::ford::av::taas::__ApiVersion& GoAck::__api_version() const {
  const ::ford::av::taas::__ApiVersion* p = __api_version_;
  // @@protoc_insertion_point(field_get:ford.av.taas.GoAck.__api_version)
  return p != NULL ? *p : *reinterpret_cast<const ::ford::av::taas::__ApiVersion*>(
      &::ford::av::taas::___ApiVersion_default_instance_);
}
inline ::ford::av::taas::__ApiVersion* GoAck::release___api_version() {
  // @@protoc_insertion_point(field_release:ford.av.taas.GoAck.__api_version)
  
  ::ford::av::taas::__ApiVersion* temp = __api_version_;
  __api_version_ = NULL;
  return temp;
}
inline ::ford::av::taas::__ApiVersion* GoAck::mutable___api_version() {
  
  if (__api_version_ == NULL) {
    __api_version_ = new ::ford::av::taas::__ApiVersion;
  }
  // @@protoc_insertion_point(field_mutable:ford.av.taas.GoAck.__api_version)
  return __api_version_;
}
inline void GoAck::set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(__api_version_);
  }
  if (__api_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      __api_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, __api_version, submessage_arena);
    }
    
  } else {
    
  }
  __api_version_ = __api_version;
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.GoAck.__api_version)
}

// bytes trip_id = 2;
inline void GoAck::clear_trip_id() {
  trip_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GoAck::trip_id() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.GoAck.trip_id)
  return trip_id_.GetNoArena();
}
inline void GoAck::set_trip_id(const ::std::string& value) {
  
  trip_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ford.av.taas.GoAck.trip_id)
}
#if LANG_CXX11
inline void GoAck::set_trip_id(::std::string&& value) {
  
  trip_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ford.av.taas.GoAck.trip_id)
}
#endif
inline void GoAck::set_trip_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trip_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ford.av.taas.GoAck.trip_id)
}
inline void GoAck::set_trip_id(const void* value, size_t size) {
  
  trip_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ford.av.taas.GoAck.trip_id)
}
inline ::std::string* GoAck::mutable_trip_id() {
  
  // @@protoc_insertion_point(field_mutable:ford.av.taas.GoAck.trip_id)
  return trip_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GoAck::release_trip_id() {
  // @@protoc_insertion_point(field_release:ford.av.taas.GoAck.trip_id)
  
  return trip_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GoAck::set_allocated_trip_id(::std::string* trip_id) {
  if (trip_id != NULL) {
    
  } else {
    
  }
  trip_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trip_id);
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.GoAck.trip_id)
}

// -------------------------------------------------------------------

// GoAckResp

// .ford.av.taas.__ApiVersion __api_version = 1;
inline bool GoAckResp::has___api_version() const {
  return this != internal_default_instance() && __api_version_ != NULL;
}
inline const ::ford::av::taas::__ApiVersion& GoAckResp::__api_version() const {
  const ::ford::av::taas::__ApiVersion* p = __api_version_;
  // @@protoc_insertion_point(field_get:ford.av.taas.GoAckResp.__api_version)
  return p != NULL ? *p : *reinterpret_cast<const ::ford::av::taas::__ApiVersion*>(
      &::ford::av::taas::___ApiVersion_default_instance_);
}
inline ::ford::av::taas::__ApiVersion* GoAckResp::release___api_version() {
  // @@protoc_insertion_point(field_release:ford.av.taas.GoAckResp.__api_version)
  
  ::ford::av::taas::__ApiVersion* temp = __api_version_;
  __api_version_ = NULL;
  return temp;
}
inline ::ford::av::taas::__ApiVersion* GoAckResp::mutable___api_version() {
  
  if (__api_version_ == NULL) {
    __api_version_ = new ::ford::av::taas::__ApiVersion;
  }
  // @@protoc_insertion_point(field_mutable:ford.av.taas.GoAckResp.__api_version)
  return __api_version_;
}
inline void GoAckResp::set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(__api_version_);
  }
  if (__api_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      __api_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, __api_version, submessage_arena);
    }
    
  } else {
    
  }
  __api_version_ = __api_version;
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.GoAckResp.__api_version)
}

// .ford.av.taas.GoAckResp.GoACKRespStatus go_ack_status = 2;
inline void GoAckResp::clear_go_ack_status() {
  go_ack_status_ = 0;
}
inline ::ford::av::taas::GoAckResp_GoACKRespStatus GoAckResp::go_ack_status() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.GoAckResp.go_ack_status)
  return static_cast< ::ford::av::taas::GoAckResp_GoACKRespStatus >(go_ack_status_);
}
inline void GoAckResp::set_go_ack_status(::ford::av::taas::GoAckResp_GoACKRespStatus value) {
  
  go_ack_status_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.GoAckResp.go_ack_status)
}

// -------------------------------------------------------------------

// PassengerPullover

// .ford.av.taas.__ApiVersion __api_version = 1;
inline bool PassengerPullover::has___api_version() const {
  return this != internal_default_instance() && __api_version_ != NULL;
}
inline const ::ford::av::taas::__ApiVersion& PassengerPullover::__api_version() const {
  const ::ford::av::taas::__ApiVersion* p = __api_version_;
  // @@protoc_insertion_point(field_get:ford.av.taas.PassengerPullover.__api_version)
  return p != NULL ? *p : *reinterpret_cast<const ::ford::av::taas::__ApiVersion*>(
      &::ford::av::taas::___ApiVersion_default_instance_);
}
inline ::ford::av::taas::__ApiVersion* PassengerPullover::release___api_version() {
  // @@protoc_insertion_point(field_release:ford.av.taas.PassengerPullover.__api_version)
  
  ::ford::av::taas::__ApiVersion* temp = __api_version_;
  __api_version_ = NULL;
  return temp;
}
inline ::ford::av::taas::__ApiVersion* PassengerPullover::mutable___api_version() {
  
  if (__api_version_ == NULL) {
    __api_version_ = new ::ford::av::taas::__ApiVersion;
  }
  // @@protoc_insertion_point(field_mutable:ford.av.taas.PassengerPullover.__api_version)
  return __api_version_;
}
inline void PassengerPullover::set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(__api_version_);
  }
  if (__api_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      __api_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, __api_version, submessage_arena);
    }
    
  } else {
    
  }
  __api_version_ = __api_version;
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.PassengerPullover.__api_version)
}

// bool passenger_pullover = 2;
inline void PassengerPullover::clear_passenger_pullover() {
  passenger_pullover_ = false;
}
inline bool PassengerPullover::passenger_pullover() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PassengerPullover.passenger_pullover)
  return passenger_pullover_;
}
inline void PassengerPullover::set_passenger_pullover(bool value) {
  
  passenger_pullover_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PassengerPullover.passenger_pullover)
}

// -------------------------------------------------------------------

// PassengerPulloverResp

// .ford.av.taas.__ApiVersion __api_version = 1;
inline bool PassengerPulloverResp::has___api_version() const {
  return this != internal_default_instance() && __api_version_ != NULL;
}
inline const ::ford::av::taas::__ApiVersion& PassengerPulloverResp::__api_version() const {
  const ::ford::av::taas::__ApiVersion* p = __api_version_;
  // @@protoc_insertion_point(field_get:ford.av.taas.PassengerPulloverResp.__api_version)
  return p != NULL ? *p : *reinterpret_cast<const ::ford::av::taas::__ApiVersion*>(
      &::ford::av::taas::___ApiVersion_default_instance_);
}
inline ::ford::av::taas::__ApiVersion* PassengerPulloverResp::release___api_version() {
  // @@protoc_insertion_point(field_release:ford.av.taas.PassengerPulloverResp.__api_version)
  
  ::ford::av::taas::__ApiVersion* temp = __api_version_;
  __api_version_ = NULL;
  return temp;
}
inline ::ford::av::taas::__ApiVersion* PassengerPulloverResp::mutable___api_version() {
  
  if (__api_version_ == NULL) {
    __api_version_ = new ::ford::av::taas::__ApiVersion;
  }
  // @@protoc_insertion_point(field_mutable:ford.av.taas.PassengerPulloverResp.__api_version)
  return __api_version_;
}
inline void PassengerPulloverResp::set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(__api_version_);
  }
  if (__api_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      __api_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, __api_version, submessage_arena);
    }
    
  } else {
    
  }
  __api_version_ = __api_version;
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.PassengerPulloverResp.__api_version)
}

// .ford.av.taas.PassengerPulloverResp.PulloverStatus passenger_pullover_status = 2;
inline void PassengerPulloverResp::clear_passenger_pullover_status() {
  passenger_pullover_status_ = 0;
}
inline ::ford::av::taas::PassengerPulloverResp_PulloverStatus PassengerPulloverResp::passenger_pullover_status() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PassengerPulloverResp.passenger_pullover_status)
  return static_cast< ::ford::av::taas::PassengerPulloverResp_PulloverStatus >(passenger_pullover_status_);
}
inline void PassengerPulloverResp::set_passenger_pullover_status(::ford::av::taas::PassengerPulloverResp_PulloverStatus value) {
  
  passenger_pullover_status_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PassengerPulloverResp.passenger_pullover_status)
}

// -------------------------------------------------------------------

// NewPassengerCount

// .ford.av.taas.__ApiVersion __api_version = 1;
inline bool NewPassengerCount::has___api_version() const {
  return this != internal_default_instance() && __api_version_ != NULL;
}
inline const ::ford::av::taas::__ApiVersion& NewPassengerCount::__api_version() const {
  const ::ford::av::taas::__ApiVersion* p = __api_version_;
  // @@protoc_insertion_point(field_get:ford.av.taas.NewPassengerCount.__api_version)
  return p != NULL ? *p : *reinterpret_cast<const ::ford::av::taas::__ApiVersion*>(
      &::ford::av::taas::___ApiVersion_default_instance_);
}
inline ::ford::av::taas::__ApiVersion* NewPassengerCount::release___api_version() {
  // @@protoc_insertion_point(field_release:ford.av.taas.NewPassengerCount.__api_version)
  
  ::ford::av::taas::__ApiVersion* temp = __api_version_;
  __api_version_ = NULL;
  return temp;
}
inline ::ford::av::taas::__ApiVersion* NewPassengerCount::mutable___api_version() {
  
  if (__api_version_ == NULL) {
    __api_version_ = new ::ford::av::taas::__ApiVersion;
  }
  // @@protoc_insertion_point(field_mutable:ford.av.taas.NewPassengerCount.__api_version)
  return __api_version_;
}
inline void NewPassengerCount::set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(__api_version_);
  }
  if (__api_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      __api_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, __api_version, submessage_arena);
    }
    
  } else {
    
  }
  __api_version_ = __api_version;
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.NewPassengerCount.__api_version)
}

// bytes trip_id = 2;
inline void NewPassengerCount::clear_trip_id() {
  trip_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NewPassengerCount::trip_id() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.NewPassengerCount.trip_id)
  return trip_id_.GetNoArena();
}
inline void NewPassengerCount::set_trip_id(const ::std::string& value) {
  
  trip_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ford.av.taas.NewPassengerCount.trip_id)
}
#if LANG_CXX11
inline void NewPassengerCount::set_trip_id(::std::string&& value) {
  
  trip_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ford.av.taas.NewPassengerCount.trip_id)
}
#endif
inline void NewPassengerCount::set_trip_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trip_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ford.av.taas.NewPassengerCount.trip_id)
}
inline void NewPassengerCount::set_trip_id(const void* value, size_t size) {
  
  trip_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ford.av.taas.NewPassengerCount.trip_id)
}
inline ::std::string* NewPassengerCount::mutable_trip_id() {
  
  // @@protoc_insertion_point(field_mutable:ford.av.taas.NewPassengerCount.trip_id)
  return trip_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NewPassengerCount::release_trip_id() {
  // @@protoc_insertion_point(field_release:ford.av.taas.NewPassengerCount.trip_id)
  
  return trip_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NewPassengerCount::set_allocated_trip_id(::std::string* trip_id) {
  if (trip_id != NULL) {
    
  } else {
    
  }
  trip_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trip_id);
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.NewPassengerCount.trip_id)
}

// uint32 pass_count = 3;
inline void NewPassengerCount::clear_pass_count() {
  pass_count_ = 0u;
}
inline ::google::protobuf::uint32 NewPassengerCount::pass_count() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.NewPassengerCount.pass_count)
  return pass_count_;
}
inline void NewPassengerCount::set_pass_count(::google::protobuf::uint32 value) {
  
  pass_count_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.NewPassengerCount.pass_count)
}

// -------------------------------------------------------------------

// NewPassengerCountResp

// .ford.av.taas.__ApiVersion __api_version = 1;
inline bool NewPassengerCountResp::has___api_version() const {
  return this != internal_default_instance() && __api_version_ != NULL;
}
inline const ::ford::av::taas::__ApiVersion& NewPassengerCountResp::__api_version() const {
  const ::ford::av::taas::__ApiVersion* p = __api_version_;
  // @@protoc_insertion_point(field_get:ford.av.taas.NewPassengerCountResp.__api_version)
  return p != NULL ? *p : *reinterpret_cast<const ::ford::av::taas::__ApiVersion*>(
      &::ford::av::taas::___ApiVersion_default_instance_);
}
inline ::ford::av::taas::__ApiVersion* NewPassengerCountResp::release___api_version() {
  // @@protoc_insertion_point(field_release:ford.av.taas.NewPassengerCountResp.__api_version)
  
  ::ford::av::taas::__ApiVersion* temp = __api_version_;
  __api_version_ = NULL;
  return temp;
}
inline ::ford::av::taas::__ApiVersion* NewPassengerCountResp::mutable___api_version() {
  
  if (__api_version_ == NULL) {
    __api_version_ = new ::ford::av::taas::__ApiVersion;
  }
  // @@protoc_insertion_point(field_mutable:ford.av.taas.NewPassengerCountResp.__api_version)
  return __api_version_;
}
inline void NewPassengerCountResp::set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(__api_version_);
  }
  if (__api_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      __api_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, __api_version, submessage_arena);
    }
    
  } else {
    
  }
  __api_version_ = __api_version;
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.NewPassengerCountResp.__api_version)
}

// .ford.av.taas.NewPassengerCountResp.PassCountStatus pass_count_status = 2;
inline void NewPassengerCountResp::clear_pass_count_status() {
  pass_count_status_ = 0;
}
inline ::ford::av::taas::NewPassengerCountResp_PassCountStatus NewPassengerCountResp::pass_count_status() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.NewPassengerCountResp.pass_count_status)
  return static_cast< ::ford::av::taas::NewPassengerCountResp_PassCountStatus >(pass_count_status_);
}
inline void NewPassengerCountResp::set_pass_count_status(::ford::av::taas::NewPassengerCountResp_PassCountStatus value) {
  
  pass_count_status_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.NewPassengerCountResp.pass_count_status)
}

// -------------------------------------------------------------------

// TripIDRequestMoreTime

// .ford.av.taas.__ApiVersion __api_version = 1;
inline bool TripIDRequestMoreTime::has___api_version() const {
  return this != internal_default_instance() && __api_version_ != NULL;
}
inline const ::ford::av::taas::__ApiVersion& TripIDRequestMoreTime::__api_version() const {
  const ::ford::av::taas::__ApiVersion* p = __api_version_;
  // @@protoc_insertion_point(field_get:ford.av.taas.TripIDRequestMoreTime.__api_version)
  return p != NULL ? *p : *reinterpret_cast<const ::ford::av::taas::__ApiVersion*>(
      &::ford::av::taas::___ApiVersion_default_instance_);
}
inline ::ford::av::taas::__ApiVersion* TripIDRequestMoreTime::release___api_version() {
  // @@protoc_insertion_point(field_release:ford.av.taas.TripIDRequestMoreTime.__api_version)
  
  ::ford::av::taas::__ApiVersion* temp = __api_version_;
  __api_version_ = NULL;
  return temp;
}
inline ::ford::av::taas::__ApiVersion* TripIDRequestMoreTime::mutable___api_version() {
  
  if (__api_version_ == NULL) {
    __api_version_ = new ::ford::av::taas::__ApiVersion;
  }
  // @@protoc_insertion_point(field_mutable:ford.av.taas.TripIDRequestMoreTime.__api_version)
  return __api_version_;
}
inline void TripIDRequestMoreTime::set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(__api_version_);
  }
  if (__api_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      __api_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, __api_version, submessage_arena);
    }
    
  } else {
    
  }
  __api_version_ = __api_version;
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.TripIDRequestMoreTime.__api_version)
}

// bytes trip_id = 2;
inline void TripIDRequestMoreTime::clear_trip_id() {
  trip_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TripIDRequestMoreTime::trip_id() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.TripIDRequestMoreTime.trip_id)
  return trip_id_.GetNoArena();
}
inline void TripIDRequestMoreTime::set_trip_id(const ::std::string& value) {
  
  trip_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ford.av.taas.TripIDRequestMoreTime.trip_id)
}
#if LANG_CXX11
inline void TripIDRequestMoreTime::set_trip_id(::std::string&& value) {
  
  trip_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ford.av.taas.TripIDRequestMoreTime.trip_id)
}
#endif
inline void TripIDRequestMoreTime::set_trip_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trip_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ford.av.taas.TripIDRequestMoreTime.trip_id)
}
inline void TripIDRequestMoreTime::set_trip_id(const void* value, size_t size) {
  
  trip_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ford.av.taas.TripIDRequestMoreTime.trip_id)
}
inline ::std::string* TripIDRequestMoreTime::mutable_trip_id() {
  
  // @@protoc_insertion_point(field_mutable:ford.av.taas.TripIDRequestMoreTime.trip_id)
  return trip_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TripIDRequestMoreTime::release_trip_id() {
  // @@protoc_insertion_point(field_release:ford.av.taas.TripIDRequestMoreTime.trip_id)
  
  return trip_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TripIDRequestMoreTime::set_allocated_trip_id(::std::string* trip_id) {
  if (trip_id != NULL) {
    
  } else {
    
  }
  trip_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trip_id);
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.TripIDRequestMoreTime.trip_id)
}

// -------------------------------------------------------------------

// TripIDRequestMoreTimeResp

// .ford.av.taas.__ApiVersion __api_version = 1;
inline bool TripIDRequestMoreTimeResp::has___api_version() const {
  return this != internal_default_instance() && __api_version_ != NULL;
}
inline const ::ford::av::taas::__ApiVersion& TripIDRequestMoreTimeResp::__api_version() const {
  const ::ford::av::taas::__ApiVersion* p = __api_version_;
  // @@protoc_insertion_point(field_get:ford.av.taas.TripIDRequestMoreTimeResp.__api_version)
  return p != NULL ? *p : *reinterpret_cast<const ::ford::av::taas::__ApiVersion*>(
      &::ford::av::taas::___ApiVersion_default_instance_);
}
inline ::ford::av::taas::__ApiVersion* TripIDRequestMoreTimeResp::release___api_version() {
  // @@protoc_insertion_point(field_release:ford.av.taas.TripIDRequestMoreTimeResp.__api_version)
  
  ::ford::av::taas::__ApiVersion* temp = __api_version_;
  __api_version_ = NULL;
  return temp;
}
inline ::ford::av::taas::__ApiVersion* TripIDRequestMoreTimeResp::mutable___api_version() {
  
  if (__api_version_ == NULL) {
    __api_version_ = new ::ford::av::taas::__ApiVersion;
  }
  // @@protoc_insertion_point(field_mutable:ford.av.taas.TripIDRequestMoreTimeResp.__api_version)
  return __api_version_;
}
inline void TripIDRequestMoreTimeResp::set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(__api_version_);
  }
  if (__api_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      __api_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, __api_version, submessage_arena);
    }
    
  } else {
    
  }
  __api_version_ = __api_version;
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.TripIDRequestMoreTimeResp.__api_version)
}

// .ford.av.taas.TripIDRequestMoreTimeResp.LingerRequestStatus more_time_status = 2;
inline void TripIDRequestMoreTimeResp::clear_more_time_status() {
  more_time_status_ = 0;
}
inline ::ford::av::taas::TripIDRequestMoreTimeResp_LingerRequestStatus TripIDRequestMoreTimeResp::more_time_status() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.TripIDRequestMoreTimeResp.more_time_status)
  return static_cast< ::ford::av::taas::TripIDRequestMoreTimeResp_LingerRequestStatus >(more_time_status_);
}
inline void TripIDRequestMoreTimeResp::set_more_time_status(::ford::av::taas::TripIDRequestMoreTimeResp_LingerRequestStatus value) {
  
  more_time_status_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.TripIDRequestMoreTimeResp.more_time_status)
}

// -------------------------------------------------------------------

// PublishArrival

// .ford.av.taas.__ApiVersion __api_version = 1;
inline bool PublishArrival::has___api_version() const {
  return this != internal_default_instance() && __api_version_ != NULL;
}
inline const ::ford::av::taas::__ApiVersion& PublishArrival::__api_version() const {
  const ::ford::av::taas::__ApiVersion* p = __api_version_;
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishArrival.__api_version)
  return p != NULL ? *p : *reinterpret_cast<const ::ford::av::taas::__ApiVersion*>(
      &::ford::av::taas::___ApiVersion_default_instance_);
}
inline ::ford::av::taas::__ApiVersion* PublishArrival::release___api_version() {
  // @@protoc_insertion_point(field_release:ford.av.taas.PublishArrival.__api_version)
  
  ::ford::av::taas::__ApiVersion* temp = __api_version_;
  __api_version_ = NULL;
  return temp;
}
inline ::ford::av::taas::__ApiVersion* PublishArrival::mutable___api_version() {
  
  if (__api_version_ == NULL) {
    __api_version_ = new ::ford::av::taas::__ApiVersion;
  }
  // @@protoc_insertion_point(field_mutable:ford.av.taas.PublishArrival.__api_version)
  return __api_version_;
}
inline void PublishArrival::set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(__api_version_);
  }
  if (__api_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      __api_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, __api_version, submessage_arena);
    }
    
  } else {
    
  }
  __api_version_ = __api_version;
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.PublishArrival.__api_version)
}

// bool should_disp = 2;
inline void PublishArrival::clear_should_disp() {
  should_disp_ = false;
}
inline bool PublishArrival::should_disp() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishArrival.should_disp)
  return should_disp_;
}
inline void PublishArrival::set_should_disp(bool value) {
  
  should_disp_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishArrival.should_disp)
}

// .ford.av.taas.PublishArrival.CurbSide curbside = 3;
inline void PublishArrival::clear_curbside() {
  curbside_ = 0;
}
inline ::ford::av::taas::PublishArrival_CurbSide PublishArrival::curbside() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishArrival.curbside)
  return static_cast< ::ford::av::taas::PublishArrival_CurbSide >(curbside_);
}
inline void PublishArrival::set_curbside(::ford::av::taas::PublishArrival_CurbSide value) {
  
  curbside_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishArrival.curbside)
}

// -------------------------------------------------------------------

// PublishLinger

// .ford.av.taas.__ApiVersion __api_version = 1;
inline bool PublishLinger::has___api_version() const {
  return this != internal_default_instance() && __api_version_ != NULL;
}
inline const ::ford::av::taas::__ApiVersion& PublishLinger::__api_version() const {
  const ::ford::av::taas::__ApiVersion* p = __api_version_;
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishLinger.__api_version)
  return p != NULL ? *p : *reinterpret_cast<const ::ford::av::taas::__ApiVersion*>(
      &::ford::av::taas::___ApiVersion_default_instance_);
}
inline ::ford::av::taas::__ApiVersion* PublishLinger::release___api_version() {
  // @@protoc_insertion_point(field_release:ford.av.taas.PublishLinger.__api_version)
  
  ::ford::av::taas::__ApiVersion* temp = __api_version_;
  __api_version_ = NULL;
  return temp;
}
inline ::ford::av::taas::__ApiVersion* PublishLinger::mutable___api_version() {
  
  if (__api_version_ == NULL) {
    __api_version_ = new ::ford::av::taas::__ApiVersion;
  }
  // @@protoc_insertion_point(field_mutable:ford.av.taas.PublishLinger.__api_version)
  return __api_version_;
}
inline void PublishLinger::set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(__api_version_);
  }
  if (__api_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      __api_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, __api_version, submessage_arena);
    }
    
  } else {
    
  }
  __api_version_ = __api_version;
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.PublishLinger.__api_version)
}

// uint32 linger_rem = 2;
inline void PublishLinger::clear_linger_rem() {
  linger_rem_ = 0u;
}
inline ::google::protobuf::uint32 PublishLinger::linger_rem() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishLinger.linger_rem)
  return linger_rem_;
}
inline void PublishLinger::set_linger_rem(::google::protobuf::uint32 value) {
  
  linger_rem_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishLinger.linger_rem)
}

// bool linger_exc = 3;
inline void PublishLinger::clear_linger_exc() {
  linger_exc_ = false;
}
inline bool PublishLinger::linger_exc() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishLinger.linger_exc)
  return linger_exc_;
}
inline void PublishLinger::set_linger_exc(bool value) {
  
  linger_exc_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishLinger.linger_exc)
}

// bool can_extend_linger = 4;
inline void PublishLinger::clear_can_extend_linger() {
  can_extend_linger_ = false;
}
inline bool PublishLinger::can_extend_linger() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishLinger.can_extend_linger)
  return can_extend_linger_;
}
inline void PublishLinger::set_can_extend_linger(bool value) {
  
  can_extend_linger_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishLinger.can_extend_linger)
}

// bool emphatic_leave = 5;
inline void PublishLinger::clear_emphatic_leave() {
  emphatic_leave_ = false;
}
inline bool PublishLinger::emphatic_leave() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishLinger.emphatic_leave)
  return emphatic_leave_;
}
inline void PublishLinger::set_emphatic_leave(bool value) {
  
  emphatic_leave_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishLinger.emphatic_leave)
}

// -------------------------------------------------------------------

// PublishGoButtonStatus

// .ford.av.taas.__ApiVersion __api_version = 1;
inline bool PublishGoButtonStatus::has___api_version() const {
  return this != internal_default_instance() && __api_version_ != NULL;
}
inline const ::ford::av::taas::__ApiVersion& PublishGoButtonStatus::__api_version() const {
  const ::ford::av::taas::__ApiVersion* p = __api_version_;
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishGoButtonStatus.__api_version)
  return p != NULL ? *p : *reinterpret_cast<const ::ford::av::taas::__ApiVersion*>(
      &::ford::av::taas::___ApiVersion_default_instance_);
}
inline ::ford::av::taas::__ApiVersion* PublishGoButtonStatus::release___api_version() {
  // @@protoc_insertion_point(field_release:ford.av.taas.PublishGoButtonStatus.__api_version)
  
  ::ford::av::taas::__ApiVersion* temp = __api_version_;
  __api_version_ = NULL;
  return temp;
}
inline ::ford::av::taas::__ApiVersion* PublishGoButtonStatus::mutable___api_version() {
  
  if (__api_version_ == NULL) {
    __api_version_ = new ::ford::av::taas::__ApiVersion;
  }
  // @@protoc_insertion_point(field_mutable:ford.av.taas.PublishGoButtonStatus.__api_version)
  return __api_version_;
}
inline void PublishGoButtonStatus::set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(__api_version_);
  }
  if (__api_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      __api_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, __api_version, submessage_arena);
    }
    
  } else {
    
  }
  __api_version_ = __api_version;
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.PublishGoButtonStatus.__api_version)
}

// .ford.av.taas.PublishGoButtonStatus.GoButtonStatus go_button_enable = 2;
inline void PublishGoButtonStatus::clear_go_button_enable() {
  go_button_enable_ = 0;
}
inline ::ford::av::taas::PublishGoButtonStatus_GoButtonStatus PublishGoButtonStatus::go_button_enable() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishGoButtonStatus.go_button_enable)
  return static_cast< ::ford::av::taas::PublishGoButtonStatus_GoButtonStatus >(go_button_enable_);
}
inline void PublishGoButtonStatus::set_go_button_enable(::ford::av::taas::PublishGoButtonStatus_GoButtonStatus value) {
  
  go_button_enable_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishGoButtonStatus.go_button_enable)
}

// -------------------------------------------------------------------

// PublishOnboardingInfo_TripOnboardInfo_PickupLocation

// uint32 pickup_latitude_degree = 1;
inline void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::clear_pickup_latitude_degree() {
  pickup_latitude_degree_ = 0u;
}
inline ::google::protobuf::uint32 PublishOnboardingInfo_TripOnboardInfo_PickupLocation::pickup_latitude_degree() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation.pickup_latitude_degree)
  return pickup_latitude_degree_;
}
inline void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::set_pickup_latitude_degree(::google::protobuf::uint32 value) {
  
  pickup_latitude_degree_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation.pickup_latitude_degree)
}

// uint32 pickup_latitude_minute = 2;
inline void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::clear_pickup_latitude_minute() {
  pickup_latitude_minute_ = 0u;
}
inline ::google::protobuf::uint32 PublishOnboardingInfo_TripOnboardInfo_PickupLocation::pickup_latitude_minute() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation.pickup_latitude_minute)
  return pickup_latitude_minute_;
}
inline void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::set_pickup_latitude_minute(::google::protobuf::uint32 value) {
  
  pickup_latitude_minute_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation.pickup_latitude_minute)
}

// uint32 pickup_latitude_mmin = 3;
inline void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::clear_pickup_latitude_mmin() {
  pickup_latitude_mmin_ = 0u;
}
inline ::google::protobuf::uint32 PublishOnboardingInfo_TripOnboardInfo_PickupLocation::pickup_latitude_mmin() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation.pickup_latitude_mmin)
  return pickup_latitude_mmin_;
}
inline void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::set_pickup_latitude_mmin(::google::protobuf::uint32 value) {
  
  pickup_latitude_mmin_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation.pickup_latitude_mmin)
}

// bool pickup_latitiude_orientation = 4;
inline void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::clear_pickup_latitiude_orientation() {
  pickup_latitiude_orientation_ = false;
}
inline bool PublishOnboardingInfo_TripOnboardInfo_PickupLocation::pickup_latitiude_orientation() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation.pickup_latitiude_orientation)
  return pickup_latitiude_orientation_;
}
inline void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::set_pickup_latitiude_orientation(bool value) {
  
  pickup_latitiude_orientation_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation.pickup_latitiude_orientation)
}

// uint32 pickup_longitude_degree = 5;
inline void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::clear_pickup_longitude_degree() {
  pickup_longitude_degree_ = 0u;
}
inline ::google::protobuf::uint32 PublishOnboardingInfo_TripOnboardInfo_PickupLocation::pickup_longitude_degree() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation.pickup_longitude_degree)
  return pickup_longitude_degree_;
}
inline void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::set_pickup_longitude_degree(::google::protobuf::uint32 value) {
  
  pickup_longitude_degree_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation.pickup_longitude_degree)
}

// uint32 pickup_longitude_minute = 6;
inline void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::clear_pickup_longitude_minute() {
  pickup_longitude_minute_ = 0u;
}
inline ::google::protobuf::uint32 PublishOnboardingInfo_TripOnboardInfo_PickupLocation::pickup_longitude_minute() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation.pickup_longitude_minute)
  return pickup_longitude_minute_;
}
inline void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::set_pickup_longitude_minute(::google::protobuf::uint32 value) {
  
  pickup_longitude_minute_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation.pickup_longitude_minute)
}

// uint32 pickup_longitude_mmin = 7;
inline void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::clear_pickup_longitude_mmin() {
  pickup_longitude_mmin_ = 0u;
}
inline ::google::protobuf::uint32 PublishOnboardingInfo_TripOnboardInfo_PickupLocation::pickup_longitude_mmin() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation.pickup_longitude_mmin)
  return pickup_longitude_mmin_;
}
inline void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::set_pickup_longitude_mmin(::google::protobuf::uint32 value) {
  
  pickup_longitude_mmin_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation.pickup_longitude_mmin)
}

// bool pickup_longitude_orientation = 8;
inline void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::clear_pickup_longitude_orientation() {
  pickup_longitude_orientation_ = false;
}
inline bool PublishOnboardingInfo_TripOnboardInfo_PickupLocation::pickup_longitude_orientation() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation.pickup_longitude_orientation)
  return pickup_longitude_orientation_;
}
inline void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::set_pickup_longitude_orientation(bool value) {
  
  pickup_longitude_orientation_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation.pickup_longitude_orientation)
}

// -------------------------------------------------------------------

// PublishOnboardingInfo_TripOnboardInfo_DropoffLocation

// uint32 dropoff_latitude_degree = 1;
inline void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::clear_dropoff_latitude_degree() {
  dropoff_latitude_degree_ = 0u;
}
inline ::google::protobuf::uint32 PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::dropoff_latitude_degree() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation.dropoff_latitude_degree)
  return dropoff_latitude_degree_;
}
inline void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::set_dropoff_latitude_degree(::google::protobuf::uint32 value) {
  
  dropoff_latitude_degree_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation.dropoff_latitude_degree)
}

// uint32 dropoff_latitude_minute = 2;
inline void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::clear_dropoff_latitude_minute() {
  dropoff_latitude_minute_ = 0u;
}
inline ::google::protobuf::uint32 PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::dropoff_latitude_minute() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation.dropoff_latitude_minute)
  return dropoff_latitude_minute_;
}
inline void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::set_dropoff_latitude_minute(::google::protobuf::uint32 value) {
  
  dropoff_latitude_minute_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation.dropoff_latitude_minute)
}

// uint32 dropoff_latitude_mmin = 3;
inline void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::clear_dropoff_latitude_mmin() {
  dropoff_latitude_mmin_ = 0u;
}
inline ::google::protobuf::uint32 PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::dropoff_latitude_mmin() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation.dropoff_latitude_mmin)
  return dropoff_latitude_mmin_;
}
inline void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::set_dropoff_latitude_mmin(::google::protobuf::uint32 value) {
  
  dropoff_latitude_mmin_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation.dropoff_latitude_mmin)
}

// bool dropoff_latitiude_orientation = 4;
inline void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::clear_dropoff_latitiude_orientation() {
  dropoff_latitiude_orientation_ = false;
}
inline bool PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::dropoff_latitiude_orientation() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation.dropoff_latitiude_orientation)
  return dropoff_latitiude_orientation_;
}
inline void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::set_dropoff_latitiude_orientation(bool value) {
  
  dropoff_latitiude_orientation_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation.dropoff_latitiude_orientation)
}

// uint32 dropoff_longitude_degree = 5;
inline void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::clear_dropoff_longitude_degree() {
  dropoff_longitude_degree_ = 0u;
}
inline ::google::protobuf::uint32 PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::dropoff_longitude_degree() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation.dropoff_longitude_degree)
  return dropoff_longitude_degree_;
}
inline void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::set_dropoff_longitude_degree(::google::protobuf::uint32 value) {
  
  dropoff_longitude_degree_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation.dropoff_longitude_degree)
}

// uint32 dropoff_longitude_minute = 6;
inline void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::clear_dropoff_longitude_minute() {
  dropoff_longitude_minute_ = 0u;
}
inline ::google::protobuf::uint32 PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::dropoff_longitude_minute() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation.dropoff_longitude_minute)
  return dropoff_longitude_minute_;
}
inline void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::set_dropoff_longitude_minute(::google::protobuf::uint32 value) {
  
  dropoff_longitude_minute_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation.dropoff_longitude_minute)
}

// uint32 dropoff_longitude_mmin = 7;
inline void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::clear_dropoff_longitude_mmin() {
  dropoff_longitude_mmin_ = 0u;
}
inline ::google::protobuf::uint32 PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::dropoff_longitude_mmin() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation.dropoff_longitude_mmin)
  return dropoff_longitude_mmin_;
}
inline void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::set_dropoff_longitude_mmin(::google::protobuf::uint32 value) {
  
  dropoff_longitude_mmin_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation.dropoff_longitude_mmin)
}

// bool dropoff_longitude_orientation = 8;
inline void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::clear_dropoff_longitude_orientation() {
  dropoff_longitude_orientation_ = false;
}
inline bool PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::dropoff_longitude_orientation() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation.dropoff_longitude_orientation)
  return dropoff_longitude_orientation_;
}
inline void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::set_dropoff_longitude_orientation(bool value) {
  
  dropoff_longitude_orientation_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation.dropoff_longitude_orientation)
}

// -------------------------------------------------------------------

// PublishOnboardingInfo_TripOnboardInfo

// bytes TripID = 1;
inline void PublishOnboardingInfo_TripOnboardInfo::clear_tripid() {
  tripid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PublishOnboardingInfo_TripOnboardInfo::tripid() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.TripID)
  return tripid_.GetNoArena();
}
inline void PublishOnboardingInfo_TripOnboardInfo::set_tripid(const ::std::string& value) {
  
  tripid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.TripID)
}
#if LANG_CXX11
inline void PublishOnboardingInfo_TripOnboardInfo::set_tripid(::std::string&& value) {
  
  tripid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.TripID)
}
#endif
inline void PublishOnboardingInfo_TripOnboardInfo::set_tripid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  tripid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.TripID)
}
inline void PublishOnboardingInfo_TripOnboardInfo::set_tripid(const void* value, size_t size) {
  
  tripid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.TripID)
}
inline ::std::string* PublishOnboardingInfo_TripOnboardInfo::mutable_tripid() {
  
  // @@protoc_insertion_point(field_mutable:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.TripID)
  return tripid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublishOnboardingInfo_TripOnboardInfo::release_tripid() {
  // @@protoc_insertion_point(field_release:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.TripID)
  
  return tripid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublishOnboardingInfo_TripOnboardInfo::set_allocated_tripid(::std::string* tripid) {
  if (tripid != NULL) {
    
  } else {
    
  }
  tripid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tripid);
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.TripID)
}

// bool possibly_present = 2;
inline void PublishOnboardingInfo_TripOnboardInfo::clear_possibly_present() {
  possibly_present_ = false;
}
inline bool PublishOnboardingInfo_TripOnboardInfo::possibly_present() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.possibly_present)
  return possibly_present_;
}
inline void PublishOnboardingInfo_TripOnboardInfo::set_possibly_present(bool value) {
  
  possibly_present_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.possibly_present)
}

// bool can_update_passengers = 3;
inline void PublishOnboardingInfo_TripOnboardInfo::clear_can_update_passengers() {
  can_update_passengers_ = false;
}
inline bool PublishOnboardingInfo_TripOnboardInfo::can_update_passengers() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.can_update_passengers)
  return can_update_passengers_;
}
inline void PublishOnboardingInfo_TripOnboardInfo::set_can_update_passengers(bool value) {
  
  can_update_passengers_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.can_update_passengers)
}

// uint32 exp_num_pass = 4;
inline void PublishOnboardingInfo_TripOnboardInfo::clear_exp_num_pass() {
  exp_num_pass_ = 0u;
}
inline ::google::protobuf::uint32 PublishOnboardingInfo_TripOnboardInfo::exp_num_pass() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.exp_num_pass)
  return exp_num_pass_;
}
inline void PublishOnboardingInfo_TripOnboardInfo::set_exp_num_pass(::google::protobuf::uint32 value) {
  
  exp_num_pass_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.exp_num_pass)
}

// string pickup_name = 5;
inline void PublishOnboardingInfo_TripOnboardInfo::clear_pickup_name() {
  pickup_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PublishOnboardingInfo_TripOnboardInfo::pickup_name() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.pickup_name)
  return pickup_name_.GetNoArena();
}
inline void PublishOnboardingInfo_TripOnboardInfo::set_pickup_name(const ::std::string& value) {
  
  pickup_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.pickup_name)
}
#if LANG_CXX11
inline void PublishOnboardingInfo_TripOnboardInfo::set_pickup_name(::std::string&& value) {
  
  pickup_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.pickup_name)
}
#endif
inline void PublishOnboardingInfo_TripOnboardInfo::set_pickup_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  pickup_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.pickup_name)
}
inline void PublishOnboardingInfo_TripOnboardInfo::set_pickup_name(const char* value, size_t size) {
  
  pickup_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.pickup_name)
}
inline ::std::string* PublishOnboardingInfo_TripOnboardInfo::mutable_pickup_name() {
  
  // @@protoc_insertion_point(field_mutable:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.pickup_name)
  return pickup_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublishOnboardingInfo_TripOnboardInfo::release_pickup_name() {
  // @@protoc_insertion_point(field_release:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.pickup_name)
  
  return pickup_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublishOnboardingInfo_TripOnboardInfo::set_allocated_pickup_name(::std::string* pickup_name) {
  if (pickup_name != NULL) {
    
  } else {
    
  }
  pickup_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pickup_name);
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.pickup_name)
}

// .ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation pickup_location = 6;
inline bool PublishOnboardingInfo_TripOnboardInfo::has_pickup_location() const {
  return this != internal_default_instance() && pickup_location_ != NULL;
}
inline void PublishOnboardingInfo_TripOnboardInfo::clear_pickup_location() {
  if (GetArenaNoVirtual() == NULL && pickup_location_ != NULL) {
    delete pickup_location_;
  }
  pickup_location_ = NULL;
}
inline const ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation& PublishOnboardingInfo_TripOnboardInfo::pickup_location() const {
  const ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation* p = pickup_location_;
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.pickup_location)
  return p != NULL ? *p : *reinterpret_cast<const ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation*>(
      &::ford::av::taas::_PublishOnboardingInfo_TripOnboardInfo_PickupLocation_default_instance_);
}
inline ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation* PublishOnboardingInfo_TripOnboardInfo::release_pickup_location() {
  // @@protoc_insertion_point(field_release:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.pickup_location)
  
  ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation* temp = pickup_location_;
  pickup_location_ = NULL;
  return temp;
}
inline ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation* PublishOnboardingInfo_TripOnboardInfo::mutable_pickup_location() {
  
  if (pickup_location_ == NULL) {
    pickup_location_ = new ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation;
  }
  // @@protoc_insertion_point(field_mutable:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.pickup_location)
  return pickup_location_;
}
inline void PublishOnboardingInfo_TripOnboardInfo::set_allocated_pickup_location(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation* pickup_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete pickup_location_;
  }
  if (pickup_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pickup_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pickup_location, submessage_arena);
    }
    
  } else {
    
  }
  pickup_location_ = pickup_location;
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.pickup_location)
}

// .ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation dropoff_location = 7;
inline bool PublishOnboardingInfo_TripOnboardInfo::has_dropoff_location() const {
  return this != internal_default_instance() && dropoff_location_ != NULL;
}
inline void PublishOnboardingInfo_TripOnboardInfo::clear_dropoff_location() {
  if (GetArenaNoVirtual() == NULL && dropoff_location_ != NULL) {
    delete dropoff_location_;
  }
  dropoff_location_ = NULL;
}
inline const ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation& PublishOnboardingInfo_TripOnboardInfo::dropoff_location() const {
  const ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation* p = dropoff_location_;
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.dropoff_location)
  return p != NULL ? *p : *reinterpret_cast<const ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation*>(
      &::ford::av::taas::_PublishOnboardingInfo_TripOnboardInfo_DropoffLocation_default_instance_);
}
inline ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation* PublishOnboardingInfo_TripOnboardInfo::release_dropoff_location() {
  // @@protoc_insertion_point(field_release:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.dropoff_location)
  
  ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation* temp = dropoff_location_;
  dropoff_location_ = NULL;
  return temp;
}
inline ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation* PublishOnboardingInfo_TripOnboardInfo::mutable_dropoff_location() {
  
  if (dropoff_location_ == NULL) {
    dropoff_location_ = new ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation;
  }
  // @@protoc_insertion_point(field_mutable:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.dropoff_location)
  return dropoff_location_;
}
inline void PublishOnboardingInfo_TripOnboardInfo::set_allocated_dropoff_location(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation* dropoff_location) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete dropoff_location_;
  }
  if (dropoff_location) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dropoff_location = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dropoff_location, submessage_arena);
    }
    
  } else {
    
  }
  dropoff_location_ = dropoff_location;
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.dropoff_location)
}

// string dropoff_name = 8;
inline void PublishOnboardingInfo_TripOnboardInfo::clear_dropoff_name() {
  dropoff_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PublishOnboardingInfo_TripOnboardInfo::dropoff_name() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.dropoff_name)
  return dropoff_name_.GetNoArena();
}
inline void PublishOnboardingInfo_TripOnboardInfo::set_dropoff_name(const ::std::string& value) {
  
  dropoff_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.dropoff_name)
}
#if LANG_CXX11
inline void PublishOnboardingInfo_TripOnboardInfo::set_dropoff_name(::std::string&& value) {
  
  dropoff_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.dropoff_name)
}
#endif
inline void PublishOnboardingInfo_TripOnboardInfo::set_dropoff_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  dropoff_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.dropoff_name)
}
inline void PublishOnboardingInfo_TripOnboardInfo::set_dropoff_name(const char* value, size_t size) {
  
  dropoff_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.dropoff_name)
}
inline ::std::string* PublishOnboardingInfo_TripOnboardInfo::mutable_dropoff_name() {
  
  // @@protoc_insertion_point(field_mutable:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.dropoff_name)
  return dropoff_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublishOnboardingInfo_TripOnboardInfo::release_dropoff_name() {
  // @@protoc_insertion_point(field_release:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.dropoff_name)
  
  return dropoff_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublishOnboardingInfo_TripOnboardInfo::set_allocated_dropoff_name(::std::string* dropoff_name) {
  if (dropoff_name != NULL) {
    
  } else {
    
  }
  dropoff_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dropoff_name);
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.dropoff_name)
}

// -------------------------------------------------------------------

// PublishOnboardingInfo

// .ford.av.taas.__ApiVersion __api_version = 1;
inline bool PublishOnboardingInfo::has___api_version() const {
  return this != internal_default_instance() && __api_version_ != NULL;
}
inline const ::ford::av::taas::__ApiVersion& PublishOnboardingInfo::__api_version() const {
  const ::ford::av::taas::__ApiVersion* p = __api_version_;
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.__api_version)
  return p != NULL ? *p : *reinterpret_cast<const ::ford::av::taas::__ApiVersion*>(
      &::ford::av::taas::___ApiVersion_default_instance_);
}
inline ::ford::av::taas::__ApiVersion* PublishOnboardingInfo::release___api_version() {
  // @@protoc_insertion_point(field_release:ford.av.taas.PublishOnboardingInfo.__api_version)
  
  ::ford::av::taas::__ApiVersion* temp = __api_version_;
  __api_version_ = NULL;
  return temp;
}
inline ::ford::av::taas::__ApiVersion* PublishOnboardingInfo::mutable___api_version() {
  
  if (__api_version_ == NULL) {
    __api_version_ = new ::ford::av::taas::__ApiVersion;
  }
  // @@protoc_insertion_point(field_mutable:ford.av.taas.PublishOnboardingInfo.__api_version)
  return __api_version_;
}
inline void PublishOnboardingInfo::set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(__api_version_);
  }
  if (__api_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      __api_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, __api_version, submessage_arena);
    }
    
  } else {
    
  }
  __api_version_ = __api_version;
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.PublishOnboardingInfo.__api_version)
}

// repeated .ford.av.taas.PublishOnboardingInfo.TripOnboardInfo Trip_Onboard_Info = 2;
inline int PublishOnboardingInfo::trip_onboard_info_size() const {
  return trip_onboard_info_.size();
}
inline void PublishOnboardingInfo::clear_trip_onboard_info() {
  trip_onboard_info_.Clear();
}
inline const ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo& PublishOnboardingInfo::trip_onboard_info(int index) const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.Trip_Onboard_Info)
  return trip_onboard_info_.Get(index);
}
inline ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo* PublishOnboardingInfo::mutable_trip_onboard_info(int index) {
  // @@protoc_insertion_point(field_mutable:ford.av.taas.PublishOnboardingInfo.Trip_Onboard_Info)
  return trip_onboard_info_.Mutable(index);
}
inline ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo* PublishOnboardingInfo::add_trip_onboard_info() {
  // @@protoc_insertion_point(field_add:ford.av.taas.PublishOnboardingInfo.Trip_Onboard_Info)
  return trip_onboard_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo >*
PublishOnboardingInfo::mutable_trip_onboard_info() {
  // @@protoc_insertion_point(field_mutable_list:ford.av.taas.PublishOnboardingInfo.Trip_Onboard_Info)
  return &trip_onboard_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo >&
PublishOnboardingInfo::trip_onboard_info() const {
  // @@protoc_insertion_point(field_list:ford.av.taas.PublishOnboardingInfo.Trip_Onboard_Info)
  return trip_onboard_info_;
}

// bool can_update_passengers = 3;
inline void PublishOnboardingInfo::clear_can_update_passengers() {
  can_update_passengers_ = false;
}
inline bool PublishOnboardingInfo::can_update_passengers() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOnboardingInfo.can_update_passengers)
  return can_update_passengers_;
}
inline void PublishOnboardingInfo::set_can_update_passengers(bool value) {
  
  can_update_passengers_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOnboardingInfo.can_update_passengers)
}

// -------------------------------------------------------------------

// PublishMrc

// .ford.av.taas.__ApiVersion __api_version = 1;
inline bool PublishMrc::has___api_version() const {
  return this != internal_default_instance() && __api_version_ != NULL;
}
inline const ::ford::av::taas::__ApiVersion& PublishMrc::__api_version() const {
  const ::ford::av::taas::__ApiVersion* p = __api_version_;
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishMrc.__api_version)
  return p != NULL ? *p : *reinterpret_cast<const ::ford::av::taas::__ApiVersion*>(
      &::ford::av::taas::___ApiVersion_default_instance_);
}
inline ::ford::av::taas::__ApiVersion* PublishMrc::release___api_version() {
  // @@protoc_insertion_point(field_release:ford.av.taas.PublishMrc.__api_version)
  
  ::ford::av::taas::__ApiVersion* temp = __api_version_;
  __api_version_ = NULL;
  return temp;
}
inline ::ford::av::taas::__ApiVersion* PublishMrc::mutable___api_version() {
  
  if (__api_version_ == NULL) {
    __api_version_ = new ::ford::av::taas::__ApiVersion;
  }
  // @@protoc_insertion_point(field_mutable:ford.av.taas.PublishMrc.__api_version)
  return __api_version_;
}
inline void PublishMrc::set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(__api_version_);
  }
  if (__api_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      __api_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, __api_version, submessage_arena);
    }
    
  } else {
    
  }
  __api_version_ = __api_version;
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.PublishMrc.__api_version)
}

// .ford.av.taas.PublishMrc.MrcDescription fault_description = 2;
inline void PublishMrc::clear_fault_description() {
  fault_description_ = 0;
}
inline ::ford::av::taas::PublishMrc_MrcDescription PublishMrc::fault_description() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishMrc.fault_description)
  return static_cast< ::ford::av::taas::PublishMrc_MrcDescription >(fault_description_);
}
inline void PublishMrc::set_fault_description(::ford::av::taas::PublishMrc_MrcDescription value) {
  
  fault_description_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishMrc.fault_description)
}

// bool completed = 3;
inline void PublishMrc::clear_completed() {
  completed_ = false;
}
inline bool PublishMrc::completed() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishMrc.completed)
  return completed_;
}
inline void PublishMrc::set_completed(bool value) {
  
  completed_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishMrc.completed)
}

// .ford.av.taas.PublishMrc.Recoverable recoverable = 4;
inline void PublishMrc::clear_recoverable() {
  recoverable_ = 0;
}
inline ::ford::av::taas::PublishMrc_Recoverable PublishMrc::recoverable() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishMrc.recoverable)
  return static_cast< ::ford::av::taas::PublishMrc_Recoverable >(recoverable_);
}
inline void PublishMrc::set_recoverable(::ford::av::taas::PublishMrc_Recoverable value) {
  
  recoverable_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishMrc.recoverable)
}

// bool doors_open = 5;
inline void PublishMrc::clear_doors_open() {
  doors_open_ = false;
}
inline bool PublishMrc::doors_open() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishMrc.doors_open)
  return doors_open_;
}
inline void PublishMrc::set_doors_open(bool value) {
  
  doors_open_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishMrc.doors_open)
}

// bool leo_stop_active = 6;
inline void PublishMrc::clear_leo_stop_active() {
  leo_stop_active_ = false;
}
inline bool PublishMrc::leo_stop_active() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishMrc.leo_stop_active)
  return leo_stop_active_;
}
inline void PublishMrc::set_leo_stop_active(bool value) {
  
  leo_stop_active_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishMrc.leo_stop_active)
}

// .ford.av.taas.PublishMrc.PesState pes_state = 7;
inline void PublishMrc::clear_pes_state() {
  pes_state_ = 0;
}
inline ::ford::av::taas::PublishMrc_PesState PublishMrc::pes_state() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishMrc.pes_state)
  return static_cast< ::ford::av::taas::PublishMrc_PesState >(pes_state_);
}
inline void PublishMrc::set_pes_state(::ford::av::taas::PublishMrc_PesState value) {
  
  pes_state_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishMrc.pes_state)
}

// bool cloud_stop_active = 8;
inline void PublishMrc::clear_cloud_stop_active() {
  cloud_stop_active_ = false;
}
inline bool PublishMrc::cloud_stop_active() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishMrc.cloud_stop_active)
  return cloud_stop_active_;
}
inline void PublishMrc::set_cloud_stop_active(bool value) {
  
  cloud_stop_active_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishMrc.cloud_stop_active)
}

// .ford.av.taas.PublishMrc.ConveniencePullover convenience_pullover = 9;
inline void PublishMrc::clear_convenience_pullover() {
  convenience_pullover_ = 0;
}
inline ::ford::av::taas::PublishMrc_ConveniencePullover PublishMrc::convenience_pullover() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishMrc.convenience_pullover)
  return static_cast< ::ford::av::taas::PublishMrc_ConveniencePullover >(convenience_pullover_);
}
inline void PublishMrc::set_convenience_pullover(::ford::av::taas::PublishMrc_ConveniencePullover value) {
  
  convenience_pullover_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishMrc.convenience_pullover)
}

// bool liftgate_open = 10;
inline void PublishMrc::clear_liftgate_open() {
  liftgate_open_ = false;
}
inline bool PublishMrc::liftgate_open() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishMrc.liftgate_open)
  return liftgate_open_;
}
inline void PublishMrc::set_liftgate_open(bool value) {
  
  liftgate_open_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishMrc.liftgate_open)
}

// -------------------------------------------------------------------

// PublishDriveUpdates

// .ford.av.taas.__ApiVersion __api_version = 1;
inline bool PublishDriveUpdates::has___api_version() const {
  return this != internal_default_instance() && __api_version_ != NULL;
}
inline const ::ford::av::taas::__ApiVersion& PublishDriveUpdates::__api_version() const {
  const ::ford::av::taas::__ApiVersion* p = __api_version_;
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishDriveUpdates.__api_version)
  return p != NULL ? *p : *reinterpret_cast<const ::ford::av::taas::__ApiVersion*>(
      &::ford::av::taas::___ApiVersion_default_instance_);
}
inline ::ford::av::taas::__ApiVersion* PublishDriveUpdates::release___api_version() {
  // @@protoc_insertion_point(field_release:ford.av.taas.PublishDriveUpdates.__api_version)
  
  ::ford::av::taas::__ApiVersion* temp = __api_version_;
  __api_version_ = NULL;
  return temp;
}
inline ::ford::av::taas::__ApiVersion* PublishDriveUpdates::mutable___api_version() {
  
  if (__api_version_ == NULL) {
    __api_version_ = new ::ford::av::taas::__ApiVersion;
  }
  // @@protoc_insertion_point(field_mutable:ford.av.taas.PublishDriveUpdates.__api_version)
  return __api_version_;
}
inline void PublishDriveUpdates::set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(__api_version_);
  }
  if (__api_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      __api_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, __api_version, submessage_arena);
    }
    
  } else {
    
  }
  __api_version_ = __api_version;
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.PublishDriveUpdates.__api_version)
}

// bool arrival_imminent = 2;
inline void PublishDriveUpdates::clear_arrival_imminent() {
  arrival_imminent_ = false;
}
inline bool PublishDriveUpdates::arrival_imminent() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishDriveUpdates.arrival_imminent)
  return arrival_imminent_;
}
inline void PublishDriveUpdates::set_arrival_imminent(bool value) {
  
  arrival_imminent_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishDriveUpdates.arrival_imminent)
}

// uint32 eta = 3;
inline void PublishDriveUpdates::clear_eta() {
  eta_ = 0u;
}
inline ::google::protobuf::uint32 PublishDriveUpdates::eta() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishDriveUpdates.eta)
  return eta_;
}
inline void PublishDriveUpdates::set_eta(::google::protobuf::uint32 value) {
  
  eta_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishDriveUpdates.eta)
}

// bool stop_location_updated = 4;
inline void PublishDriveUpdates::clear_stop_location_updated() {
  stop_location_updated_ = false;
}
inline bool PublishDriveUpdates::stop_location_updated() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishDriveUpdates.stop_location_updated)
  return stop_location_updated_;
}
inline void PublishDriveUpdates::set_stop_location_updated(bool value) {
  
  stop_location_updated_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishDriveUpdates.stop_location_updated)
}

// -------------------------------------------------------------------

// PublishOffboardingTrips

// .ford.av.taas.__ApiVersion __api_version = 1;
inline bool PublishOffboardingTrips::has___api_version() const {
  return this != internal_default_instance() && __api_version_ != NULL;
}
inline const ::ford::av::taas::__ApiVersion& PublishOffboardingTrips::__api_version() const {
  const ::ford::av::taas::__ApiVersion* p = __api_version_;
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOffboardingTrips.__api_version)
  return p != NULL ? *p : *reinterpret_cast<const ::ford::av::taas::__ApiVersion*>(
      &::ford::av::taas::___ApiVersion_default_instance_);
}
inline ::ford::av::taas::__ApiVersion* PublishOffboardingTrips::release___api_version() {
  // @@protoc_insertion_point(field_release:ford.av.taas.PublishOffboardingTrips.__api_version)
  
  ::ford::av::taas::__ApiVersion* temp = __api_version_;
  __api_version_ = NULL;
  return temp;
}
inline ::ford::av::taas::__ApiVersion* PublishOffboardingTrips::mutable___api_version() {
  
  if (__api_version_ == NULL) {
    __api_version_ = new ::ford::av::taas::__ApiVersion;
  }
  // @@protoc_insertion_point(field_mutable:ford.av.taas.PublishOffboardingTrips.__api_version)
  return __api_version_;
}
inline void PublishOffboardingTrips::set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(__api_version_);
  }
  if (__api_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      __api_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, __api_version, submessage_arena);
    }
    
  } else {
    
  }
  __api_version_ = __api_version;
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.PublishOffboardingTrips.__api_version)
}

// repeated bytes trip_ids_offboarding = 2;
inline int PublishOffboardingTrips::trip_ids_offboarding_size() const {
  return trip_ids_offboarding_.size();
}
inline void PublishOffboardingTrips::clear_trip_ids_offboarding() {
  trip_ids_offboarding_.Clear();
}
inline const ::std::string& PublishOffboardingTrips::trip_ids_offboarding(int index) const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishOffboardingTrips.trip_ids_offboarding)
  return trip_ids_offboarding_.Get(index);
}
inline ::std::string* PublishOffboardingTrips::mutable_trip_ids_offboarding(int index) {
  // @@protoc_insertion_point(field_mutable:ford.av.taas.PublishOffboardingTrips.trip_ids_offboarding)
  return trip_ids_offboarding_.Mutable(index);
}
inline void PublishOffboardingTrips::set_trip_ids_offboarding(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOffboardingTrips.trip_ids_offboarding)
  trip_ids_offboarding_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void PublishOffboardingTrips::set_trip_ids_offboarding(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishOffboardingTrips.trip_ids_offboarding)
  trip_ids_offboarding_.Mutable(index)->assign(std::move(value));
}
#endif
inline void PublishOffboardingTrips::set_trip_ids_offboarding(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  trip_ids_offboarding_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ford.av.taas.PublishOffboardingTrips.trip_ids_offboarding)
}
inline void PublishOffboardingTrips::set_trip_ids_offboarding(int index, const void* value, size_t size) {
  trip_ids_offboarding_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ford.av.taas.PublishOffboardingTrips.trip_ids_offboarding)
}
inline ::std::string* PublishOffboardingTrips::add_trip_ids_offboarding() {
  // @@protoc_insertion_point(field_add_mutable:ford.av.taas.PublishOffboardingTrips.trip_ids_offboarding)
  return trip_ids_offboarding_.Add();
}
inline void PublishOffboardingTrips::add_trip_ids_offboarding(const ::std::string& value) {
  trip_ids_offboarding_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ford.av.taas.PublishOffboardingTrips.trip_ids_offboarding)
}
#if LANG_CXX11
inline void PublishOffboardingTrips::add_trip_ids_offboarding(::std::string&& value) {
  trip_ids_offboarding_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ford.av.taas.PublishOffboardingTrips.trip_ids_offboarding)
}
#endif
inline void PublishOffboardingTrips::add_trip_ids_offboarding(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  trip_ids_offboarding_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ford.av.taas.PublishOffboardingTrips.trip_ids_offboarding)
}
inline void PublishOffboardingTrips::add_trip_ids_offboarding(const void* value, size_t size) {
  trip_ids_offboarding_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ford.av.taas.PublishOffboardingTrips.trip_ids_offboarding)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
PublishOffboardingTrips::trip_ids_offboarding() const {
  // @@protoc_insertion_point(field_list:ford.av.taas.PublishOffboardingTrips.trip_ids_offboarding)
  return trip_ids_offboarding_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
PublishOffboardingTrips::mutable_trip_ids_offboarding() {
  // @@protoc_insertion_point(field_mutable_list:ford.av.taas.PublishOffboardingTrips.trip_ids_offboarding)
  return &trip_ids_offboarding_;
}

// -------------------------------------------------------------------

// PublishActiveTripInfo_TripActiveInfo_DropOffGPS

// uint32 drop_off_latitude_degree = 1;
inline void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::clear_drop_off_latitude_degree() {
  drop_off_latitude_degree_ = 0u;
}
inline ::google::protobuf::uint32 PublishActiveTripInfo_TripActiveInfo_DropOffGPS::drop_off_latitude_degree() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS.drop_off_latitude_degree)
  return drop_off_latitude_degree_;
}
inline void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::set_drop_off_latitude_degree(::google::protobuf::uint32 value) {
  
  drop_off_latitude_degree_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS.drop_off_latitude_degree)
}

// uint32 drop_off_latitude_minute = 2;
inline void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::clear_drop_off_latitude_minute() {
  drop_off_latitude_minute_ = 0u;
}
inline ::google::protobuf::uint32 PublishActiveTripInfo_TripActiveInfo_DropOffGPS::drop_off_latitude_minute() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS.drop_off_latitude_minute)
  return drop_off_latitude_minute_;
}
inline void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::set_drop_off_latitude_minute(::google::protobuf::uint32 value) {
  
  drop_off_latitude_minute_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS.drop_off_latitude_minute)
}

// uint32 drop_off_latitude_mmin = 3;
inline void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::clear_drop_off_latitude_mmin() {
  drop_off_latitude_mmin_ = 0u;
}
inline ::google::protobuf::uint32 PublishActiveTripInfo_TripActiveInfo_DropOffGPS::drop_off_latitude_mmin() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS.drop_off_latitude_mmin)
  return drop_off_latitude_mmin_;
}
inline void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::set_drop_off_latitude_mmin(::google::protobuf::uint32 value) {
  
  drop_off_latitude_mmin_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS.drop_off_latitude_mmin)
}

// bool drop_off_latitiude_orientation = 4;
inline void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::clear_drop_off_latitiude_orientation() {
  drop_off_latitiude_orientation_ = false;
}
inline bool PublishActiveTripInfo_TripActiveInfo_DropOffGPS::drop_off_latitiude_orientation() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS.drop_off_latitiude_orientation)
  return drop_off_latitiude_orientation_;
}
inline void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::set_drop_off_latitiude_orientation(bool value) {
  
  drop_off_latitiude_orientation_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS.drop_off_latitiude_orientation)
}

// uint32 drop_off_longitude_degree = 5;
inline void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::clear_drop_off_longitude_degree() {
  drop_off_longitude_degree_ = 0u;
}
inline ::google::protobuf::uint32 PublishActiveTripInfo_TripActiveInfo_DropOffGPS::drop_off_longitude_degree() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS.drop_off_longitude_degree)
  return drop_off_longitude_degree_;
}
inline void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::set_drop_off_longitude_degree(::google::protobuf::uint32 value) {
  
  drop_off_longitude_degree_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS.drop_off_longitude_degree)
}

// uint32 drop_off_longitude_minute = 6;
inline void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::clear_drop_off_longitude_minute() {
  drop_off_longitude_minute_ = 0u;
}
inline ::google::protobuf::uint32 PublishActiveTripInfo_TripActiveInfo_DropOffGPS::drop_off_longitude_minute() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS.drop_off_longitude_minute)
  return drop_off_longitude_minute_;
}
inline void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::set_drop_off_longitude_minute(::google::protobuf::uint32 value) {
  
  drop_off_longitude_minute_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS.drop_off_longitude_minute)
}

// uint32 drop_off_longitude_mmin = 7;
inline void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::clear_drop_off_longitude_mmin() {
  drop_off_longitude_mmin_ = 0u;
}
inline ::google::protobuf::uint32 PublishActiveTripInfo_TripActiveInfo_DropOffGPS::drop_off_longitude_mmin() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS.drop_off_longitude_mmin)
  return drop_off_longitude_mmin_;
}
inline void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::set_drop_off_longitude_mmin(::google::protobuf::uint32 value) {
  
  drop_off_longitude_mmin_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS.drop_off_longitude_mmin)
}

// bool drop_off_longitude_orientation = 8;
inline void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::clear_drop_off_longitude_orientation() {
  drop_off_longitude_orientation_ = false;
}
inline bool PublishActiveTripInfo_TripActiveInfo_DropOffGPS::drop_off_longitude_orientation() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS.drop_off_longitude_orientation)
  return drop_off_longitude_orientation_;
}
inline void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::set_drop_off_longitude_orientation(bool value) {
  
  drop_off_longitude_orientation_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS.drop_off_longitude_orientation)
}

// -------------------------------------------------------------------

// PublishActiveTripInfo_TripActiveInfo

// bytes trip_id = 1;
inline void PublishActiveTripInfo_TripActiveInfo::clear_trip_id() {
  trip_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PublishActiveTripInfo_TripActiveInfo::trip_id() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.trip_id)
  return trip_id_.GetNoArena();
}
inline void PublishActiveTripInfo_TripActiveInfo::set_trip_id(const ::std::string& value) {
  
  trip_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.trip_id)
}
#if LANG_CXX11
inline void PublishActiveTripInfo_TripActiveInfo::set_trip_id(::std::string&& value) {
  
  trip_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.trip_id)
}
#endif
inline void PublishActiveTripInfo_TripActiveInfo::set_trip_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  trip_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.trip_id)
}
inline void PublishActiveTripInfo_TripActiveInfo::set_trip_id(const void* value, size_t size) {
  
  trip_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.trip_id)
}
inline ::std::string* PublishActiveTripInfo_TripActiveInfo::mutable_trip_id() {
  
  // @@protoc_insertion_point(field_mutable:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.trip_id)
  return trip_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublishActiveTripInfo_TripActiveInfo::release_trip_id() {
  // @@protoc_insertion_point(field_release:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.trip_id)
  
  return trip_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublishActiveTripInfo_TripActiveInfo::set_allocated_trip_id(::std::string* trip_id) {
  if (trip_id != NULL) {
    
  } else {
    
  }
  trip_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trip_id);
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.trip_id)
}

// string drop_off_name = 2;
inline void PublishActiveTripInfo_TripActiveInfo::clear_drop_off_name() {
  drop_off_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PublishActiveTripInfo_TripActiveInfo::drop_off_name() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.drop_off_name)
  return drop_off_name_.GetNoArena();
}
inline void PublishActiveTripInfo_TripActiveInfo::set_drop_off_name(const ::std::string& value) {
  
  drop_off_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.drop_off_name)
}
#if LANG_CXX11
inline void PublishActiveTripInfo_TripActiveInfo::set_drop_off_name(::std::string&& value) {
  
  drop_off_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.drop_off_name)
}
#endif
inline void PublishActiveTripInfo_TripActiveInfo::set_drop_off_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  drop_off_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.drop_off_name)
}
inline void PublishActiveTripInfo_TripActiveInfo::set_drop_off_name(const char* value, size_t size) {
  
  drop_off_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.drop_off_name)
}
inline ::std::string* PublishActiveTripInfo_TripActiveInfo::mutable_drop_off_name() {
  
  // @@protoc_insertion_point(field_mutable:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.drop_off_name)
  return drop_off_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PublishActiveTripInfo_TripActiveInfo::release_drop_off_name() {
  // @@protoc_insertion_point(field_release:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.drop_off_name)
  
  return drop_off_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PublishActiveTripInfo_TripActiveInfo::set_allocated_drop_off_name(::std::string* drop_off_name) {
  if (drop_off_name != NULL) {
    
  } else {
    
  }
  drop_off_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), drop_off_name);
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.drop_off_name)
}

// .ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS drop_off_GPS = 3;
inline bool PublishActiveTripInfo_TripActiveInfo::has_drop_off_gps() const {
  return this != internal_default_instance() && drop_off_gps_ != NULL;
}
inline void PublishActiveTripInfo_TripActiveInfo::clear_drop_off_gps() {
  if (GetArenaNoVirtual() == NULL && drop_off_gps_ != NULL) {
    delete drop_off_gps_;
  }
  drop_off_gps_ = NULL;
}
inline const ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS& PublishActiveTripInfo_TripActiveInfo::drop_off_gps() const {
  const ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS* p = drop_off_gps_;
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.drop_off_GPS)
  return p != NULL ? *p : *reinterpret_cast<const ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS*>(
      &::ford::av::taas::_PublishActiveTripInfo_TripActiveInfo_DropOffGPS_default_instance_);
}
inline ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS* PublishActiveTripInfo_TripActiveInfo::release_drop_off_gps() {
  // @@protoc_insertion_point(field_release:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.drop_off_GPS)
  
  ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS* temp = drop_off_gps_;
  drop_off_gps_ = NULL;
  return temp;
}
inline ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS* PublishActiveTripInfo_TripActiveInfo::mutable_drop_off_gps() {
  
  if (drop_off_gps_ == NULL) {
    drop_off_gps_ = new ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS;
  }
  // @@protoc_insertion_point(field_mutable:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.drop_off_GPS)
  return drop_off_gps_;
}
inline void PublishActiveTripInfo_TripActiveInfo::set_allocated_drop_off_gps(::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS* drop_off_gps) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete drop_off_gps_;
  }
  if (drop_off_gps) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      drop_off_gps = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, drop_off_gps, submessage_arena);
    }
    
  } else {
    
  }
  drop_off_gps_ = drop_off_gps;
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.drop_off_GPS)
}

// uint32 eta = 4;
inline void PublishActiveTripInfo_TripActiveInfo::clear_eta() {
  eta_ = 0u;
}
inline ::google::protobuf::uint32 PublishActiveTripInfo_TripActiveInfo::eta() const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.eta)
  return eta_;
}
inline void PublishActiveTripInfo_TripActiveInfo::set_eta(::google::protobuf::uint32 value) {
  
  eta_ = value;
  // @@protoc_insertion_point(field_set:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.eta)
}

// -------------------------------------------------------------------

// PublishActiveTripInfo

// .ford.av.taas.__ApiVersion __api_version = 1;
inline bool PublishActiveTripInfo::has___api_version() const {
  return this != internal_default_instance() && __api_version_ != NULL;
}
inline const ::ford::av::taas::__ApiVersion& PublishActiveTripInfo::__api_version() const {
  const ::ford::av::taas::__ApiVersion* p = __api_version_;
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishActiveTripInfo.__api_version)
  return p != NULL ? *p : *reinterpret_cast<const ::ford::av::taas::__ApiVersion*>(
      &::ford::av::taas::___ApiVersion_default_instance_);
}
inline ::ford::av::taas::__ApiVersion* PublishActiveTripInfo::release___api_version() {
  // @@protoc_insertion_point(field_release:ford.av.taas.PublishActiveTripInfo.__api_version)
  
  ::ford::av::taas::__ApiVersion* temp = __api_version_;
  __api_version_ = NULL;
  return temp;
}
inline ::ford::av::taas::__ApiVersion* PublishActiveTripInfo::mutable___api_version() {
  
  if (__api_version_ == NULL) {
    __api_version_ = new ::ford::av::taas::__ApiVersion;
  }
  // @@protoc_insertion_point(field_mutable:ford.av.taas.PublishActiveTripInfo.__api_version)
  return __api_version_;
}
inline void PublishActiveTripInfo::set_allocated___api_version(::ford::av::taas::__ApiVersion* __api_version) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(__api_version_);
  }
  if (__api_version) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      __api_version = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, __api_version, submessage_arena);
    }
    
  } else {
    
  }
  __api_version_ = __api_version;
  // @@protoc_insertion_point(field_set_allocated:ford.av.taas.PublishActiveTripInfo.__api_version)
}

// repeated .ford.av.taas.PublishActiveTripInfo.TripActiveInfo trip_active_info = 2;
inline int PublishActiveTripInfo::trip_active_info_size() const {
  return trip_active_info_.size();
}
inline void PublishActiveTripInfo::clear_trip_active_info() {
  trip_active_info_.Clear();
}
inline const ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo& PublishActiveTripInfo::trip_active_info(int index) const {
  // @@protoc_insertion_point(field_get:ford.av.taas.PublishActiveTripInfo.trip_active_info)
  return trip_active_info_.Get(index);
}
inline ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo* PublishActiveTripInfo::mutable_trip_active_info(int index) {
  // @@protoc_insertion_point(field_mutable:ford.av.taas.PublishActiveTripInfo.trip_active_info)
  return trip_active_info_.Mutable(index);
}
inline ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo* PublishActiveTripInfo::add_trip_active_info() {
  // @@protoc_insertion_point(field_add:ford.av.taas.PublishActiveTripInfo.trip_active_info)
  return trip_active_info_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo >*
PublishActiveTripInfo::mutable_trip_active_info() {
  // @@protoc_insertion_point(field_mutable_list:ford.av.taas.PublishActiveTripInfo.trip_active_info)
  return &trip_active_info_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo >&
PublishActiveTripInfo::trip_active_info() const {
  // @@protoc_insertion_point(field_list:ford.av.taas.PublishActiveTripInfo.trip_active_info)
  return trip_active_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace taas
}  // namespace av
}  // namespace ford

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ford::av::taas::CancelPulloverResp_PulloverCancelStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ford::av::taas::CancelPulloverResp_PulloverCancelStatus>() {
  return ::ford::av::taas::CancelPulloverResp_PulloverCancelStatus_descriptor();
}
template <> struct is_proto_enum< ::ford::av::taas::GoAckResp_GoACKRespStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ford::av::taas::GoAckResp_GoACKRespStatus>() {
  return ::ford::av::taas::GoAckResp_GoACKRespStatus_descriptor();
}
template <> struct is_proto_enum< ::ford::av::taas::PassengerPulloverResp_PulloverStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ford::av::taas::PassengerPulloverResp_PulloverStatus>() {
  return ::ford::av::taas::PassengerPulloverResp_PulloverStatus_descriptor();
}
template <> struct is_proto_enum< ::ford::av::taas::NewPassengerCountResp_PassCountStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ford::av::taas::NewPassengerCountResp_PassCountStatus>() {
  return ::ford::av::taas::NewPassengerCountResp_PassCountStatus_descriptor();
}
template <> struct is_proto_enum< ::ford::av::taas::TripIDRequestMoreTimeResp_LingerRequestStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ford::av::taas::TripIDRequestMoreTimeResp_LingerRequestStatus>() {
  return ::ford::av::taas::TripIDRequestMoreTimeResp_LingerRequestStatus_descriptor();
}
template <> struct is_proto_enum< ::ford::av::taas::PublishArrival_CurbSide> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ford::av::taas::PublishArrival_CurbSide>() {
  return ::ford::av::taas::PublishArrival_CurbSide_descriptor();
}
template <> struct is_proto_enum< ::ford::av::taas::PublishGoButtonStatus_GoButtonStatus> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ford::av::taas::PublishGoButtonStatus_GoButtonStatus>() {
  return ::ford::av::taas::PublishGoButtonStatus_GoButtonStatus_descriptor();
}
template <> struct is_proto_enum< ::ford::av::taas::PublishMrc_MrcDescription> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ford::av::taas::PublishMrc_MrcDescription>() {
  return ::ford::av::taas::PublishMrc_MrcDescription_descriptor();
}
template <> struct is_proto_enum< ::ford::av::taas::PublishMrc_Recoverable> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ford::av::taas::PublishMrc_Recoverable>() {
  return ::ford::av::taas::PublishMrc_Recoverable_descriptor();
}
template <> struct is_proto_enum< ::ford::av::taas::PublishMrc_PesState> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ford::av::taas::PublishMrc_PesState>() {
  return ::ford::av::taas::PublishMrc_PesState_descriptor();
}
template <> struct is_proto_enum< ::ford::av::taas::PublishMrc_ConveniencePullover> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ford::av::taas::PublishMrc_ConveniencePullover>() {
  return ::ford::av::taas::PublishMrc_ConveniencePullover_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TVF_5fTo_5fDXP_2eproto__INCLUDED
