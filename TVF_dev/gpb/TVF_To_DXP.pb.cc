// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TVF_To_DXP.proto

#include "TVF_To_DXP.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace ford {
namespace av {
namespace taas {
class CancelPulloverDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CancelPullover>
      _instance;
} _CancelPullover_default_instance_;
class CancelPulloverRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CancelPulloverResp>
      _instance;
} _CancelPulloverResp_default_instance_;
class GoAckDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GoAck>
      _instance;
} _GoAck_default_instance_;
class GoAckRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GoAckResp>
      _instance;
} _GoAckResp_default_instance_;
class PassengerPulloverDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PassengerPullover>
      _instance;
} _PassengerPullover_default_instance_;
class PassengerPulloverRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PassengerPulloverResp>
      _instance;
} _PassengerPulloverResp_default_instance_;
class NewPassengerCountDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewPassengerCount>
      _instance;
} _NewPassengerCount_default_instance_;
class NewPassengerCountRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NewPassengerCountResp>
      _instance;
} _NewPassengerCountResp_default_instance_;
class TripIDRequestMoreTimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TripIDRequestMoreTime>
      _instance;
} _TripIDRequestMoreTime_default_instance_;
class TripIDRequestMoreTimeRespDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TripIDRequestMoreTimeResp>
      _instance;
} _TripIDRequestMoreTimeResp_default_instance_;
class PublishArrivalDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishArrival>
      _instance;
} _PublishArrival_default_instance_;
class PublishLingerDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishLinger>
      _instance;
} _PublishLinger_default_instance_;
class PublishGoButtonStatusDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishGoButtonStatus>
      _instance;
} _PublishGoButtonStatus_default_instance_;
class PublishOnboardingInfo_TripOnboardInfo_PickupLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishOnboardingInfo_TripOnboardInfo_PickupLocation>
      _instance;
} _PublishOnboardingInfo_TripOnboardInfo_PickupLocation_default_instance_;
class PublishOnboardingInfo_TripOnboardInfo_DropoffLocationDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishOnboardingInfo_TripOnboardInfo_DropoffLocation>
      _instance;
} _PublishOnboardingInfo_TripOnboardInfo_DropoffLocation_default_instance_;
class PublishOnboardingInfo_TripOnboardInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishOnboardingInfo_TripOnboardInfo>
      _instance;
} _PublishOnboardingInfo_TripOnboardInfo_default_instance_;
class PublishOnboardingInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishOnboardingInfo>
      _instance;
} _PublishOnboardingInfo_default_instance_;
class PublishMrcDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishMrc>
      _instance;
} _PublishMrc_default_instance_;
class PublishDriveUpdatesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishDriveUpdates>
      _instance;
} _PublishDriveUpdates_default_instance_;
class PublishOffboardingTripsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishOffboardingTrips>
      _instance;
} _PublishOffboardingTrips_default_instance_;
class PublishActiveTripInfo_TripActiveInfo_DropOffGPSDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishActiveTripInfo_TripActiveInfo_DropOffGPS>
      _instance;
} _PublishActiveTripInfo_TripActiveInfo_DropOffGPS_default_instance_;
class PublishActiveTripInfo_TripActiveInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishActiveTripInfo_TripActiveInfo>
      _instance;
} _PublishActiveTripInfo_TripActiveInfo_default_instance_;
class PublishActiveTripInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PublishActiveTripInfo>
      _instance;
} _PublishActiveTripInfo_default_instance_;
}  // namespace taas
}  // namespace av
}  // namespace ford
namespace protobuf_TVF_5fTo_5fDXP_2eproto {
void InitDefaultsCancelPulloverImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_TVF_5fTo_5fDXP_5finfo_2eproto::InitDefaults__ApiVersion();
  {
    void* ptr = &::ford::av::taas::_CancelPullover_default_instance_;
    new (ptr) ::ford::av::taas::CancelPullover();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::CancelPullover::InitAsDefaultInstance();
}

void InitDefaultsCancelPullover() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCancelPulloverImpl);
}

void InitDefaultsCancelPulloverRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_TVF_5fTo_5fDXP_5finfo_2eproto::InitDefaults__ApiVersion();
  {
    void* ptr = &::ford::av::taas::_CancelPulloverResp_default_instance_;
    new (ptr) ::ford::av::taas::CancelPulloverResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::CancelPulloverResp::InitAsDefaultInstance();
}

void InitDefaultsCancelPulloverResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsCancelPulloverRespImpl);
}

void InitDefaultsGoAckImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_TVF_5fTo_5fDXP_5finfo_2eproto::InitDefaults__ApiVersion();
  {
    void* ptr = &::ford::av::taas::_GoAck_default_instance_;
    new (ptr) ::ford::av::taas::GoAck();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::GoAck::InitAsDefaultInstance();
}

void InitDefaultsGoAck() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGoAckImpl);
}

void InitDefaultsGoAckRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_TVF_5fTo_5fDXP_5finfo_2eproto::InitDefaults__ApiVersion();
  {
    void* ptr = &::ford::av::taas::_GoAckResp_default_instance_;
    new (ptr) ::ford::av::taas::GoAckResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::GoAckResp::InitAsDefaultInstance();
}

void InitDefaultsGoAckResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsGoAckRespImpl);
}

void InitDefaultsPassengerPulloverImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_TVF_5fTo_5fDXP_5finfo_2eproto::InitDefaults__ApiVersion();
  {
    void* ptr = &::ford::av::taas::_PassengerPullover_default_instance_;
    new (ptr) ::ford::av::taas::PassengerPullover();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::PassengerPullover::InitAsDefaultInstance();
}

void InitDefaultsPassengerPullover() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPassengerPulloverImpl);
}

void InitDefaultsPassengerPulloverRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_TVF_5fTo_5fDXP_5finfo_2eproto::InitDefaults__ApiVersion();
  {
    void* ptr = &::ford::av::taas::_PassengerPulloverResp_default_instance_;
    new (ptr) ::ford::av::taas::PassengerPulloverResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::PassengerPulloverResp::InitAsDefaultInstance();
}

void InitDefaultsPassengerPulloverResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPassengerPulloverRespImpl);
}

void InitDefaultsNewPassengerCountImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_TVF_5fTo_5fDXP_5finfo_2eproto::InitDefaults__ApiVersion();
  {
    void* ptr = &::ford::av::taas::_NewPassengerCount_default_instance_;
    new (ptr) ::ford::av::taas::NewPassengerCount();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::NewPassengerCount::InitAsDefaultInstance();
}

void InitDefaultsNewPassengerCount() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNewPassengerCountImpl);
}

void InitDefaultsNewPassengerCountRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_TVF_5fTo_5fDXP_5finfo_2eproto::InitDefaults__ApiVersion();
  {
    void* ptr = &::ford::av::taas::_NewPassengerCountResp_default_instance_;
    new (ptr) ::ford::av::taas::NewPassengerCountResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::NewPassengerCountResp::InitAsDefaultInstance();
}

void InitDefaultsNewPassengerCountResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsNewPassengerCountRespImpl);
}

void InitDefaultsTripIDRequestMoreTimeImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_TVF_5fTo_5fDXP_5finfo_2eproto::InitDefaults__ApiVersion();
  {
    void* ptr = &::ford::av::taas::_TripIDRequestMoreTime_default_instance_;
    new (ptr) ::ford::av::taas::TripIDRequestMoreTime();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::TripIDRequestMoreTime::InitAsDefaultInstance();
}

void InitDefaultsTripIDRequestMoreTime() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTripIDRequestMoreTimeImpl);
}

void InitDefaultsTripIDRequestMoreTimeRespImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_TVF_5fTo_5fDXP_5finfo_2eproto::InitDefaults__ApiVersion();
  {
    void* ptr = &::ford::av::taas::_TripIDRequestMoreTimeResp_default_instance_;
    new (ptr) ::ford::av::taas::TripIDRequestMoreTimeResp();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::TripIDRequestMoreTimeResp::InitAsDefaultInstance();
}

void InitDefaultsTripIDRequestMoreTimeResp() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsTripIDRequestMoreTimeRespImpl);
}

void InitDefaultsPublishArrivalImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_TVF_5fTo_5fDXP_5finfo_2eproto::InitDefaults__ApiVersion();
  {
    void* ptr = &::ford::av::taas::_PublishArrival_default_instance_;
    new (ptr) ::ford::av::taas::PublishArrival();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::PublishArrival::InitAsDefaultInstance();
}

void InitDefaultsPublishArrival() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPublishArrivalImpl);
}

void InitDefaultsPublishLingerImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_TVF_5fTo_5fDXP_5finfo_2eproto::InitDefaults__ApiVersion();
  {
    void* ptr = &::ford::av::taas::_PublishLinger_default_instance_;
    new (ptr) ::ford::av::taas::PublishLinger();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::PublishLinger::InitAsDefaultInstance();
}

void InitDefaultsPublishLinger() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPublishLingerImpl);
}

void InitDefaultsPublishGoButtonStatusImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_TVF_5fTo_5fDXP_5finfo_2eproto::InitDefaults__ApiVersion();
  {
    void* ptr = &::ford::av::taas::_PublishGoButtonStatus_default_instance_;
    new (ptr) ::ford::av::taas::PublishGoButtonStatus();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::PublishGoButtonStatus::InitAsDefaultInstance();
}

void InitDefaultsPublishGoButtonStatus() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPublishGoButtonStatusImpl);
}

void InitDefaultsPublishOnboardingInfo_TripOnboardInfo_PickupLocationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ford::av::taas::_PublishOnboardingInfo_TripOnboardInfo_PickupLocation_default_instance_;
    new (ptr) ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation::InitAsDefaultInstance();
}

void InitDefaultsPublishOnboardingInfo_TripOnboardInfo_PickupLocation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPublishOnboardingInfo_TripOnboardInfo_PickupLocationImpl);
}

void InitDefaultsPublishOnboardingInfo_TripOnboardInfo_DropoffLocationImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ford::av::taas::_PublishOnboardingInfo_TripOnboardInfo_DropoffLocation_default_instance_;
    new (ptr) ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::InitAsDefaultInstance();
}

void InitDefaultsPublishOnboardingInfo_TripOnboardInfo_DropoffLocation() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPublishOnboardingInfo_TripOnboardInfo_DropoffLocationImpl);
}

void InitDefaultsPublishOnboardingInfo_TripOnboardInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishOnboardingInfo_TripOnboardInfo_PickupLocation();
  protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishOnboardingInfo_TripOnboardInfo_DropoffLocation();
  {
    void* ptr = &::ford::av::taas::_PublishOnboardingInfo_TripOnboardInfo_default_instance_;
    new (ptr) ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo::InitAsDefaultInstance();
}

void InitDefaultsPublishOnboardingInfo_TripOnboardInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPublishOnboardingInfo_TripOnboardInfoImpl);
}

void InitDefaultsPublishOnboardingInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_TVF_5fTo_5fDXP_5finfo_2eproto::InitDefaults__ApiVersion();
  protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishOnboardingInfo_TripOnboardInfo();
  {
    void* ptr = &::ford::av::taas::_PublishOnboardingInfo_default_instance_;
    new (ptr) ::ford::av::taas::PublishOnboardingInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::PublishOnboardingInfo::InitAsDefaultInstance();
}

void InitDefaultsPublishOnboardingInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPublishOnboardingInfoImpl);
}

void InitDefaultsPublishMrcImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_TVF_5fTo_5fDXP_5finfo_2eproto::InitDefaults__ApiVersion();
  {
    void* ptr = &::ford::av::taas::_PublishMrc_default_instance_;
    new (ptr) ::ford::av::taas::PublishMrc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::PublishMrc::InitAsDefaultInstance();
}

void InitDefaultsPublishMrc() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPublishMrcImpl);
}

void InitDefaultsPublishDriveUpdatesImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_TVF_5fTo_5fDXP_5finfo_2eproto::InitDefaults__ApiVersion();
  {
    void* ptr = &::ford::av::taas::_PublishDriveUpdates_default_instance_;
    new (ptr) ::ford::av::taas::PublishDriveUpdates();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::PublishDriveUpdates::InitAsDefaultInstance();
}

void InitDefaultsPublishDriveUpdates() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPublishDriveUpdatesImpl);
}

void InitDefaultsPublishOffboardingTripsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_TVF_5fTo_5fDXP_5finfo_2eproto::InitDefaults__ApiVersion();
  {
    void* ptr = &::ford::av::taas::_PublishOffboardingTrips_default_instance_;
    new (ptr) ::ford::av::taas::PublishOffboardingTrips();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::PublishOffboardingTrips::InitAsDefaultInstance();
}

void InitDefaultsPublishOffboardingTrips() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPublishOffboardingTripsImpl);
}

void InitDefaultsPublishActiveTripInfo_TripActiveInfo_DropOffGPSImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::ford::av::taas::_PublishActiveTripInfo_TripActiveInfo_DropOffGPS_default_instance_;
    new (ptr) ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS::InitAsDefaultInstance();
}

void InitDefaultsPublishActiveTripInfo_TripActiveInfo_DropOffGPS() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPublishActiveTripInfo_TripActiveInfo_DropOffGPSImpl);
}

void InitDefaultsPublishActiveTripInfo_TripActiveInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishActiveTripInfo_TripActiveInfo_DropOffGPS();
  {
    void* ptr = &::ford::av::taas::_PublishActiveTripInfo_TripActiveInfo_default_instance_;
    new (ptr) ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo::InitAsDefaultInstance();
}

void InitDefaultsPublishActiveTripInfo_TripActiveInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPublishActiveTripInfo_TripActiveInfoImpl);
}

void InitDefaultsPublishActiveTripInfoImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_TVF_5fTo_5fDXP_5finfo_2eproto::InitDefaults__ApiVersion();
  protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishActiveTripInfo_TripActiveInfo();
  {
    void* ptr = &::ford::av::taas::_PublishActiveTripInfo_default_instance_;
    new (ptr) ::ford::av::taas::PublishActiveTripInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ford::av::taas::PublishActiveTripInfo::InitAsDefaultInstance();
}

void InitDefaultsPublishActiveTripInfo() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsPublishActiveTripInfoImpl);
}

::google::protobuf::Metadata file_level_metadata[23];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[11];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::CancelPullover, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::CancelPullover, __api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::CancelPullover, cancel_pullover_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::CancelPulloverResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::CancelPulloverResp, __api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::CancelPulloverResp, cancel_pullover_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::GoAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::GoAck, __api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::GoAck, trip_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::GoAckResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::GoAckResp, __api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::GoAckResp, go_ack_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PassengerPullover, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PassengerPullover, __api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PassengerPullover, passenger_pullover_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PassengerPulloverResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PassengerPulloverResp, __api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PassengerPulloverResp, passenger_pullover_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::NewPassengerCount, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::NewPassengerCount, __api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::NewPassengerCount, trip_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::NewPassengerCount, pass_count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::NewPassengerCountResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::NewPassengerCountResp, __api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::NewPassengerCountResp, pass_count_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::TripIDRequestMoreTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::TripIDRequestMoreTime, __api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::TripIDRequestMoreTime, trip_id_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::TripIDRequestMoreTimeResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::TripIDRequestMoreTimeResp, __api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::TripIDRequestMoreTimeResp, more_time_status_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishArrival, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishArrival, __api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishArrival, should_disp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishArrival, curbside_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishLinger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishLinger, __api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishLinger, linger_rem_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishLinger, linger_exc_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishLinger, can_extend_linger_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishLinger, emphatic_leave_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishGoButtonStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishGoButtonStatus, __api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishGoButtonStatus, go_button_enable_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation, pickup_latitude_degree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation, pickup_latitude_minute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation, pickup_latitude_mmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation, pickup_latitiude_orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation, pickup_longitude_degree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation, pickup_longitude_minute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation, pickup_longitude_mmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation, pickup_longitude_orientation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation, dropoff_latitude_degree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation, dropoff_latitude_minute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation, dropoff_latitude_mmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation, dropoff_latitiude_orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation, dropoff_longitude_degree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation, dropoff_longitude_minute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation, dropoff_longitude_mmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation, dropoff_longitude_orientation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo, tripid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo, possibly_present_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo, can_update_passengers_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo, exp_num_pass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo, pickup_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo, pickup_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo, dropoff_location_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo, dropoff_name_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo, __api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo, trip_onboard_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOnboardingInfo, can_update_passengers_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishMrc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishMrc, __api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishMrc, fault_description_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishMrc, completed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishMrc, recoverable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishMrc, doors_open_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishMrc, leo_stop_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishMrc, pes_state_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishMrc, cloud_stop_active_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishMrc, convenience_pullover_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishMrc, liftgate_open_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishDriveUpdates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishDriveUpdates, __api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishDriveUpdates, arrival_imminent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishDriveUpdates, eta_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishDriveUpdates, stop_location_updated_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOffboardingTrips, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOffboardingTrips, __api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishOffboardingTrips, trip_ids_offboarding_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS, drop_off_latitude_degree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS, drop_off_latitude_minute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS, drop_off_latitude_mmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS, drop_off_latitiude_orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS, drop_off_longitude_degree_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS, drop_off_longitude_minute_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS, drop_off_longitude_mmin_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS, drop_off_longitude_orientation_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishActiveTripInfo_TripActiveInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishActiveTripInfo_TripActiveInfo, trip_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishActiveTripInfo_TripActiveInfo, drop_off_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishActiveTripInfo_TripActiveInfo, drop_off_gps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishActiveTripInfo_TripActiveInfo, eta_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishActiveTripInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishActiveTripInfo, __api_version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ford::av::taas::PublishActiveTripInfo, trip_active_info_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ford::av::taas::CancelPullover)},
  { 7, -1, sizeof(::ford::av::taas::CancelPulloverResp)},
  { 14, -1, sizeof(::ford::av::taas::GoAck)},
  { 21, -1, sizeof(::ford::av::taas::GoAckResp)},
  { 28, -1, sizeof(::ford::av::taas::PassengerPullover)},
  { 35, -1, sizeof(::ford::av::taas::PassengerPulloverResp)},
  { 42, -1, sizeof(::ford::av::taas::NewPassengerCount)},
  { 50, -1, sizeof(::ford::av::taas::NewPassengerCountResp)},
  { 57, -1, sizeof(::ford::av::taas::TripIDRequestMoreTime)},
  { 64, -1, sizeof(::ford::av::taas::TripIDRequestMoreTimeResp)},
  { 71, -1, sizeof(::ford::av::taas::PublishArrival)},
  { 79, -1, sizeof(::ford::av::taas::PublishLinger)},
  { 89, -1, sizeof(::ford::av::taas::PublishGoButtonStatus)},
  { 96, -1, sizeof(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation)},
  { 109, -1, sizeof(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation)},
  { 122, -1, sizeof(::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo)},
  { 135, -1, sizeof(::ford::av::taas::PublishOnboardingInfo)},
  { 143, -1, sizeof(::ford::av::taas::PublishMrc)},
  { 158, -1, sizeof(::ford::av::taas::PublishDriveUpdates)},
  { 167, -1, sizeof(::ford::av::taas::PublishOffboardingTrips)},
  { 174, -1, sizeof(::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS)},
  { 187, -1, sizeof(::ford::av::taas::PublishActiveTripInfo_TripActiveInfo)},
  { 196, -1, sizeof(::ford::av::taas::PublishActiveTripInfo)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_CancelPullover_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_CancelPulloverResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_GoAck_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_GoAckResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_PassengerPullover_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_PassengerPulloverResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_NewPassengerCount_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_NewPassengerCountResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_TripIDRequestMoreTime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_TripIDRequestMoreTimeResp_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_PublishArrival_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_PublishLinger_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_PublishGoButtonStatus_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_PublishOnboardingInfo_TripOnboardInfo_PickupLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_PublishOnboardingInfo_TripOnboardInfo_DropoffLocation_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_PublishOnboardingInfo_TripOnboardInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_PublishOnboardingInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_PublishMrc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_PublishDriveUpdates_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_PublishOffboardingTrips_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_PublishActiveTripInfo_TripActiveInfo_DropOffGPS_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_PublishActiveTripInfo_TripActiveInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::ford::av::taas::_PublishActiveTripInfo_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "TVF_To_DXP.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 23);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\020TVF_To_DXP.proto\022\014ford.av.taas\032\025TVF_To"
      "_DXP_info.proto\"\\\n\016CancelPullover\0221\n\r__a"
      "pi_version\030\001 \001(\0132\032.ford.av.taas.__ApiVer"
      "sion\022\027\n\017cancel_pullover\030\002 \001(\010\"\214\002\n\022Cancel"
      "PulloverResp\0221\n\r__api_version\030\001 \001(\0132\032.fo"
      "rd.av.taas.__ApiVersion\022U\n\026cancel_pullov"
      "er_status\030\002 \001(\01625.ford.av.taas.CancelPul"
      "loverResp.PulloverCancelStatus\"l\n\024Pullov"
      "erCancelStatus\022\030\n\024PULLOVER_CANCEL_NULL\020\000"
      "\022\034\n\030PULLOVER_CANCEL_DECLINED\020\001\022\034\n\030PULLOV"
      "ER_CANCEL_ACCEPTED\020\002\"K\n\005GoAck\0221\n\r__api_v"
      "ersion\030\001 \001(\0132\032.ford.av.taas.__ApiVersion"
      "\022\017\n\007trip_id\030\002 \001(\014\"\233\002\n\tGoAckResp\0221\n\r__api"
      "_version\030\001 \001(\0132\032.ford.av.taas.__ApiVersi"
      "on\022>\n\rgo_ack_status\030\002 \001(\0162\'.ford.av.taas"
      ".GoAckResp.GoACKRespStatus\"\232\001\n\017GoACKResp"
      "Status\022\024\n\020GO_DECLINED_NULL\020\000\022\034\n\030GO_DECLI"
      "NED_AWAITING_VDS\020\001\022\'\n#GO_DECLINED_AWAITI"
      "NG_VDS_DOORS_OPEN\020\002\022\032\n\026GO_DECLINED_DOORS"
      "_OPEN\020\003\022\016\n\nGO_ENABLED\020\004\"b\n\021PassengerPull"
      "over\0221\n\r__api_version\030\001 \001(\0132\032.ford.av.ta"
      "as.__ApiVersion\022\032\n\022passenger_pullover\030\002 "
      "\001(\010\"\364\001\n\025PassengerPulloverResp\0221\n\r__api_v"
      "ersion\030\001 \001(\0132\032.ford.av.taas.__ApiVersion"
      "\022U\n\031passenger_pullover_status\030\002 \001(\01622.fo"
      "rd.av.taas.PassengerPulloverResp.Pullove"
      "rStatus\"Q\n\016PulloverStatus\022\021\n\rPULLOVER_NU"
      "LL\020\000\022\025\n\021PULLOVER_DECLINED\020\001\022\025\n\021PULLOVER_"
      "ACCEPTED\020\002\"k\n\021NewPassengerCount\0221\n\r__api"
      "_version\030\001 \001(\0132\032.ford.av.taas.__ApiVersi"
      "on\022\017\n\007trip_id\030\002 \001(\014\022\022\n\npass_count\030\003 \001(\r\""
      "\360\001\n\025NewPassengerCountResp\0221\n\r__api_versi"
      "on\030\001 \001(\0132\032.ford.av.taas.__ApiVersion\022N\n\021"
      "pass_count_status\030\002 \001(\01623.ford.av.taas.N"
      "ewPassengerCountResp.PassCountStatus\"T\n\017"
      "PassCountStatus\022\023\n\017PASS_COUNT_NULL\020\000\022\024\n\020"
      "PASS_COUNT_ERROR\020\001\022\026\n\022PASS_COUNT_CHANGED"
      "\020\002\"[\n\025TripIDRequestMoreTime\0221\n\r__api_ver"
      "sion\030\001 \001(\0132\032.ford.av.taas.__ApiVersion\022\017"
      "\n\007trip_id\030\002 \001(\014\"\205\002\n\031TripIDRequestMoreTim"
      "eResp\0221\n\r__api_version\030\001 \001(\0132\032.ford.av.t"
      "aas.__ApiVersion\022U\n\020more_time_status\030\002 \001"
      "(\0162;.ford.av.taas.TripIDRequestMoreTimeR"
      "esp.LingerRequestStatus\"^\n\023LingerRequest"
      "Status\022\027\n\023TIME_EXTENSION_NULL\020\000\022\033\n\027TIME_"
      "EXTENSION_DECLINED\020\001\022\021\n\rTIME_EXTENDED\020\002\""
      "\205\002\n\016PublishArrival\0221\n\r__api_version\030\001 \001("
      "\0132\032.ford.av.taas.__ApiVersion\022\023\n\013should_"
      "disp\030\002 \001(\010\0227\n\010curbside\030\003 \001(\0162%.ford.av.t"
      "aas.PublishArrival.CurbSide\"r\n\010CurbSide\022"
      "\022\n\016CURB_SIDE_NULL\020\000\022\022\n\016CURB_SIDE_LEFT\020\001\022"
      "\023\n\017CURB_SIDE_RIGHT\020\002\022\022\n\016CURB_SIDE_BOTH\020\003"
      "\022\025\n\021CURB_SIDE_NEITHER\020\004\"\235\001\n\rPublishLinge"
      "r\0221\n\r__api_version\030\001 \001(\0132\032.ford.av.taas."
      "__ApiVersion\022\022\n\nlinger_rem\030\002 \001(\r\022\022\n\nling"
      "er_exc\030\003 \001(\010\022\031\n\021can_extend_linger\030\004 \001(\010\022"
      "\026\n\016emphatic_leave\030\005 \001(\010\"\264\002\n\025PublishGoBut"
      "tonStatus\0221\n\r__api_version\030\001 \001(\0132\032.ford."
      "av.taas.__ApiVersion\022L\n\020go_button_enable"
      "\030\002 \001(\01622.ford.av.taas.PublishGoButtonSta"
      "tus.GoButtonStatus\"\231\001\n\016GoButtonStatus\022\024\n"
      "\020GO_DISABLED_NULL\020\000\022\034\n\030GO_DISABLED_AWAIT"
      "ING_VDS\020\001\022\'\n#GO_DISABLED_AWAITING_VDS_DO"
      "ORS_OPEN\020\002\022\032\n\026GO_DISABLED_DOORS_OPEN\020\003\022\016"
      "\n\nGO_ENABLED\020\004\"\330\010\n\025PublishOnboardingInfo"
      "\0221\n\r__api_version\030\001 \001(\0132\032.ford.av.taas._"
      "_ApiVersion\022N\n\021Trip_Onboard_Info\030\002 \003(\01323"
      ".ford.av.taas.PublishOnboardingInfo.Trip"
      "OnboardInfo\022\035\n\025can_update_passengers\030\003 \001"
      "(\010\032\234\007\n\017TripOnboardInfo\022\016\n\006TripID\030\001 \001(\014\022\030"
      "\n\020possibly_present\030\002 \001(\010\022\035\n\025can_update_p"
      "assengers\030\003 \001(\010\022\024\n\014exp_num_pass\030\004 \001(\r\022\023\n"
      "\013pickup_name\030\005 \001(\t\022[\n\017pickup_location\030\006 "
      "\001(\0132B.ford.av.taas.PublishOnboardingInfo"
      ".TripOnboardInfo.PickupLocation\022]\n\020dropo"
      "ff_location\030\007 \001(\0132C.ford.av.taas.Publish"
      "OnboardingInfo.TripOnboardInfo.DropoffLo"
      "cation\022\024\n\014dropoff_name\030\010 \001(\t\032\233\002\n\016PickupL"
      "ocation\022\036\n\026pickup_latitude_degree\030\001 \001(\r\022"
      "\036\n\026pickup_latitude_minute\030\002 \001(\r\022\034\n\024picku"
      "p_latitude_mmin\030\003 \001(\r\022$\n\034pickup_latitiud"
      "e_orientation\030\004 \001(\010\022\037\n\027pickup_longitude_"
      "degree\030\005 \001(\r\022\037\n\027pickup_longitude_minute\030"
      "\006 \001(\r\022\035\n\025pickup_longitude_mmin\030\007 \001(\r\022$\n\034"
      "pickup_longitude_orientation\030\010 \001(\010\032\244\002\n\017D"
      "ropoffLocation\022\037\n\027dropoff_latitude_degre"
      "e\030\001 \001(\r\022\037\n\027dropoff_latitude_minute\030\002 \001(\r"
      "\022\035\n\025dropoff_latitude_mmin\030\003 \001(\r\022%\n\035dropo"
      "ff_latitiude_orientation\030\004 \001(\010\022 \n\030dropof"
      "f_longitude_degree\030\005 \001(\r\022 \n\030dropoff_long"
      "itude_minute\030\006 \001(\r\022\036\n\026dropoff_longitude_"
      "mmin\030\007 \001(\r\022%\n\035dropoff_longitude_orientat"
      "ion\030\010 \001(\010\"\353\004\n\nPublishMrc\0221\n\r__api_versio"
      "n\030\001 \001(\0132\032.ford.av.taas.__ApiVersion\022B\n\021f"
      "ault_description\030\002 \001(\0162\'.ford.av.taas.Pu"
      "blishMrc.MrcDescription\022\021\n\tcompleted\030\003 \001"
      "(\010\0229\n\013recoverable\030\004 \001(\0162$.ford.av.taas.P"
      "ublishMrc.Recoverable\022\022\n\ndoors_open\030\005 \001("
      "\010\022\027\n\017leo_stop_active\030\006 \001(\010\0224\n\tpes_state\030"
      "\007 \001(\0162!.ford.av.taas.PublishMrc.PesState"
      "\022\031\n\021cloud_stop_active\030\010 \001(\010\022J\n\024convenien"
      "ce_pullover\030\t \001(\0162,.ford.av.taas.Publish"
      "Mrc.ConveniencePullover\022\025\n\rliftgate_open"
      "\030\n \001(\010\"0\n\016MrcDescription\022\036\n\032FAULT_DESCRI"
      "PTION_TBD_FMES\020\000\"\'\n\013Recoverable\022\030\n\024RECOV"
      "ERABLE_TBD_FMES\020\000\"\"\n\010PesState\022\026\n\022PES_STA"
      "TE_TBD_FMES\020\000\"8\n\023ConveniencePullover\022!\n\035"
      "CONVENIENCE_PULLOVER_TBD_FMES\020\000\"\216\001\n\023Publ"
      "ishDriveUpdates\0221\n\r__api_version\030\001 \001(\0132\032"
      ".ford.av.taas.__ApiVersion\022\030\n\020arrival_im"
      "minent\030\002 \001(\010\022\013\n\003eta\030\003 \001(\r\022\035\n\025stop_locati"
      "on_updated\030\004 \001(\010\"j\n\027PublishOffboardingTr"
      "ips\0221\n\r__api_version\030\001 \001(\0132\032.ford.av.taa"
      "s.__ApiVersion\022\034\n\024trip_ids_offboarding\030\002"
      " \003(\014\"\337\004\n\025PublishActiveTripInfo\0221\n\r__api_"
      "version\030\001 \001(\0132\032.ford.av.taas.__ApiVersio"
      "n\022L\n\020trip_active_info\030\002 \003(\01322.ford.av.ta"
      "as.PublishActiveTripInfo.TripActiveInfo\032"
      "\304\003\n\016TripActiveInfo\022\017\n\007trip_id\030\001 \001(\014\022\025\n\rd"
      "rop_off_name\030\002 \001(\t\022S\n\014drop_off_GPS\030\003 \001(\013"
      "2=.ford.av.taas.PublishActiveTripInfo.Tr"
      "ipActiveInfo.DropOffGPS\022\013\n\003eta\030\004 \001(\r\032\247\002\n"
      "\nDropOffGPS\022 \n\030drop_off_latitude_degree\030"
      "\001 \001(\r\022 \n\030drop_off_latitude_minute\030\002 \001(\r\022"
      "\036\n\026drop_off_latitude_mmin\030\003 \001(\r\022&\n\036drop_"
      "off_latitiude_orientation\030\004 \001(\010\022!\n\031drop_"
      "off_longitude_degree\030\005 \001(\r\022!\n\031drop_off_l"
      "ongitude_minute\030\006 \001(\r\022\037\n\027drop_off_longit"
      "ude_mmin\030\007 \001(\r\022&\n\036drop_off_longitude_ori"
      "entation\030\010 \001(\010P\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 5184);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TVF_To_DXP.proto", &protobuf_RegisterTypes);
  ::protobuf_TVF_5fTo_5fDXP_5finfo_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_TVF_5fTo_5fDXP_2eproto
namespace ford {
namespace av {
namespace taas {
const ::google::protobuf::EnumDescriptor* CancelPulloverResp_PulloverCancelStatus_descriptor() {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TVF_5fTo_5fDXP_2eproto::file_level_enum_descriptors[0];
}
bool CancelPulloverResp_PulloverCancelStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CancelPulloverResp_PulloverCancelStatus CancelPulloverResp::PULLOVER_CANCEL_NULL;
const CancelPulloverResp_PulloverCancelStatus CancelPulloverResp::PULLOVER_CANCEL_DECLINED;
const CancelPulloverResp_PulloverCancelStatus CancelPulloverResp::PULLOVER_CANCEL_ACCEPTED;
const CancelPulloverResp_PulloverCancelStatus CancelPulloverResp::PulloverCancelStatus_MIN;
const CancelPulloverResp_PulloverCancelStatus CancelPulloverResp::PulloverCancelStatus_MAX;
const int CancelPulloverResp::PulloverCancelStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* GoAckResp_GoACKRespStatus_descriptor() {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TVF_5fTo_5fDXP_2eproto::file_level_enum_descriptors[1];
}
bool GoAckResp_GoACKRespStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const GoAckResp_GoACKRespStatus GoAckResp::GO_DECLINED_NULL;
const GoAckResp_GoACKRespStatus GoAckResp::GO_DECLINED_AWAITING_VDS;
const GoAckResp_GoACKRespStatus GoAckResp::GO_DECLINED_AWAITING_VDS_DOORS_OPEN;
const GoAckResp_GoACKRespStatus GoAckResp::GO_DECLINED_DOORS_OPEN;
const GoAckResp_GoACKRespStatus GoAckResp::GO_ENABLED;
const GoAckResp_GoACKRespStatus GoAckResp::GoACKRespStatus_MIN;
const GoAckResp_GoACKRespStatus GoAckResp::GoACKRespStatus_MAX;
const int GoAckResp::GoACKRespStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PassengerPulloverResp_PulloverStatus_descriptor() {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TVF_5fTo_5fDXP_2eproto::file_level_enum_descriptors[2];
}
bool PassengerPulloverResp_PulloverStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PassengerPulloverResp_PulloverStatus PassengerPulloverResp::PULLOVER_NULL;
const PassengerPulloverResp_PulloverStatus PassengerPulloverResp::PULLOVER_DECLINED;
const PassengerPulloverResp_PulloverStatus PassengerPulloverResp::PULLOVER_ACCEPTED;
const PassengerPulloverResp_PulloverStatus PassengerPulloverResp::PulloverStatus_MIN;
const PassengerPulloverResp_PulloverStatus PassengerPulloverResp::PulloverStatus_MAX;
const int PassengerPulloverResp::PulloverStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* NewPassengerCountResp_PassCountStatus_descriptor() {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TVF_5fTo_5fDXP_2eproto::file_level_enum_descriptors[3];
}
bool NewPassengerCountResp_PassCountStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const NewPassengerCountResp_PassCountStatus NewPassengerCountResp::PASS_COUNT_NULL;
const NewPassengerCountResp_PassCountStatus NewPassengerCountResp::PASS_COUNT_ERROR;
const NewPassengerCountResp_PassCountStatus NewPassengerCountResp::PASS_COUNT_CHANGED;
const NewPassengerCountResp_PassCountStatus NewPassengerCountResp::PassCountStatus_MIN;
const NewPassengerCountResp_PassCountStatus NewPassengerCountResp::PassCountStatus_MAX;
const int NewPassengerCountResp::PassCountStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* TripIDRequestMoreTimeResp_LingerRequestStatus_descriptor() {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TVF_5fTo_5fDXP_2eproto::file_level_enum_descriptors[4];
}
bool TripIDRequestMoreTimeResp_LingerRequestStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TripIDRequestMoreTimeResp_LingerRequestStatus TripIDRequestMoreTimeResp::TIME_EXTENSION_NULL;
const TripIDRequestMoreTimeResp_LingerRequestStatus TripIDRequestMoreTimeResp::TIME_EXTENSION_DECLINED;
const TripIDRequestMoreTimeResp_LingerRequestStatus TripIDRequestMoreTimeResp::TIME_EXTENDED;
const TripIDRequestMoreTimeResp_LingerRequestStatus TripIDRequestMoreTimeResp::LingerRequestStatus_MIN;
const TripIDRequestMoreTimeResp_LingerRequestStatus TripIDRequestMoreTimeResp::LingerRequestStatus_MAX;
const int TripIDRequestMoreTimeResp::LingerRequestStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PublishArrival_CurbSide_descriptor() {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TVF_5fTo_5fDXP_2eproto::file_level_enum_descriptors[5];
}
bool PublishArrival_CurbSide_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PublishArrival_CurbSide PublishArrival::CURB_SIDE_NULL;
const PublishArrival_CurbSide PublishArrival::CURB_SIDE_LEFT;
const PublishArrival_CurbSide PublishArrival::CURB_SIDE_RIGHT;
const PublishArrival_CurbSide PublishArrival::CURB_SIDE_BOTH;
const PublishArrival_CurbSide PublishArrival::CURB_SIDE_NEITHER;
const PublishArrival_CurbSide PublishArrival::CurbSide_MIN;
const PublishArrival_CurbSide PublishArrival::CurbSide_MAX;
const int PublishArrival::CurbSide_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PublishGoButtonStatus_GoButtonStatus_descriptor() {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TVF_5fTo_5fDXP_2eproto::file_level_enum_descriptors[6];
}
bool PublishGoButtonStatus_GoButtonStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PublishGoButtonStatus_GoButtonStatus PublishGoButtonStatus::GO_DISABLED_NULL;
const PublishGoButtonStatus_GoButtonStatus PublishGoButtonStatus::GO_DISABLED_AWAITING_VDS;
const PublishGoButtonStatus_GoButtonStatus PublishGoButtonStatus::GO_DISABLED_AWAITING_VDS_DOORS_OPEN;
const PublishGoButtonStatus_GoButtonStatus PublishGoButtonStatus::GO_DISABLED_DOORS_OPEN;
const PublishGoButtonStatus_GoButtonStatus PublishGoButtonStatus::GO_ENABLED;
const PublishGoButtonStatus_GoButtonStatus PublishGoButtonStatus::GoButtonStatus_MIN;
const PublishGoButtonStatus_GoButtonStatus PublishGoButtonStatus::GoButtonStatus_MAX;
const int PublishGoButtonStatus::GoButtonStatus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PublishMrc_MrcDescription_descriptor() {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TVF_5fTo_5fDXP_2eproto::file_level_enum_descriptors[7];
}
bool PublishMrc_MrcDescription_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PublishMrc_MrcDescription PublishMrc::FAULT_DESCRIPTION_TBD_FMES;
const PublishMrc_MrcDescription PublishMrc::MrcDescription_MIN;
const PublishMrc_MrcDescription PublishMrc::MrcDescription_MAX;
const int PublishMrc::MrcDescription_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PublishMrc_Recoverable_descriptor() {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TVF_5fTo_5fDXP_2eproto::file_level_enum_descriptors[8];
}
bool PublishMrc_Recoverable_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PublishMrc_Recoverable PublishMrc::RECOVERABLE_TBD_FMES;
const PublishMrc_Recoverable PublishMrc::Recoverable_MIN;
const PublishMrc_Recoverable PublishMrc::Recoverable_MAX;
const int PublishMrc::Recoverable_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PublishMrc_PesState_descriptor() {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TVF_5fTo_5fDXP_2eproto::file_level_enum_descriptors[9];
}
bool PublishMrc_PesState_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PublishMrc_PesState PublishMrc::PES_STATE_TBD_FMES;
const PublishMrc_PesState PublishMrc::PesState_MIN;
const PublishMrc_PesState PublishMrc::PesState_MAX;
const int PublishMrc::PesState_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* PublishMrc_ConveniencePullover_descriptor() {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_TVF_5fTo_5fDXP_2eproto::file_level_enum_descriptors[10];
}
bool PublishMrc_ConveniencePullover_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PublishMrc_ConveniencePullover PublishMrc::CONVENIENCE_PULLOVER_TBD_FMES;
const PublishMrc_ConveniencePullover PublishMrc::ConveniencePullover_MIN;
const PublishMrc_ConveniencePullover PublishMrc::ConveniencePullover_MAX;
const int PublishMrc::ConveniencePullover_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CancelPullover::InitAsDefaultInstance() {
  ::ford::av::taas::_CancelPullover_default_instance_._instance.get_mutable()->__api_version_ = const_cast< ::ford::av::taas::__ApiVersion*>(
      ::ford::av::taas::__ApiVersion::internal_default_instance());
}
void CancelPullover::clear___api_version() {
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CancelPullover::kApiVersionFieldNumber;
const int CancelPullover::kCancelPulloverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CancelPullover::CancelPullover()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsCancelPullover();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.CancelPullover)
}
CancelPullover::CancelPullover(const CancelPullover& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has___api_version()) {
    __api_version_ = new ::ford::av::taas::__ApiVersion(*from.__api_version_);
  } else {
    __api_version_ = NULL;
  }
  cancel_pullover_ = from.cancel_pullover_;
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.CancelPullover)
}

void CancelPullover::SharedCtor() {
  ::memset(&__api_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cancel_pullover_) -
      reinterpret_cast<char*>(&__api_version_)) + sizeof(cancel_pullover_));
  _cached_size_ = 0;
}

CancelPullover::~CancelPullover() {
  // @@protoc_insertion_point(destructor:ford.av.taas.CancelPullover)
  SharedDtor();
}

void CancelPullover::SharedDtor() {
  if (this != internal_default_instance()) delete __api_version_;
}

void CancelPullover::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelPullover::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CancelPullover& CancelPullover::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsCancelPullover();
  return *internal_default_instance();
}

CancelPullover* CancelPullover::New(::google::protobuf::Arena* arena) const {
  CancelPullover* n = new CancelPullover;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CancelPullover::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.CancelPullover)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
  cancel_pullover_ = false;
  _internal_metadata_.Clear();
}

bool CancelPullover::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.CancelPullover)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ford.av.taas.__ApiVersion __api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable___api_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool cancel_pullover = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cancel_pullover_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.CancelPullover)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.CancelPullover)
  return false;
#undef DO_
}

void CancelPullover::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.CancelPullover)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->__api_version_, output);
  }

  // bool cancel_pullover = 2;
  if (this->cancel_pullover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->cancel_pullover(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.CancelPullover)
}

::google::protobuf::uint8* CancelPullover::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.CancelPullover)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->__api_version_, deterministic, target);
  }

  // bool cancel_pullover = 2;
  if (this->cancel_pullover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->cancel_pullover(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.CancelPullover)
  return target;
}

size_t CancelPullover::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.CancelPullover)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->__api_version_);
  }

  // bool cancel_pullover = 2;
  if (this->cancel_pullover() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelPullover::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.CancelPullover)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelPullover* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CancelPullover>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.CancelPullover)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.CancelPullover)
    MergeFrom(*source);
  }
}

void CancelPullover::MergeFrom(const CancelPullover& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.CancelPullover)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has___api_version()) {
    mutable___api_version()->::ford::av::taas::__ApiVersion::MergeFrom(from.__api_version());
  }
  if (from.cancel_pullover() != 0) {
    set_cancel_pullover(from.cancel_pullover());
  }
}

void CancelPullover::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.CancelPullover)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelPullover::CopyFrom(const CancelPullover& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.CancelPullover)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelPullover::IsInitialized() const {
  return true;
}

void CancelPullover::Swap(CancelPullover* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CancelPullover::InternalSwap(CancelPullover* other) {
  using std::swap;
  swap(__api_version_, other->__api_version_);
  swap(cancel_pullover_, other->cancel_pullover_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CancelPullover::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CancelPulloverResp::InitAsDefaultInstance() {
  ::ford::av::taas::_CancelPulloverResp_default_instance_._instance.get_mutable()->__api_version_ = const_cast< ::ford::av::taas::__ApiVersion*>(
      ::ford::av::taas::__ApiVersion::internal_default_instance());
}
void CancelPulloverResp::clear___api_version() {
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CancelPulloverResp::kApiVersionFieldNumber;
const int CancelPulloverResp::kCancelPulloverStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CancelPulloverResp::CancelPulloverResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsCancelPulloverResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.CancelPulloverResp)
}
CancelPulloverResp::CancelPulloverResp(const CancelPulloverResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has___api_version()) {
    __api_version_ = new ::ford::av::taas::__ApiVersion(*from.__api_version_);
  } else {
    __api_version_ = NULL;
  }
  cancel_pullover_status_ = from.cancel_pullover_status_;
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.CancelPulloverResp)
}

void CancelPulloverResp::SharedCtor() {
  ::memset(&__api_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cancel_pullover_status_) -
      reinterpret_cast<char*>(&__api_version_)) + sizeof(cancel_pullover_status_));
  _cached_size_ = 0;
}

CancelPulloverResp::~CancelPulloverResp() {
  // @@protoc_insertion_point(destructor:ford.av.taas.CancelPulloverResp)
  SharedDtor();
}

void CancelPulloverResp::SharedDtor() {
  if (this != internal_default_instance()) delete __api_version_;
}

void CancelPulloverResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelPulloverResp::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CancelPulloverResp& CancelPulloverResp::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsCancelPulloverResp();
  return *internal_default_instance();
}

CancelPulloverResp* CancelPulloverResp::New(::google::protobuf::Arena* arena) const {
  CancelPulloverResp* n = new CancelPulloverResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CancelPulloverResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.CancelPulloverResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
  cancel_pullover_status_ = 0;
  _internal_metadata_.Clear();
}

bool CancelPulloverResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.CancelPulloverResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ford.av.taas.__ApiVersion __api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable___api_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ford.av.taas.CancelPulloverResp.PulloverCancelStatus cancel_pullover_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_cancel_pullover_status(static_cast< ::ford::av::taas::CancelPulloverResp_PulloverCancelStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.CancelPulloverResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.CancelPulloverResp)
  return false;
#undef DO_
}

void CancelPulloverResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.CancelPulloverResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->__api_version_, output);
  }

  // .ford.av.taas.CancelPulloverResp.PulloverCancelStatus cancel_pullover_status = 2;
  if (this->cancel_pullover_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->cancel_pullover_status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.CancelPulloverResp)
}

::google::protobuf::uint8* CancelPulloverResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.CancelPulloverResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->__api_version_, deterministic, target);
  }

  // .ford.av.taas.CancelPulloverResp.PulloverCancelStatus cancel_pullover_status = 2;
  if (this->cancel_pullover_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->cancel_pullover_status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.CancelPulloverResp)
  return target;
}

size_t CancelPulloverResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.CancelPulloverResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->__api_version_);
  }

  // .ford.av.taas.CancelPulloverResp.PulloverCancelStatus cancel_pullover_status = 2;
  if (this->cancel_pullover_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->cancel_pullover_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelPulloverResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.CancelPulloverResp)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelPulloverResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CancelPulloverResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.CancelPulloverResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.CancelPulloverResp)
    MergeFrom(*source);
  }
}

void CancelPulloverResp::MergeFrom(const CancelPulloverResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.CancelPulloverResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has___api_version()) {
    mutable___api_version()->::ford::av::taas::__ApiVersion::MergeFrom(from.__api_version());
  }
  if (from.cancel_pullover_status() != 0) {
    set_cancel_pullover_status(from.cancel_pullover_status());
  }
}

void CancelPulloverResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.CancelPulloverResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelPulloverResp::CopyFrom(const CancelPulloverResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.CancelPulloverResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelPulloverResp::IsInitialized() const {
  return true;
}

void CancelPulloverResp::Swap(CancelPulloverResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CancelPulloverResp::InternalSwap(CancelPulloverResp* other) {
  using std::swap;
  swap(__api_version_, other->__api_version_);
  swap(cancel_pullover_status_, other->cancel_pullover_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CancelPulloverResp::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GoAck::InitAsDefaultInstance() {
  ::ford::av::taas::_GoAck_default_instance_._instance.get_mutable()->__api_version_ = const_cast< ::ford::av::taas::__ApiVersion*>(
      ::ford::av::taas::__ApiVersion::internal_default_instance());
}
void GoAck::clear___api_version() {
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GoAck::kApiVersionFieldNumber;
const int GoAck::kTripIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GoAck::GoAck()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsGoAck();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.GoAck)
}
GoAck::GoAck(const GoAck& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trip_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trip_id().size() > 0) {
    trip_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trip_id_);
  }
  if (from.has___api_version()) {
    __api_version_ = new ::ford::av::taas::__ApiVersion(*from.__api_version_);
  } else {
    __api_version_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.GoAck)
}

void GoAck::SharedCtor() {
  trip_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  __api_version_ = NULL;
  _cached_size_ = 0;
}

GoAck::~GoAck() {
  // @@protoc_insertion_point(destructor:ford.av.taas.GoAck)
  SharedDtor();
}

void GoAck::SharedDtor() {
  trip_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete __api_version_;
}

void GoAck::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoAck::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GoAck& GoAck::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsGoAck();
  return *internal_default_instance();
}

GoAck* GoAck::New(::google::protobuf::Arena* arena) const {
  GoAck* n = new GoAck;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GoAck::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.GoAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trip_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
  _internal_metadata_.Clear();
}

bool GoAck::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.GoAck)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ford.av.taas.__ApiVersion __api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable___api_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes trip_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trip_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.GoAck)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.GoAck)
  return false;
#undef DO_
}

void GoAck::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.GoAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->__api_version_, output);
  }

  // bytes trip_id = 2;
  if (this->trip_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->trip_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.GoAck)
}

::google::protobuf::uint8* GoAck::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.GoAck)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->__api_version_, deterministic, target);
  }

  // bytes trip_id = 2;
  if (this->trip_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->trip_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.GoAck)
  return target;
}

size_t GoAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.GoAck)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes trip_id = 2;
  if (this->trip_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trip_id());
  }

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->__api_version_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoAck::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.GoAck)
  GOOGLE_DCHECK_NE(&from, this);
  const GoAck* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GoAck>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.GoAck)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.GoAck)
    MergeFrom(*source);
  }
}

void GoAck::MergeFrom(const GoAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.GoAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trip_id().size() > 0) {

    trip_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trip_id_);
  }
  if (from.has___api_version()) {
    mutable___api_version()->::ford::av::taas::__ApiVersion::MergeFrom(from.__api_version());
  }
}

void GoAck::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.GoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoAck::CopyFrom(const GoAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.GoAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoAck::IsInitialized() const {
  return true;
}

void GoAck::Swap(GoAck* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GoAck::InternalSwap(GoAck* other) {
  using std::swap;
  trip_id_.Swap(&other->trip_id_);
  swap(__api_version_, other->__api_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GoAck::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GoAckResp::InitAsDefaultInstance() {
  ::ford::av::taas::_GoAckResp_default_instance_._instance.get_mutable()->__api_version_ = const_cast< ::ford::av::taas::__ApiVersion*>(
      ::ford::av::taas::__ApiVersion::internal_default_instance());
}
void GoAckResp::clear___api_version() {
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GoAckResp::kApiVersionFieldNumber;
const int GoAckResp::kGoAckStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GoAckResp::GoAckResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsGoAckResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.GoAckResp)
}
GoAckResp::GoAckResp(const GoAckResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has___api_version()) {
    __api_version_ = new ::ford::av::taas::__ApiVersion(*from.__api_version_);
  } else {
    __api_version_ = NULL;
  }
  go_ack_status_ = from.go_ack_status_;
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.GoAckResp)
}

void GoAckResp::SharedCtor() {
  ::memset(&__api_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&go_ack_status_) -
      reinterpret_cast<char*>(&__api_version_)) + sizeof(go_ack_status_));
  _cached_size_ = 0;
}

GoAckResp::~GoAckResp() {
  // @@protoc_insertion_point(destructor:ford.av.taas.GoAckResp)
  SharedDtor();
}

void GoAckResp::SharedDtor() {
  if (this != internal_default_instance()) delete __api_version_;
}

void GoAckResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GoAckResp::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GoAckResp& GoAckResp::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsGoAckResp();
  return *internal_default_instance();
}

GoAckResp* GoAckResp::New(::google::protobuf::Arena* arena) const {
  GoAckResp* n = new GoAckResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GoAckResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.GoAckResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
  go_ack_status_ = 0;
  _internal_metadata_.Clear();
}

bool GoAckResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.GoAckResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ford.av.taas.__ApiVersion __api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable___api_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ford.av.taas.GoAckResp.GoACKRespStatus go_ack_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_go_ack_status(static_cast< ::ford::av::taas::GoAckResp_GoACKRespStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.GoAckResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.GoAckResp)
  return false;
#undef DO_
}

void GoAckResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.GoAckResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->__api_version_, output);
  }

  // .ford.av.taas.GoAckResp.GoACKRespStatus go_ack_status = 2;
  if (this->go_ack_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->go_ack_status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.GoAckResp)
}

::google::protobuf::uint8* GoAckResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.GoAckResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->__api_version_, deterministic, target);
  }

  // .ford.av.taas.GoAckResp.GoACKRespStatus go_ack_status = 2;
  if (this->go_ack_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->go_ack_status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.GoAckResp)
  return target;
}

size_t GoAckResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.GoAckResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->__api_version_);
  }

  // .ford.av.taas.GoAckResp.GoACKRespStatus go_ack_status = 2;
  if (this->go_ack_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->go_ack_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GoAckResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.GoAckResp)
  GOOGLE_DCHECK_NE(&from, this);
  const GoAckResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GoAckResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.GoAckResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.GoAckResp)
    MergeFrom(*source);
  }
}

void GoAckResp::MergeFrom(const GoAckResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.GoAckResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has___api_version()) {
    mutable___api_version()->::ford::av::taas::__ApiVersion::MergeFrom(from.__api_version());
  }
  if (from.go_ack_status() != 0) {
    set_go_ack_status(from.go_ack_status());
  }
}

void GoAckResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.GoAckResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GoAckResp::CopyFrom(const GoAckResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.GoAckResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GoAckResp::IsInitialized() const {
  return true;
}

void GoAckResp::Swap(GoAckResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GoAckResp::InternalSwap(GoAckResp* other) {
  using std::swap;
  swap(__api_version_, other->__api_version_);
  swap(go_ack_status_, other->go_ack_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata GoAckResp::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PassengerPullover::InitAsDefaultInstance() {
  ::ford::av::taas::_PassengerPullover_default_instance_._instance.get_mutable()->__api_version_ = const_cast< ::ford::av::taas::__ApiVersion*>(
      ::ford::av::taas::__ApiVersion::internal_default_instance());
}
void PassengerPullover::clear___api_version() {
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PassengerPullover::kApiVersionFieldNumber;
const int PassengerPullover::kPassengerPulloverFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PassengerPullover::PassengerPullover()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPassengerPullover();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.PassengerPullover)
}
PassengerPullover::PassengerPullover(const PassengerPullover& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has___api_version()) {
    __api_version_ = new ::ford::av::taas::__ApiVersion(*from.__api_version_);
  } else {
    __api_version_ = NULL;
  }
  passenger_pullover_ = from.passenger_pullover_;
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.PassengerPullover)
}

void PassengerPullover::SharedCtor() {
  ::memset(&__api_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&passenger_pullover_) -
      reinterpret_cast<char*>(&__api_version_)) + sizeof(passenger_pullover_));
  _cached_size_ = 0;
}

PassengerPullover::~PassengerPullover() {
  // @@protoc_insertion_point(destructor:ford.av.taas.PassengerPullover)
  SharedDtor();
}

void PassengerPullover::SharedDtor() {
  if (this != internal_default_instance()) delete __api_version_;
}

void PassengerPullover::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassengerPullover::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PassengerPullover& PassengerPullover::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPassengerPullover();
  return *internal_default_instance();
}

PassengerPullover* PassengerPullover::New(::google::protobuf::Arena* arena) const {
  PassengerPullover* n = new PassengerPullover;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PassengerPullover::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.PassengerPullover)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
  passenger_pullover_ = false;
  _internal_metadata_.Clear();
}

bool PassengerPullover::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.PassengerPullover)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ford.av.taas.__ApiVersion __api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable___api_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool passenger_pullover = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &passenger_pullover_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.PassengerPullover)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.PassengerPullover)
  return false;
#undef DO_
}

void PassengerPullover::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.PassengerPullover)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->__api_version_, output);
  }

  // bool passenger_pullover = 2;
  if (this->passenger_pullover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->passenger_pullover(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.PassengerPullover)
}

::google::protobuf::uint8* PassengerPullover::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.PassengerPullover)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->__api_version_, deterministic, target);
  }

  // bool passenger_pullover = 2;
  if (this->passenger_pullover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->passenger_pullover(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.PassengerPullover)
  return target;
}

size_t PassengerPullover::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.PassengerPullover)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->__api_version_);
  }

  // bool passenger_pullover = 2;
  if (this->passenger_pullover() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassengerPullover::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.PassengerPullover)
  GOOGLE_DCHECK_NE(&from, this);
  const PassengerPullover* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PassengerPullover>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.PassengerPullover)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.PassengerPullover)
    MergeFrom(*source);
  }
}

void PassengerPullover::MergeFrom(const PassengerPullover& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.PassengerPullover)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has___api_version()) {
    mutable___api_version()->::ford::av::taas::__ApiVersion::MergeFrom(from.__api_version());
  }
  if (from.passenger_pullover() != 0) {
    set_passenger_pullover(from.passenger_pullover());
  }
}

void PassengerPullover::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.PassengerPullover)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassengerPullover::CopyFrom(const PassengerPullover& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.PassengerPullover)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassengerPullover::IsInitialized() const {
  return true;
}

void PassengerPullover::Swap(PassengerPullover* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PassengerPullover::InternalSwap(PassengerPullover* other) {
  using std::swap;
  swap(__api_version_, other->__api_version_);
  swap(passenger_pullover_, other->passenger_pullover_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PassengerPullover::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PassengerPulloverResp::InitAsDefaultInstance() {
  ::ford::av::taas::_PassengerPulloverResp_default_instance_._instance.get_mutable()->__api_version_ = const_cast< ::ford::av::taas::__ApiVersion*>(
      ::ford::av::taas::__ApiVersion::internal_default_instance());
}
void PassengerPulloverResp::clear___api_version() {
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PassengerPulloverResp::kApiVersionFieldNumber;
const int PassengerPulloverResp::kPassengerPulloverStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PassengerPulloverResp::PassengerPulloverResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPassengerPulloverResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.PassengerPulloverResp)
}
PassengerPulloverResp::PassengerPulloverResp(const PassengerPulloverResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has___api_version()) {
    __api_version_ = new ::ford::av::taas::__ApiVersion(*from.__api_version_);
  } else {
    __api_version_ = NULL;
  }
  passenger_pullover_status_ = from.passenger_pullover_status_;
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.PassengerPulloverResp)
}

void PassengerPulloverResp::SharedCtor() {
  ::memset(&__api_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&passenger_pullover_status_) -
      reinterpret_cast<char*>(&__api_version_)) + sizeof(passenger_pullover_status_));
  _cached_size_ = 0;
}

PassengerPulloverResp::~PassengerPulloverResp() {
  // @@protoc_insertion_point(destructor:ford.av.taas.PassengerPulloverResp)
  SharedDtor();
}

void PassengerPulloverResp::SharedDtor() {
  if (this != internal_default_instance()) delete __api_version_;
}

void PassengerPulloverResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassengerPulloverResp::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PassengerPulloverResp& PassengerPulloverResp::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPassengerPulloverResp();
  return *internal_default_instance();
}

PassengerPulloverResp* PassengerPulloverResp::New(::google::protobuf::Arena* arena) const {
  PassengerPulloverResp* n = new PassengerPulloverResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PassengerPulloverResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.PassengerPulloverResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
  passenger_pullover_status_ = 0;
  _internal_metadata_.Clear();
}

bool PassengerPulloverResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.PassengerPulloverResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ford.av.taas.__ApiVersion __api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable___api_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ford.av.taas.PassengerPulloverResp.PulloverStatus passenger_pullover_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_passenger_pullover_status(static_cast< ::ford::av::taas::PassengerPulloverResp_PulloverStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.PassengerPulloverResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.PassengerPulloverResp)
  return false;
#undef DO_
}

void PassengerPulloverResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.PassengerPulloverResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->__api_version_, output);
  }

  // .ford.av.taas.PassengerPulloverResp.PulloverStatus passenger_pullover_status = 2;
  if (this->passenger_pullover_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->passenger_pullover_status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.PassengerPulloverResp)
}

::google::protobuf::uint8* PassengerPulloverResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.PassengerPulloverResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->__api_version_, deterministic, target);
  }

  // .ford.av.taas.PassengerPulloverResp.PulloverStatus passenger_pullover_status = 2;
  if (this->passenger_pullover_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->passenger_pullover_status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.PassengerPulloverResp)
  return target;
}

size_t PassengerPulloverResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.PassengerPulloverResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->__api_version_);
  }

  // .ford.av.taas.PassengerPulloverResp.PulloverStatus passenger_pullover_status = 2;
  if (this->passenger_pullover_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->passenger_pullover_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassengerPulloverResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.PassengerPulloverResp)
  GOOGLE_DCHECK_NE(&from, this);
  const PassengerPulloverResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PassengerPulloverResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.PassengerPulloverResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.PassengerPulloverResp)
    MergeFrom(*source);
  }
}

void PassengerPulloverResp::MergeFrom(const PassengerPulloverResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.PassengerPulloverResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has___api_version()) {
    mutable___api_version()->::ford::av::taas::__ApiVersion::MergeFrom(from.__api_version());
  }
  if (from.passenger_pullover_status() != 0) {
    set_passenger_pullover_status(from.passenger_pullover_status());
  }
}

void PassengerPulloverResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.PassengerPulloverResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassengerPulloverResp::CopyFrom(const PassengerPulloverResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.PassengerPulloverResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassengerPulloverResp::IsInitialized() const {
  return true;
}

void PassengerPulloverResp::Swap(PassengerPulloverResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PassengerPulloverResp::InternalSwap(PassengerPulloverResp* other) {
  using std::swap;
  swap(__api_version_, other->__api_version_);
  swap(passenger_pullover_status_, other->passenger_pullover_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PassengerPulloverResp::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NewPassengerCount::InitAsDefaultInstance() {
  ::ford::av::taas::_NewPassengerCount_default_instance_._instance.get_mutable()->__api_version_ = const_cast< ::ford::av::taas::__ApiVersion*>(
      ::ford::av::taas::__ApiVersion::internal_default_instance());
}
void NewPassengerCount::clear___api_version() {
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewPassengerCount::kApiVersionFieldNumber;
const int NewPassengerCount::kTripIdFieldNumber;
const int NewPassengerCount::kPassCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewPassengerCount::NewPassengerCount()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsNewPassengerCount();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.NewPassengerCount)
}
NewPassengerCount::NewPassengerCount(const NewPassengerCount& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trip_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trip_id().size() > 0) {
    trip_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trip_id_);
  }
  if (from.has___api_version()) {
    __api_version_ = new ::ford::av::taas::__ApiVersion(*from.__api_version_);
  } else {
    __api_version_ = NULL;
  }
  pass_count_ = from.pass_count_;
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.NewPassengerCount)
}

void NewPassengerCount::SharedCtor() {
  trip_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&__api_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pass_count_) -
      reinterpret_cast<char*>(&__api_version_)) + sizeof(pass_count_));
  _cached_size_ = 0;
}

NewPassengerCount::~NewPassengerCount() {
  // @@protoc_insertion_point(destructor:ford.av.taas.NewPassengerCount)
  SharedDtor();
}

void NewPassengerCount::SharedDtor() {
  trip_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete __api_version_;
}

void NewPassengerCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewPassengerCount::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewPassengerCount& NewPassengerCount::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsNewPassengerCount();
  return *internal_default_instance();
}

NewPassengerCount* NewPassengerCount::New(::google::protobuf::Arena* arena) const {
  NewPassengerCount* n = new NewPassengerCount;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewPassengerCount::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.NewPassengerCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trip_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
  pass_count_ = 0u;
  _internal_metadata_.Clear();
}

bool NewPassengerCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.NewPassengerCount)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ford.av.taas.__ApiVersion __api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable___api_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes trip_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trip_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pass_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pass_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.NewPassengerCount)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.NewPassengerCount)
  return false;
#undef DO_
}

void NewPassengerCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.NewPassengerCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->__api_version_, output);
  }

  // bytes trip_id = 2;
  if (this->trip_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->trip_id(), output);
  }

  // uint32 pass_count = 3;
  if (this->pass_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pass_count(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.NewPassengerCount)
}

::google::protobuf::uint8* NewPassengerCount::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.NewPassengerCount)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->__api_version_, deterministic, target);
  }

  // bytes trip_id = 2;
  if (this->trip_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->trip_id(), target);
  }

  // uint32 pass_count = 3;
  if (this->pass_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pass_count(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.NewPassengerCount)
  return target;
}

size_t NewPassengerCount::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.NewPassengerCount)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes trip_id = 2;
  if (this->trip_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trip_id());
  }

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->__api_version_);
  }

  // uint32 pass_count = 3;
  if (this->pass_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pass_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewPassengerCount::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.NewPassengerCount)
  GOOGLE_DCHECK_NE(&from, this);
  const NewPassengerCount* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewPassengerCount>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.NewPassengerCount)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.NewPassengerCount)
    MergeFrom(*source);
  }
}

void NewPassengerCount::MergeFrom(const NewPassengerCount& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.NewPassengerCount)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trip_id().size() > 0) {

    trip_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trip_id_);
  }
  if (from.has___api_version()) {
    mutable___api_version()->::ford::av::taas::__ApiVersion::MergeFrom(from.__api_version());
  }
  if (from.pass_count() != 0) {
    set_pass_count(from.pass_count());
  }
}

void NewPassengerCount::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.NewPassengerCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewPassengerCount::CopyFrom(const NewPassengerCount& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.NewPassengerCount)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewPassengerCount::IsInitialized() const {
  return true;
}

void NewPassengerCount::Swap(NewPassengerCount* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewPassengerCount::InternalSwap(NewPassengerCount* other) {
  using std::swap;
  trip_id_.Swap(&other->trip_id_);
  swap(__api_version_, other->__api_version_);
  swap(pass_count_, other->pass_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewPassengerCount::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NewPassengerCountResp::InitAsDefaultInstance() {
  ::ford::av::taas::_NewPassengerCountResp_default_instance_._instance.get_mutable()->__api_version_ = const_cast< ::ford::av::taas::__ApiVersion*>(
      ::ford::av::taas::__ApiVersion::internal_default_instance());
}
void NewPassengerCountResp::clear___api_version() {
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NewPassengerCountResp::kApiVersionFieldNumber;
const int NewPassengerCountResp::kPassCountStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NewPassengerCountResp::NewPassengerCountResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsNewPassengerCountResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.NewPassengerCountResp)
}
NewPassengerCountResp::NewPassengerCountResp(const NewPassengerCountResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has___api_version()) {
    __api_version_ = new ::ford::av::taas::__ApiVersion(*from.__api_version_);
  } else {
    __api_version_ = NULL;
  }
  pass_count_status_ = from.pass_count_status_;
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.NewPassengerCountResp)
}

void NewPassengerCountResp::SharedCtor() {
  ::memset(&__api_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pass_count_status_) -
      reinterpret_cast<char*>(&__api_version_)) + sizeof(pass_count_status_));
  _cached_size_ = 0;
}

NewPassengerCountResp::~NewPassengerCountResp() {
  // @@protoc_insertion_point(destructor:ford.av.taas.NewPassengerCountResp)
  SharedDtor();
}

void NewPassengerCountResp::SharedDtor() {
  if (this != internal_default_instance()) delete __api_version_;
}

void NewPassengerCountResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewPassengerCountResp::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NewPassengerCountResp& NewPassengerCountResp::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsNewPassengerCountResp();
  return *internal_default_instance();
}

NewPassengerCountResp* NewPassengerCountResp::New(::google::protobuf::Arena* arena) const {
  NewPassengerCountResp* n = new NewPassengerCountResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NewPassengerCountResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.NewPassengerCountResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
  pass_count_status_ = 0;
  _internal_metadata_.Clear();
}

bool NewPassengerCountResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.NewPassengerCountResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ford.av.taas.__ApiVersion __api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable___api_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ford.av.taas.NewPassengerCountResp.PassCountStatus pass_count_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pass_count_status(static_cast< ::ford::av::taas::NewPassengerCountResp_PassCountStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.NewPassengerCountResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.NewPassengerCountResp)
  return false;
#undef DO_
}

void NewPassengerCountResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.NewPassengerCountResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->__api_version_, output);
  }

  // .ford.av.taas.NewPassengerCountResp.PassCountStatus pass_count_status = 2;
  if (this->pass_count_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->pass_count_status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.NewPassengerCountResp)
}

::google::protobuf::uint8* NewPassengerCountResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.NewPassengerCountResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->__api_version_, deterministic, target);
  }

  // .ford.av.taas.NewPassengerCountResp.PassCountStatus pass_count_status = 2;
  if (this->pass_count_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->pass_count_status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.NewPassengerCountResp)
  return target;
}

size_t NewPassengerCountResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.NewPassengerCountResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->__api_version_);
  }

  // .ford.av.taas.NewPassengerCountResp.PassCountStatus pass_count_status = 2;
  if (this->pass_count_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pass_count_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewPassengerCountResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.NewPassengerCountResp)
  GOOGLE_DCHECK_NE(&from, this);
  const NewPassengerCountResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NewPassengerCountResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.NewPassengerCountResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.NewPassengerCountResp)
    MergeFrom(*source);
  }
}

void NewPassengerCountResp::MergeFrom(const NewPassengerCountResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.NewPassengerCountResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has___api_version()) {
    mutable___api_version()->::ford::av::taas::__ApiVersion::MergeFrom(from.__api_version());
  }
  if (from.pass_count_status() != 0) {
    set_pass_count_status(from.pass_count_status());
  }
}

void NewPassengerCountResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.NewPassengerCountResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewPassengerCountResp::CopyFrom(const NewPassengerCountResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.NewPassengerCountResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewPassengerCountResp::IsInitialized() const {
  return true;
}

void NewPassengerCountResp::Swap(NewPassengerCountResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NewPassengerCountResp::InternalSwap(NewPassengerCountResp* other) {
  using std::swap;
  swap(__api_version_, other->__api_version_);
  swap(pass_count_status_, other->pass_count_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NewPassengerCountResp::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TripIDRequestMoreTime::InitAsDefaultInstance() {
  ::ford::av::taas::_TripIDRequestMoreTime_default_instance_._instance.get_mutable()->__api_version_ = const_cast< ::ford::av::taas::__ApiVersion*>(
      ::ford::av::taas::__ApiVersion::internal_default_instance());
}
void TripIDRequestMoreTime::clear___api_version() {
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TripIDRequestMoreTime::kApiVersionFieldNumber;
const int TripIDRequestMoreTime::kTripIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TripIDRequestMoreTime::TripIDRequestMoreTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsTripIDRequestMoreTime();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.TripIDRequestMoreTime)
}
TripIDRequestMoreTime::TripIDRequestMoreTime(const TripIDRequestMoreTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trip_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trip_id().size() > 0) {
    trip_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trip_id_);
  }
  if (from.has___api_version()) {
    __api_version_ = new ::ford::av::taas::__ApiVersion(*from.__api_version_);
  } else {
    __api_version_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.TripIDRequestMoreTime)
}

void TripIDRequestMoreTime::SharedCtor() {
  trip_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  __api_version_ = NULL;
  _cached_size_ = 0;
}

TripIDRequestMoreTime::~TripIDRequestMoreTime() {
  // @@protoc_insertion_point(destructor:ford.av.taas.TripIDRequestMoreTime)
  SharedDtor();
}

void TripIDRequestMoreTime::SharedDtor() {
  trip_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete __api_version_;
}

void TripIDRequestMoreTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripIDRequestMoreTime::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TripIDRequestMoreTime& TripIDRequestMoreTime::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsTripIDRequestMoreTime();
  return *internal_default_instance();
}

TripIDRequestMoreTime* TripIDRequestMoreTime::New(::google::protobuf::Arena* arena) const {
  TripIDRequestMoreTime* n = new TripIDRequestMoreTime;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TripIDRequestMoreTime::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.TripIDRequestMoreTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trip_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
  _internal_metadata_.Clear();
}

bool TripIDRequestMoreTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.TripIDRequestMoreTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ford.av.taas.__ApiVersion __api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable___api_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes trip_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trip_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.TripIDRequestMoreTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.TripIDRequestMoreTime)
  return false;
#undef DO_
}

void TripIDRequestMoreTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.TripIDRequestMoreTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->__api_version_, output);
  }

  // bytes trip_id = 2;
  if (this->trip_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->trip_id(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.TripIDRequestMoreTime)
}

::google::protobuf::uint8* TripIDRequestMoreTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.TripIDRequestMoreTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->__api_version_, deterministic, target);
  }

  // bytes trip_id = 2;
  if (this->trip_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->trip_id(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.TripIDRequestMoreTime)
  return target;
}

size_t TripIDRequestMoreTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.TripIDRequestMoreTime)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes trip_id = 2;
  if (this->trip_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trip_id());
  }

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->__api_version_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripIDRequestMoreTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.TripIDRequestMoreTime)
  GOOGLE_DCHECK_NE(&from, this);
  const TripIDRequestMoreTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TripIDRequestMoreTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.TripIDRequestMoreTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.TripIDRequestMoreTime)
    MergeFrom(*source);
  }
}

void TripIDRequestMoreTime::MergeFrom(const TripIDRequestMoreTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.TripIDRequestMoreTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trip_id().size() > 0) {

    trip_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trip_id_);
  }
  if (from.has___api_version()) {
    mutable___api_version()->::ford::av::taas::__ApiVersion::MergeFrom(from.__api_version());
  }
}

void TripIDRequestMoreTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.TripIDRequestMoreTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripIDRequestMoreTime::CopyFrom(const TripIDRequestMoreTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.TripIDRequestMoreTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripIDRequestMoreTime::IsInitialized() const {
  return true;
}

void TripIDRequestMoreTime::Swap(TripIDRequestMoreTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TripIDRequestMoreTime::InternalSwap(TripIDRequestMoreTime* other) {
  using std::swap;
  trip_id_.Swap(&other->trip_id_);
  swap(__api_version_, other->__api_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TripIDRequestMoreTime::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TripIDRequestMoreTimeResp::InitAsDefaultInstance() {
  ::ford::av::taas::_TripIDRequestMoreTimeResp_default_instance_._instance.get_mutable()->__api_version_ = const_cast< ::ford::av::taas::__ApiVersion*>(
      ::ford::av::taas::__ApiVersion::internal_default_instance());
}
void TripIDRequestMoreTimeResp::clear___api_version() {
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TripIDRequestMoreTimeResp::kApiVersionFieldNumber;
const int TripIDRequestMoreTimeResp::kMoreTimeStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TripIDRequestMoreTimeResp::TripIDRequestMoreTimeResp()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsTripIDRequestMoreTimeResp();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.TripIDRequestMoreTimeResp)
}
TripIDRequestMoreTimeResp::TripIDRequestMoreTimeResp(const TripIDRequestMoreTimeResp& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has___api_version()) {
    __api_version_ = new ::ford::av::taas::__ApiVersion(*from.__api_version_);
  } else {
    __api_version_ = NULL;
  }
  more_time_status_ = from.more_time_status_;
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.TripIDRequestMoreTimeResp)
}

void TripIDRequestMoreTimeResp::SharedCtor() {
  ::memset(&__api_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&more_time_status_) -
      reinterpret_cast<char*>(&__api_version_)) + sizeof(more_time_status_));
  _cached_size_ = 0;
}

TripIDRequestMoreTimeResp::~TripIDRequestMoreTimeResp() {
  // @@protoc_insertion_point(destructor:ford.av.taas.TripIDRequestMoreTimeResp)
  SharedDtor();
}

void TripIDRequestMoreTimeResp::SharedDtor() {
  if (this != internal_default_instance()) delete __api_version_;
}

void TripIDRequestMoreTimeResp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripIDRequestMoreTimeResp::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TripIDRequestMoreTimeResp& TripIDRequestMoreTimeResp::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsTripIDRequestMoreTimeResp();
  return *internal_default_instance();
}

TripIDRequestMoreTimeResp* TripIDRequestMoreTimeResp::New(::google::protobuf::Arena* arena) const {
  TripIDRequestMoreTimeResp* n = new TripIDRequestMoreTimeResp;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TripIDRequestMoreTimeResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.TripIDRequestMoreTimeResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
  more_time_status_ = 0;
  _internal_metadata_.Clear();
}

bool TripIDRequestMoreTimeResp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.TripIDRequestMoreTimeResp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ford.av.taas.__ApiVersion __api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable___api_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ford.av.taas.TripIDRequestMoreTimeResp.LingerRequestStatus more_time_status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_more_time_status(static_cast< ::ford::av::taas::TripIDRequestMoreTimeResp_LingerRequestStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.TripIDRequestMoreTimeResp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.TripIDRequestMoreTimeResp)
  return false;
#undef DO_
}

void TripIDRequestMoreTimeResp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.TripIDRequestMoreTimeResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->__api_version_, output);
  }

  // .ford.av.taas.TripIDRequestMoreTimeResp.LingerRequestStatus more_time_status = 2;
  if (this->more_time_status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->more_time_status(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.TripIDRequestMoreTimeResp)
}

::google::protobuf::uint8* TripIDRequestMoreTimeResp::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.TripIDRequestMoreTimeResp)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->__api_version_, deterministic, target);
  }

  // .ford.av.taas.TripIDRequestMoreTimeResp.LingerRequestStatus more_time_status = 2;
  if (this->more_time_status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->more_time_status(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.TripIDRequestMoreTimeResp)
  return target;
}

size_t TripIDRequestMoreTimeResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.TripIDRequestMoreTimeResp)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->__api_version_);
  }

  // .ford.av.taas.TripIDRequestMoreTimeResp.LingerRequestStatus more_time_status = 2;
  if (this->more_time_status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->more_time_status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripIDRequestMoreTimeResp::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.TripIDRequestMoreTimeResp)
  GOOGLE_DCHECK_NE(&from, this);
  const TripIDRequestMoreTimeResp* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TripIDRequestMoreTimeResp>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.TripIDRequestMoreTimeResp)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.TripIDRequestMoreTimeResp)
    MergeFrom(*source);
  }
}

void TripIDRequestMoreTimeResp::MergeFrom(const TripIDRequestMoreTimeResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.TripIDRequestMoreTimeResp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has___api_version()) {
    mutable___api_version()->::ford::av::taas::__ApiVersion::MergeFrom(from.__api_version());
  }
  if (from.more_time_status() != 0) {
    set_more_time_status(from.more_time_status());
  }
}

void TripIDRequestMoreTimeResp::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.TripIDRequestMoreTimeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripIDRequestMoreTimeResp::CopyFrom(const TripIDRequestMoreTimeResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.TripIDRequestMoreTimeResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripIDRequestMoreTimeResp::IsInitialized() const {
  return true;
}

void TripIDRequestMoreTimeResp::Swap(TripIDRequestMoreTimeResp* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TripIDRequestMoreTimeResp::InternalSwap(TripIDRequestMoreTimeResp* other) {
  using std::swap;
  swap(__api_version_, other->__api_version_);
  swap(more_time_status_, other->more_time_status_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TripIDRequestMoreTimeResp::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublishArrival::InitAsDefaultInstance() {
  ::ford::av::taas::_PublishArrival_default_instance_._instance.get_mutable()->__api_version_ = const_cast< ::ford::av::taas::__ApiVersion*>(
      ::ford::av::taas::__ApiVersion::internal_default_instance());
}
void PublishArrival::clear___api_version() {
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishArrival::kApiVersionFieldNumber;
const int PublishArrival::kShouldDispFieldNumber;
const int PublishArrival::kCurbsideFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishArrival::PublishArrival()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishArrival();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.PublishArrival)
}
PublishArrival::PublishArrival(const PublishArrival& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has___api_version()) {
    __api_version_ = new ::ford::av::taas::__ApiVersion(*from.__api_version_);
  } else {
    __api_version_ = NULL;
  }
  ::memcpy(&should_disp_, &from.should_disp_,
    static_cast<size_t>(reinterpret_cast<char*>(&curbside_) -
    reinterpret_cast<char*>(&should_disp_)) + sizeof(curbside_));
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.PublishArrival)
}

void PublishArrival::SharedCtor() {
  ::memset(&__api_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curbside_) -
      reinterpret_cast<char*>(&__api_version_)) + sizeof(curbside_));
  _cached_size_ = 0;
}

PublishArrival::~PublishArrival() {
  // @@protoc_insertion_point(destructor:ford.av.taas.PublishArrival)
  SharedDtor();
}

void PublishArrival::SharedDtor() {
  if (this != internal_default_instance()) delete __api_version_;
}

void PublishArrival::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishArrival::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishArrival& PublishArrival::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishArrival();
  return *internal_default_instance();
}

PublishArrival* PublishArrival::New(::google::protobuf::Arena* arena) const {
  PublishArrival* n = new PublishArrival;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishArrival::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.PublishArrival)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
  ::memset(&should_disp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&curbside_) -
      reinterpret_cast<char*>(&should_disp_)) + sizeof(curbside_));
  _internal_metadata_.Clear();
}

bool PublishArrival::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.PublishArrival)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ford.av.taas.__ApiVersion __api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable___api_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool should_disp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &should_disp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ford.av.taas.PublishArrival.CurbSide curbside = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_curbside(static_cast< ::ford::av::taas::PublishArrival_CurbSide >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.PublishArrival)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.PublishArrival)
  return false;
#undef DO_
}

void PublishArrival::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.PublishArrival)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->__api_version_, output);
  }

  // bool should_disp = 2;
  if (this->should_disp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->should_disp(), output);
  }

  // .ford.av.taas.PublishArrival.CurbSide curbside = 3;
  if (this->curbside() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->curbside(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.PublishArrival)
}

::google::protobuf::uint8* PublishArrival::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.PublishArrival)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->__api_version_, deterministic, target);
  }

  // bool should_disp = 2;
  if (this->should_disp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->should_disp(), target);
  }

  // .ford.av.taas.PublishArrival.CurbSide curbside = 3;
  if (this->curbside() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->curbside(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.PublishArrival)
  return target;
}

size_t PublishArrival::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.PublishArrival)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->__api_version_);
  }

  // bool should_disp = 2;
  if (this->should_disp() != 0) {
    total_size += 1 + 1;
  }

  // .ford.av.taas.PublishArrival.CurbSide curbside = 3;
  if (this->curbside() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->curbside());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishArrival::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.PublishArrival)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishArrival* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishArrival>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.PublishArrival)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.PublishArrival)
    MergeFrom(*source);
  }
}

void PublishArrival::MergeFrom(const PublishArrival& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.PublishArrival)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has___api_version()) {
    mutable___api_version()->::ford::av::taas::__ApiVersion::MergeFrom(from.__api_version());
  }
  if (from.should_disp() != 0) {
    set_should_disp(from.should_disp());
  }
  if (from.curbside() != 0) {
    set_curbside(from.curbside());
  }
}

void PublishArrival::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.PublishArrival)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishArrival::CopyFrom(const PublishArrival& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.PublishArrival)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishArrival::IsInitialized() const {
  return true;
}

void PublishArrival::Swap(PublishArrival* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishArrival::InternalSwap(PublishArrival* other) {
  using std::swap;
  swap(__api_version_, other->__api_version_);
  swap(should_disp_, other->should_disp_);
  swap(curbside_, other->curbside_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishArrival::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublishLinger::InitAsDefaultInstance() {
  ::ford::av::taas::_PublishLinger_default_instance_._instance.get_mutable()->__api_version_ = const_cast< ::ford::av::taas::__ApiVersion*>(
      ::ford::av::taas::__ApiVersion::internal_default_instance());
}
void PublishLinger::clear___api_version() {
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishLinger::kApiVersionFieldNumber;
const int PublishLinger::kLingerRemFieldNumber;
const int PublishLinger::kLingerExcFieldNumber;
const int PublishLinger::kCanExtendLingerFieldNumber;
const int PublishLinger::kEmphaticLeaveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishLinger::PublishLinger()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishLinger();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.PublishLinger)
}
PublishLinger::PublishLinger(const PublishLinger& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has___api_version()) {
    __api_version_ = new ::ford::av::taas::__ApiVersion(*from.__api_version_);
  } else {
    __api_version_ = NULL;
  }
  ::memcpy(&linger_rem_, &from.linger_rem_,
    static_cast<size_t>(reinterpret_cast<char*>(&emphatic_leave_) -
    reinterpret_cast<char*>(&linger_rem_)) + sizeof(emphatic_leave_));
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.PublishLinger)
}

void PublishLinger::SharedCtor() {
  ::memset(&__api_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&emphatic_leave_) -
      reinterpret_cast<char*>(&__api_version_)) + sizeof(emphatic_leave_));
  _cached_size_ = 0;
}

PublishLinger::~PublishLinger() {
  // @@protoc_insertion_point(destructor:ford.av.taas.PublishLinger)
  SharedDtor();
}

void PublishLinger::SharedDtor() {
  if (this != internal_default_instance()) delete __api_version_;
}

void PublishLinger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishLinger::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishLinger& PublishLinger::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishLinger();
  return *internal_default_instance();
}

PublishLinger* PublishLinger::New(::google::protobuf::Arena* arena) const {
  PublishLinger* n = new PublishLinger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishLinger::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.PublishLinger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
  ::memset(&linger_rem_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&emphatic_leave_) -
      reinterpret_cast<char*>(&linger_rem_)) + sizeof(emphatic_leave_));
  _internal_metadata_.Clear();
}

bool PublishLinger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.PublishLinger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ford.av.taas.__ApiVersion __api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable___api_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 linger_rem = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linger_rem_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool linger_exc = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &linger_exc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool can_extend_linger = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_extend_linger_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool emphatic_leave = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &emphatic_leave_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.PublishLinger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.PublishLinger)
  return false;
#undef DO_
}

void PublishLinger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.PublishLinger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->__api_version_, output);
  }

  // uint32 linger_rem = 2;
  if (this->linger_rem() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->linger_rem(), output);
  }

  // bool linger_exc = 3;
  if (this->linger_exc() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->linger_exc(), output);
  }

  // bool can_extend_linger = 4;
  if (this->can_extend_linger() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->can_extend_linger(), output);
  }

  // bool emphatic_leave = 5;
  if (this->emphatic_leave() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->emphatic_leave(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.PublishLinger)
}

::google::protobuf::uint8* PublishLinger::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.PublishLinger)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->__api_version_, deterministic, target);
  }

  // uint32 linger_rem = 2;
  if (this->linger_rem() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->linger_rem(), target);
  }

  // bool linger_exc = 3;
  if (this->linger_exc() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->linger_exc(), target);
  }

  // bool can_extend_linger = 4;
  if (this->can_extend_linger() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->can_extend_linger(), target);
  }

  // bool emphatic_leave = 5;
  if (this->emphatic_leave() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->emphatic_leave(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.PublishLinger)
  return target;
}

size_t PublishLinger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.PublishLinger)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->__api_version_);
  }

  // uint32 linger_rem = 2;
  if (this->linger_rem() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->linger_rem());
  }

  // bool linger_exc = 3;
  if (this->linger_exc() != 0) {
    total_size += 1 + 1;
  }

  // bool can_extend_linger = 4;
  if (this->can_extend_linger() != 0) {
    total_size += 1 + 1;
  }

  // bool emphatic_leave = 5;
  if (this->emphatic_leave() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishLinger::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.PublishLinger)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishLinger* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishLinger>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.PublishLinger)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.PublishLinger)
    MergeFrom(*source);
  }
}

void PublishLinger::MergeFrom(const PublishLinger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.PublishLinger)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has___api_version()) {
    mutable___api_version()->::ford::av::taas::__ApiVersion::MergeFrom(from.__api_version());
  }
  if (from.linger_rem() != 0) {
    set_linger_rem(from.linger_rem());
  }
  if (from.linger_exc() != 0) {
    set_linger_exc(from.linger_exc());
  }
  if (from.can_extend_linger() != 0) {
    set_can_extend_linger(from.can_extend_linger());
  }
  if (from.emphatic_leave() != 0) {
    set_emphatic_leave(from.emphatic_leave());
  }
}

void PublishLinger::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.PublishLinger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishLinger::CopyFrom(const PublishLinger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.PublishLinger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishLinger::IsInitialized() const {
  return true;
}

void PublishLinger::Swap(PublishLinger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishLinger::InternalSwap(PublishLinger* other) {
  using std::swap;
  swap(__api_version_, other->__api_version_);
  swap(linger_rem_, other->linger_rem_);
  swap(linger_exc_, other->linger_exc_);
  swap(can_extend_linger_, other->can_extend_linger_);
  swap(emphatic_leave_, other->emphatic_leave_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishLinger::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublishGoButtonStatus::InitAsDefaultInstance() {
  ::ford::av::taas::_PublishGoButtonStatus_default_instance_._instance.get_mutable()->__api_version_ = const_cast< ::ford::av::taas::__ApiVersion*>(
      ::ford::av::taas::__ApiVersion::internal_default_instance());
}
void PublishGoButtonStatus::clear___api_version() {
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishGoButtonStatus::kApiVersionFieldNumber;
const int PublishGoButtonStatus::kGoButtonEnableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishGoButtonStatus::PublishGoButtonStatus()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishGoButtonStatus();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.PublishGoButtonStatus)
}
PublishGoButtonStatus::PublishGoButtonStatus(const PublishGoButtonStatus& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has___api_version()) {
    __api_version_ = new ::ford::av::taas::__ApiVersion(*from.__api_version_);
  } else {
    __api_version_ = NULL;
  }
  go_button_enable_ = from.go_button_enable_;
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.PublishGoButtonStatus)
}

void PublishGoButtonStatus::SharedCtor() {
  ::memset(&__api_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&go_button_enable_) -
      reinterpret_cast<char*>(&__api_version_)) + sizeof(go_button_enable_));
  _cached_size_ = 0;
}

PublishGoButtonStatus::~PublishGoButtonStatus() {
  // @@protoc_insertion_point(destructor:ford.av.taas.PublishGoButtonStatus)
  SharedDtor();
}

void PublishGoButtonStatus::SharedDtor() {
  if (this != internal_default_instance()) delete __api_version_;
}

void PublishGoButtonStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishGoButtonStatus::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishGoButtonStatus& PublishGoButtonStatus::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishGoButtonStatus();
  return *internal_default_instance();
}

PublishGoButtonStatus* PublishGoButtonStatus::New(::google::protobuf::Arena* arena) const {
  PublishGoButtonStatus* n = new PublishGoButtonStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishGoButtonStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.PublishGoButtonStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
  go_button_enable_ = 0;
  _internal_metadata_.Clear();
}

bool PublishGoButtonStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.PublishGoButtonStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ford.av.taas.__ApiVersion __api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable___api_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ford.av.taas.PublishGoButtonStatus.GoButtonStatus go_button_enable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_go_button_enable(static_cast< ::ford::av::taas::PublishGoButtonStatus_GoButtonStatus >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.PublishGoButtonStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.PublishGoButtonStatus)
  return false;
#undef DO_
}

void PublishGoButtonStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.PublishGoButtonStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->__api_version_, output);
  }

  // .ford.av.taas.PublishGoButtonStatus.GoButtonStatus go_button_enable = 2;
  if (this->go_button_enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->go_button_enable(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.PublishGoButtonStatus)
}

::google::protobuf::uint8* PublishGoButtonStatus::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.PublishGoButtonStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->__api_version_, deterministic, target);
  }

  // .ford.av.taas.PublishGoButtonStatus.GoButtonStatus go_button_enable = 2;
  if (this->go_button_enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->go_button_enable(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.PublishGoButtonStatus)
  return target;
}

size_t PublishGoButtonStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.PublishGoButtonStatus)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->__api_version_);
  }

  // .ford.av.taas.PublishGoButtonStatus.GoButtonStatus go_button_enable = 2;
  if (this->go_button_enable() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->go_button_enable());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishGoButtonStatus::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.PublishGoButtonStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishGoButtonStatus* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishGoButtonStatus>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.PublishGoButtonStatus)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.PublishGoButtonStatus)
    MergeFrom(*source);
  }
}

void PublishGoButtonStatus::MergeFrom(const PublishGoButtonStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.PublishGoButtonStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has___api_version()) {
    mutable___api_version()->::ford::av::taas::__ApiVersion::MergeFrom(from.__api_version());
  }
  if (from.go_button_enable() != 0) {
    set_go_button_enable(from.go_button_enable());
  }
}

void PublishGoButtonStatus::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.PublishGoButtonStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishGoButtonStatus::CopyFrom(const PublishGoButtonStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.PublishGoButtonStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishGoButtonStatus::IsInitialized() const {
  return true;
}

void PublishGoButtonStatus::Swap(PublishGoButtonStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishGoButtonStatus::InternalSwap(PublishGoButtonStatus* other) {
  using std::swap;
  swap(__api_version_, other->__api_version_);
  swap(go_button_enable_, other->go_button_enable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishGoButtonStatus::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishOnboardingInfo_TripOnboardInfo_PickupLocation::kPickupLatitudeDegreeFieldNumber;
const int PublishOnboardingInfo_TripOnboardInfo_PickupLocation::kPickupLatitudeMinuteFieldNumber;
const int PublishOnboardingInfo_TripOnboardInfo_PickupLocation::kPickupLatitudeMminFieldNumber;
const int PublishOnboardingInfo_TripOnboardInfo_PickupLocation::kPickupLatitiudeOrientationFieldNumber;
const int PublishOnboardingInfo_TripOnboardInfo_PickupLocation::kPickupLongitudeDegreeFieldNumber;
const int PublishOnboardingInfo_TripOnboardInfo_PickupLocation::kPickupLongitudeMinuteFieldNumber;
const int PublishOnboardingInfo_TripOnboardInfo_PickupLocation::kPickupLongitudeMminFieldNumber;
const int PublishOnboardingInfo_TripOnboardInfo_PickupLocation::kPickupLongitudeOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishOnboardingInfo_TripOnboardInfo_PickupLocation::PublishOnboardingInfo_TripOnboardInfo_PickupLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishOnboardingInfo_TripOnboardInfo_PickupLocation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation)
}
PublishOnboardingInfo_TripOnboardInfo_PickupLocation::PublishOnboardingInfo_TripOnboardInfo_PickupLocation(const PublishOnboardingInfo_TripOnboardInfo_PickupLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pickup_latitude_degree_, &from.pickup_latitude_degree_,
    static_cast<size_t>(reinterpret_cast<char*>(&pickup_longitude_mmin_) -
    reinterpret_cast<char*>(&pickup_latitude_degree_)) + sizeof(pickup_longitude_mmin_));
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation)
}

void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::SharedCtor() {
  ::memset(&pickup_latitude_degree_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pickup_longitude_mmin_) -
      reinterpret_cast<char*>(&pickup_latitude_degree_)) + sizeof(pickup_longitude_mmin_));
  _cached_size_ = 0;
}

PublishOnboardingInfo_TripOnboardInfo_PickupLocation::~PublishOnboardingInfo_TripOnboardInfo_PickupLocation() {
  // @@protoc_insertion_point(destructor:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation)
  SharedDtor();
}

void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::SharedDtor() {
}

void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishOnboardingInfo_TripOnboardInfo_PickupLocation::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishOnboardingInfo_TripOnboardInfo_PickupLocation& PublishOnboardingInfo_TripOnboardInfo_PickupLocation::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishOnboardingInfo_TripOnboardInfo_PickupLocation();
  return *internal_default_instance();
}

PublishOnboardingInfo_TripOnboardInfo_PickupLocation* PublishOnboardingInfo_TripOnboardInfo_PickupLocation::New(::google::protobuf::Arena* arena) const {
  PublishOnboardingInfo_TripOnboardInfo_PickupLocation* n = new PublishOnboardingInfo_TripOnboardInfo_PickupLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pickup_latitude_degree_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pickup_longitude_mmin_) -
      reinterpret_cast<char*>(&pickup_latitude_degree_)) + sizeof(pickup_longitude_mmin_));
  _internal_metadata_.Clear();
}

bool PublishOnboardingInfo_TripOnboardInfo_PickupLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 pickup_latitude_degree = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pickup_latitude_degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pickup_latitude_minute = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pickup_latitude_minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pickup_latitude_mmin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pickup_latitude_mmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool pickup_latitiude_orientation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pickup_latitiude_orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pickup_longitude_degree = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pickup_longitude_degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pickup_longitude_minute = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pickup_longitude_minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pickup_longitude_mmin = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pickup_longitude_mmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool pickup_longitude_orientation = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &pickup_longitude_orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation)
  return false;
#undef DO_
}

void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pickup_latitude_degree = 1;
  if (this->pickup_latitude_degree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pickup_latitude_degree(), output);
  }

  // uint32 pickup_latitude_minute = 2;
  if (this->pickup_latitude_minute() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pickup_latitude_minute(), output);
  }

  // uint32 pickup_latitude_mmin = 3;
  if (this->pickup_latitude_mmin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pickup_latitude_mmin(), output);
  }

  // bool pickup_latitiude_orientation = 4;
  if (this->pickup_latitiude_orientation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->pickup_latitiude_orientation(), output);
  }

  // uint32 pickup_longitude_degree = 5;
  if (this->pickup_longitude_degree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pickup_longitude_degree(), output);
  }

  // uint32 pickup_longitude_minute = 6;
  if (this->pickup_longitude_minute() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->pickup_longitude_minute(), output);
  }

  // uint32 pickup_longitude_mmin = 7;
  if (this->pickup_longitude_mmin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->pickup_longitude_mmin(), output);
  }

  // bool pickup_longitude_orientation = 8;
  if (this->pickup_longitude_orientation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->pickup_longitude_orientation(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation)
}

::google::protobuf::uint8* PublishOnboardingInfo_TripOnboardInfo_PickupLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 pickup_latitude_degree = 1;
  if (this->pickup_latitude_degree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pickup_latitude_degree(), target);
  }

  // uint32 pickup_latitude_minute = 2;
  if (this->pickup_latitude_minute() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pickup_latitude_minute(), target);
  }

  // uint32 pickup_latitude_mmin = 3;
  if (this->pickup_latitude_mmin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pickup_latitude_mmin(), target);
  }

  // bool pickup_latitiude_orientation = 4;
  if (this->pickup_latitiude_orientation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->pickup_latitiude_orientation(), target);
  }

  // uint32 pickup_longitude_degree = 5;
  if (this->pickup_longitude_degree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pickup_longitude_degree(), target);
  }

  // uint32 pickup_longitude_minute = 6;
  if (this->pickup_longitude_minute() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->pickup_longitude_minute(), target);
  }

  // uint32 pickup_longitude_mmin = 7;
  if (this->pickup_longitude_mmin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->pickup_longitude_mmin(), target);
  }

  // bool pickup_longitude_orientation = 8;
  if (this->pickup_longitude_orientation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->pickup_longitude_orientation(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation)
  return target;
}

size_t PublishOnboardingInfo_TripOnboardInfo_PickupLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 pickup_latitude_degree = 1;
  if (this->pickup_latitude_degree() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pickup_latitude_degree());
  }

  // uint32 pickup_latitude_minute = 2;
  if (this->pickup_latitude_minute() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pickup_latitude_minute());
  }

  // uint32 pickup_latitude_mmin = 3;
  if (this->pickup_latitude_mmin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pickup_latitude_mmin());
  }

  // uint32 pickup_longitude_degree = 5;
  if (this->pickup_longitude_degree() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pickup_longitude_degree());
  }

  // uint32 pickup_longitude_minute = 6;
  if (this->pickup_longitude_minute() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pickup_longitude_minute());
  }

  // bool pickup_latitiude_orientation = 4;
  if (this->pickup_latitiude_orientation() != 0) {
    total_size += 1 + 1;
  }

  // bool pickup_longitude_orientation = 8;
  if (this->pickup_longitude_orientation() != 0) {
    total_size += 1 + 1;
  }

  // uint32 pickup_longitude_mmin = 7;
  if (this->pickup_longitude_mmin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pickup_longitude_mmin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishOnboardingInfo_TripOnboardInfo_PickupLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishOnboardingInfo_TripOnboardInfo_PickupLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation)
    MergeFrom(*source);
  }
}

void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::MergeFrom(const PublishOnboardingInfo_TripOnboardInfo_PickupLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pickup_latitude_degree() != 0) {
    set_pickup_latitude_degree(from.pickup_latitude_degree());
  }
  if (from.pickup_latitude_minute() != 0) {
    set_pickup_latitude_minute(from.pickup_latitude_minute());
  }
  if (from.pickup_latitude_mmin() != 0) {
    set_pickup_latitude_mmin(from.pickup_latitude_mmin());
  }
  if (from.pickup_longitude_degree() != 0) {
    set_pickup_longitude_degree(from.pickup_longitude_degree());
  }
  if (from.pickup_longitude_minute() != 0) {
    set_pickup_longitude_minute(from.pickup_longitude_minute());
  }
  if (from.pickup_latitiude_orientation() != 0) {
    set_pickup_latitiude_orientation(from.pickup_latitiude_orientation());
  }
  if (from.pickup_longitude_orientation() != 0) {
    set_pickup_longitude_orientation(from.pickup_longitude_orientation());
  }
  if (from.pickup_longitude_mmin() != 0) {
    set_pickup_longitude_mmin(from.pickup_longitude_mmin());
  }
}

void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::CopyFrom(const PublishOnboardingInfo_TripOnboardInfo_PickupLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishOnboardingInfo_TripOnboardInfo_PickupLocation::IsInitialized() const {
  return true;
}

void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::Swap(PublishOnboardingInfo_TripOnboardInfo_PickupLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishOnboardingInfo_TripOnboardInfo_PickupLocation::InternalSwap(PublishOnboardingInfo_TripOnboardInfo_PickupLocation* other) {
  using std::swap;
  swap(pickup_latitude_degree_, other->pickup_latitude_degree_);
  swap(pickup_latitude_minute_, other->pickup_latitude_minute_);
  swap(pickup_latitude_mmin_, other->pickup_latitude_mmin_);
  swap(pickup_longitude_degree_, other->pickup_longitude_degree_);
  swap(pickup_longitude_minute_, other->pickup_longitude_minute_);
  swap(pickup_latitiude_orientation_, other->pickup_latitiude_orientation_);
  swap(pickup_longitude_orientation_, other->pickup_longitude_orientation_);
  swap(pickup_longitude_mmin_, other->pickup_longitude_mmin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishOnboardingInfo_TripOnboardInfo_PickupLocation::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::kDropoffLatitudeDegreeFieldNumber;
const int PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::kDropoffLatitudeMinuteFieldNumber;
const int PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::kDropoffLatitudeMminFieldNumber;
const int PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::kDropoffLatitiudeOrientationFieldNumber;
const int PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::kDropoffLongitudeDegreeFieldNumber;
const int PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::kDropoffLongitudeMinuteFieldNumber;
const int PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::kDropoffLongitudeMminFieldNumber;
const int PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::kDropoffLongitudeOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishOnboardingInfo_TripOnboardInfo_DropoffLocation();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation)
}
PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation(const PublishOnboardingInfo_TripOnboardInfo_DropoffLocation& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&dropoff_latitude_degree_, &from.dropoff_latitude_degree_,
    static_cast<size_t>(reinterpret_cast<char*>(&dropoff_longitude_mmin_) -
    reinterpret_cast<char*>(&dropoff_latitude_degree_)) + sizeof(dropoff_longitude_mmin_));
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation)
}

void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::SharedCtor() {
  ::memset(&dropoff_latitude_degree_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropoff_longitude_mmin_) -
      reinterpret_cast<char*>(&dropoff_latitude_degree_)) + sizeof(dropoff_longitude_mmin_));
  _cached_size_ = 0;
}

PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::~PublishOnboardingInfo_TripOnboardInfo_DropoffLocation() {
  // @@protoc_insertion_point(destructor:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation)
  SharedDtor();
}

void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::SharedDtor() {
}

void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishOnboardingInfo_TripOnboardInfo_DropoffLocation& PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishOnboardingInfo_TripOnboardInfo_DropoffLocation();
  return *internal_default_instance();
}

PublishOnboardingInfo_TripOnboardInfo_DropoffLocation* PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::New(::google::protobuf::Arena* arena) const {
  PublishOnboardingInfo_TripOnboardInfo_DropoffLocation* n = new PublishOnboardingInfo_TripOnboardInfo_DropoffLocation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dropoff_latitude_degree_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropoff_longitude_mmin_) -
      reinterpret_cast<char*>(&dropoff_latitude_degree_)) + sizeof(dropoff_longitude_mmin_));
  _internal_metadata_.Clear();
}

bool PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dropoff_latitude_degree = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropoff_latitude_degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dropoff_latitude_minute = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropoff_latitude_minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dropoff_latitude_mmin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropoff_latitude_mmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dropoff_latitiude_orientation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dropoff_latitiude_orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dropoff_longitude_degree = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropoff_longitude_degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dropoff_longitude_minute = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropoff_longitude_minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 dropoff_longitude_mmin = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dropoff_longitude_mmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dropoff_longitude_orientation = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dropoff_longitude_orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation)
  return false;
#undef DO_
}

void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dropoff_latitude_degree = 1;
  if (this->dropoff_latitude_degree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dropoff_latitude_degree(), output);
  }

  // uint32 dropoff_latitude_minute = 2;
  if (this->dropoff_latitude_minute() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dropoff_latitude_minute(), output);
  }

  // uint32 dropoff_latitude_mmin = 3;
  if (this->dropoff_latitude_mmin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->dropoff_latitude_mmin(), output);
  }

  // bool dropoff_latitiude_orientation = 4;
  if (this->dropoff_latitiude_orientation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->dropoff_latitiude_orientation(), output);
  }

  // uint32 dropoff_longitude_degree = 5;
  if (this->dropoff_longitude_degree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dropoff_longitude_degree(), output);
  }

  // uint32 dropoff_longitude_minute = 6;
  if (this->dropoff_longitude_minute() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->dropoff_longitude_minute(), output);
  }

  // uint32 dropoff_longitude_mmin = 7;
  if (this->dropoff_longitude_mmin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->dropoff_longitude_mmin(), output);
  }

  // bool dropoff_longitude_orientation = 8;
  if (this->dropoff_longitude_orientation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->dropoff_longitude_orientation(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation)
}

::google::protobuf::uint8* PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 dropoff_latitude_degree = 1;
  if (this->dropoff_latitude_degree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dropoff_latitude_degree(), target);
  }

  // uint32 dropoff_latitude_minute = 2;
  if (this->dropoff_latitude_minute() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dropoff_latitude_minute(), target);
  }

  // uint32 dropoff_latitude_mmin = 3;
  if (this->dropoff_latitude_mmin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->dropoff_latitude_mmin(), target);
  }

  // bool dropoff_latitiude_orientation = 4;
  if (this->dropoff_latitiude_orientation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->dropoff_latitiude_orientation(), target);
  }

  // uint32 dropoff_longitude_degree = 5;
  if (this->dropoff_longitude_degree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dropoff_longitude_degree(), target);
  }

  // uint32 dropoff_longitude_minute = 6;
  if (this->dropoff_longitude_minute() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->dropoff_longitude_minute(), target);
  }

  // uint32 dropoff_longitude_mmin = 7;
  if (this->dropoff_longitude_mmin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->dropoff_longitude_mmin(), target);
  }

  // bool dropoff_longitude_orientation = 8;
  if (this->dropoff_longitude_orientation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->dropoff_longitude_orientation(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation)
  return target;
}

size_t PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 dropoff_latitude_degree = 1;
  if (this->dropoff_latitude_degree() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dropoff_latitude_degree());
  }

  // uint32 dropoff_latitude_minute = 2;
  if (this->dropoff_latitude_minute() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dropoff_latitude_minute());
  }

  // uint32 dropoff_latitude_mmin = 3;
  if (this->dropoff_latitude_mmin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dropoff_latitude_mmin());
  }

  // uint32 dropoff_longitude_degree = 5;
  if (this->dropoff_longitude_degree() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dropoff_longitude_degree());
  }

  // uint32 dropoff_longitude_minute = 6;
  if (this->dropoff_longitude_minute() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dropoff_longitude_minute());
  }

  // bool dropoff_latitiude_orientation = 4;
  if (this->dropoff_latitiude_orientation() != 0) {
    total_size += 1 + 1;
  }

  // bool dropoff_longitude_orientation = 8;
  if (this->dropoff_longitude_orientation() != 0) {
    total_size += 1 + 1;
  }

  // uint32 dropoff_longitude_mmin = 7;
  if (this->dropoff_longitude_mmin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dropoff_longitude_mmin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishOnboardingInfo_TripOnboardInfo_DropoffLocation* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishOnboardingInfo_TripOnboardInfo_DropoffLocation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation)
    MergeFrom(*source);
  }
}

void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::MergeFrom(const PublishOnboardingInfo_TripOnboardInfo_DropoffLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.dropoff_latitude_degree() != 0) {
    set_dropoff_latitude_degree(from.dropoff_latitude_degree());
  }
  if (from.dropoff_latitude_minute() != 0) {
    set_dropoff_latitude_minute(from.dropoff_latitude_minute());
  }
  if (from.dropoff_latitude_mmin() != 0) {
    set_dropoff_latitude_mmin(from.dropoff_latitude_mmin());
  }
  if (from.dropoff_longitude_degree() != 0) {
    set_dropoff_longitude_degree(from.dropoff_longitude_degree());
  }
  if (from.dropoff_longitude_minute() != 0) {
    set_dropoff_longitude_minute(from.dropoff_longitude_minute());
  }
  if (from.dropoff_latitiude_orientation() != 0) {
    set_dropoff_latitiude_orientation(from.dropoff_latitiude_orientation());
  }
  if (from.dropoff_longitude_orientation() != 0) {
    set_dropoff_longitude_orientation(from.dropoff_longitude_orientation());
  }
  if (from.dropoff_longitude_mmin() != 0) {
    set_dropoff_longitude_mmin(from.dropoff_longitude_mmin());
  }
}

void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::CopyFrom(const PublishOnboardingInfo_TripOnboardInfo_DropoffLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::IsInitialized() const {
  return true;
}

void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::Swap(PublishOnboardingInfo_TripOnboardInfo_DropoffLocation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::InternalSwap(PublishOnboardingInfo_TripOnboardInfo_DropoffLocation* other) {
  using std::swap;
  swap(dropoff_latitude_degree_, other->dropoff_latitude_degree_);
  swap(dropoff_latitude_minute_, other->dropoff_latitude_minute_);
  swap(dropoff_latitude_mmin_, other->dropoff_latitude_mmin_);
  swap(dropoff_longitude_degree_, other->dropoff_longitude_degree_);
  swap(dropoff_longitude_minute_, other->dropoff_longitude_minute_);
  swap(dropoff_latitiude_orientation_, other->dropoff_latitiude_orientation_);
  swap(dropoff_longitude_orientation_, other->dropoff_longitude_orientation_);
  swap(dropoff_longitude_mmin_, other->dropoff_longitude_mmin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublishOnboardingInfo_TripOnboardInfo::InitAsDefaultInstance() {
  ::ford::av::taas::_PublishOnboardingInfo_TripOnboardInfo_default_instance_._instance.get_mutable()->pickup_location_ = const_cast< ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation*>(
      ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation::internal_default_instance());
  ::ford::av::taas::_PublishOnboardingInfo_TripOnboardInfo_default_instance_._instance.get_mutable()->dropoff_location_ = const_cast< ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation*>(
      ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishOnboardingInfo_TripOnboardInfo::kTripIDFieldNumber;
const int PublishOnboardingInfo_TripOnboardInfo::kPossiblyPresentFieldNumber;
const int PublishOnboardingInfo_TripOnboardInfo::kCanUpdatePassengersFieldNumber;
const int PublishOnboardingInfo_TripOnboardInfo::kExpNumPassFieldNumber;
const int PublishOnboardingInfo_TripOnboardInfo::kPickupNameFieldNumber;
const int PublishOnboardingInfo_TripOnboardInfo::kPickupLocationFieldNumber;
const int PublishOnboardingInfo_TripOnboardInfo::kDropoffLocationFieldNumber;
const int PublishOnboardingInfo_TripOnboardInfo::kDropoffNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishOnboardingInfo_TripOnboardInfo::PublishOnboardingInfo_TripOnboardInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishOnboardingInfo_TripOnboardInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo)
}
PublishOnboardingInfo_TripOnboardInfo::PublishOnboardingInfo_TripOnboardInfo(const PublishOnboardingInfo_TripOnboardInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  tripid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.tripid().size() > 0) {
    tripid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tripid_);
  }
  pickup_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pickup_name().size() > 0) {
    pickup_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pickup_name_);
  }
  dropoff_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dropoff_name().size() > 0) {
    dropoff_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dropoff_name_);
  }
  if (from.has_pickup_location()) {
    pickup_location_ = new ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation(*from.pickup_location_);
  } else {
    pickup_location_ = NULL;
  }
  if (from.has_dropoff_location()) {
    dropoff_location_ = new ::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation(*from.dropoff_location_);
  } else {
    dropoff_location_ = NULL;
  }
  ::memcpy(&possibly_present_, &from.possibly_present_,
    static_cast<size_t>(reinterpret_cast<char*>(&exp_num_pass_) -
    reinterpret_cast<char*>(&possibly_present_)) + sizeof(exp_num_pass_));
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo)
}

void PublishOnboardingInfo_TripOnboardInfo::SharedCtor() {
  tripid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pickup_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dropoff_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&pickup_location_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_num_pass_) -
      reinterpret_cast<char*>(&pickup_location_)) + sizeof(exp_num_pass_));
  _cached_size_ = 0;
}

PublishOnboardingInfo_TripOnboardInfo::~PublishOnboardingInfo_TripOnboardInfo() {
  // @@protoc_insertion_point(destructor:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo)
  SharedDtor();
}

void PublishOnboardingInfo_TripOnboardInfo::SharedDtor() {
  tripid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pickup_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dropoff_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pickup_location_;
  if (this != internal_default_instance()) delete dropoff_location_;
}

void PublishOnboardingInfo_TripOnboardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishOnboardingInfo_TripOnboardInfo::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishOnboardingInfo_TripOnboardInfo& PublishOnboardingInfo_TripOnboardInfo::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishOnboardingInfo_TripOnboardInfo();
  return *internal_default_instance();
}

PublishOnboardingInfo_TripOnboardInfo* PublishOnboardingInfo_TripOnboardInfo::New(::google::protobuf::Arena* arena) const {
  PublishOnboardingInfo_TripOnboardInfo* n = new PublishOnboardingInfo_TripOnboardInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishOnboardingInfo_TripOnboardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tripid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pickup_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dropoff_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && pickup_location_ != NULL) {
    delete pickup_location_;
  }
  pickup_location_ = NULL;
  if (GetArenaNoVirtual() == NULL && dropoff_location_ != NULL) {
    delete dropoff_location_;
  }
  dropoff_location_ = NULL;
  ::memset(&possibly_present_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exp_num_pass_) -
      reinterpret_cast<char*>(&possibly_present_)) + sizeof(exp_num_pass_));
  _internal_metadata_.Clear();
}

bool PublishOnboardingInfo_TripOnboardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes TripID = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_tripid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool possibly_present = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &possibly_present_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool can_update_passengers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_update_passengers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 exp_num_pass = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_num_pass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string pickup_name = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pickup_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->pickup_name().data(), static_cast<int>(this->pickup_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.pickup_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation pickup_location = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pickup_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation dropoff_location = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dropoff_location()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string dropoff_name = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dropoff_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dropoff_name().data(), static_cast<int>(this->dropoff_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.dropoff_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo)
  return false;
#undef DO_
}

void PublishOnboardingInfo_TripOnboardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes TripID = 1;
  if (this->tripid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->tripid(), output);
  }

  // bool possibly_present = 2;
  if (this->possibly_present() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->possibly_present(), output);
  }

  // bool can_update_passengers = 3;
  if (this->can_update_passengers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->can_update_passengers(), output);
  }

  // uint32 exp_num_pass = 4;
  if (this->exp_num_pass() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp_num_pass(), output);
  }

  // string pickup_name = 5;
  if (this->pickup_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pickup_name().data(), static_cast<int>(this->pickup_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.pickup_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->pickup_name(), output);
  }

  // .ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation pickup_location = 6;
  if (this->has_pickup_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->pickup_location_, output);
  }

  // .ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation dropoff_location = 7;
  if (this->has_dropoff_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->dropoff_location_, output);
  }

  // string dropoff_name = 8;
  if (this->dropoff_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dropoff_name().data(), static_cast<int>(this->dropoff_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.dropoff_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->dropoff_name(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo)
}

::google::protobuf::uint8* PublishOnboardingInfo_TripOnboardInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes TripID = 1;
  if (this->tripid().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->tripid(), target);
  }

  // bool possibly_present = 2;
  if (this->possibly_present() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->possibly_present(), target);
  }

  // bool can_update_passengers = 3;
  if (this->can_update_passengers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->can_update_passengers(), target);
  }

  // uint32 exp_num_pass = 4;
  if (this->exp_num_pass() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp_num_pass(), target);
  }

  // string pickup_name = 5;
  if (this->pickup_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->pickup_name().data(), static_cast<int>(this->pickup_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.pickup_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pickup_name(), target);
  }

  // .ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation pickup_location = 6;
  if (this->has_pickup_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->pickup_location_, deterministic, target);
  }

  // .ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation dropoff_location = 7;
  if (this->has_dropoff_location()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->dropoff_location_, deterministic, target);
  }

  // string dropoff_name = 8;
  if (this->dropoff_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dropoff_name().data(), static_cast<int>(this->dropoff_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.dropoff_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->dropoff_name(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo)
  return target;
}

size_t PublishOnboardingInfo_TripOnboardInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes TripID = 1;
  if (this->tripid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->tripid());
  }

  // string pickup_name = 5;
  if (this->pickup_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pickup_name());
  }

  // string dropoff_name = 8;
  if (this->dropoff_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->dropoff_name());
  }

  // .ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.PickupLocation pickup_location = 6;
  if (this->has_pickup_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->pickup_location_);
  }

  // .ford.av.taas.PublishOnboardingInfo.TripOnboardInfo.DropoffLocation dropoff_location = 7;
  if (this->has_dropoff_location()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->dropoff_location_);
  }

  // bool possibly_present = 2;
  if (this->possibly_present() != 0) {
    total_size += 1 + 1;
  }

  // bool can_update_passengers = 3;
  if (this->can_update_passengers() != 0) {
    total_size += 1 + 1;
  }

  // uint32 exp_num_pass = 4;
  if (this->exp_num_pass() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->exp_num_pass());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishOnboardingInfo_TripOnboardInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishOnboardingInfo_TripOnboardInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishOnboardingInfo_TripOnboardInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo)
    MergeFrom(*source);
  }
}

void PublishOnboardingInfo_TripOnboardInfo::MergeFrom(const PublishOnboardingInfo_TripOnboardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.tripid().size() > 0) {

    tripid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.tripid_);
  }
  if (from.pickup_name().size() > 0) {

    pickup_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pickup_name_);
  }
  if (from.dropoff_name().size() > 0) {

    dropoff_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dropoff_name_);
  }
  if (from.has_pickup_location()) {
    mutable_pickup_location()->::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_PickupLocation::MergeFrom(from.pickup_location());
  }
  if (from.has_dropoff_location()) {
    mutable_dropoff_location()->::ford::av::taas::PublishOnboardingInfo_TripOnboardInfo_DropoffLocation::MergeFrom(from.dropoff_location());
  }
  if (from.possibly_present() != 0) {
    set_possibly_present(from.possibly_present());
  }
  if (from.can_update_passengers() != 0) {
    set_can_update_passengers(from.can_update_passengers());
  }
  if (from.exp_num_pass() != 0) {
    set_exp_num_pass(from.exp_num_pass());
  }
}

void PublishOnboardingInfo_TripOnboardInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishOnboardingInfo_TripOnboardInfo::CopyFrom(const PublishOnboardingInfo_TripOnboardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.PublishOnboardingInfo.TripOnboardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishOnboardingInfo_TripOnboardInfo::IsInitialized() const {
  return true;
}

void PublishOnboardingInfo_TripOnboardInfo::Swap(PublishOnboardingInfo_TripOnboardInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishOnboardingInfo_TripOnboardInfo::InternalSwap(PublishOnboardingInfo_TripOnboardInfo* other) {
  using std::swap;
  tripid_.Swap(&other->tripid_);
  pickup_name_.Swap(&other->pickup_name_);
  dropoff_name_.Swap(&other->dropoff_name_);
  swap(pickup_location_, other->pickup_location_);
  swap(dropoff_location_, other->dropoff_location_);
  swap(possibly_present_, other->possibly_present_);
  swap(can_update_passengers_, other->can_update_passengers_);
  swap(exp_num_pass_, other->exp_num_pass_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishOnboardingInfo_TripOnboardInfo::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublishOnboardingInfo::InitAsDefaultInstance() {
  ::ford::av::taas::_PublishOnboardingInfo_default_instance_._instance.get_mutable()->__api_version_ = const_cast< ::ford::av::taas::__ApiVersion*>(
      ::ford::av::taas::__ApiVersion::internal_default_instance());
}
void PublishOnboardingInfo::clear___api_version() {
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishOnboardingInfo::kApiVersionFieldNumber;
const int PublishOnboardingInfo::kTripOnboardInfoFieldNumber;
const int PublishOnboardingInfo::kCanUpdatePassengersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishOnboardingInfo::PublishOnboardingInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishOnboardingInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.PublishOnboardingInfo)
}
PublishOnboardingInfo::PublishOnboardingInfo(const PublishOnboardingInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      trip_onboard_info_(from.trip_onboard_info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has___api_version()) {
    __api_version_ = new ::ford::av::taas::__ApiVersion(*from.__api_version_);
  } else {
    __api_version_ = NULL;
  }
  can_update_passengers_ = from.can_update_passengers_;
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.PublishOnboardingInfo)
}

void PublishOnboardingInfo::SharedCtor() {
  ::memset(&__api_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&can_update_passengers_) -
      reinterpret_cast<char*>(&__api_version_)) + sizeof(can_update_passengers_));
  _cached_size_ = 0;
}

PublishOnboardingInfo::~PublishOnboardingInfo() {
  // @@protoc_insertion_point(destructor:ford.av.taas.PublishOnboardingInfo)
  SharedDtor();
}

void PublishOnboardingInfo::SharedDtor() {
  if (this != internal_default_instance()) delete __api_version_;
}

void PublishOnboardingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishOnboardingInfo::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishOnboardingInfo& PublishOnboardingInfo::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishOnboardingInfo();
  return *internal_default_instance();
}

PublishOnboardingInfo* PublishOnboardingInfo::New(::google::protobuf::Arena* arena) const {
  PublishOnboardingInfo* n = new PublishOnboardingInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishOnboardingInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.PublishOnboardingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trip_onboard_info_.Clear();
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
  can_update_passengers_ = false;
  _internal_metadata_.Clear();
}

bool PublishOnboardingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.PublishOnboardingInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ford.av.taas.__ApiVersion __api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable___api_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ford.av.taas.PublishOnboardingInfo.TripOnboardInfo Trip_Onboard_Info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_trip_onboard_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool can_update_passengers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_update_passengers_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.PublishOnboardingInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.PublishOnboardingInfo)
  return false;
#undef DO_
}

void PublishOnboardingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.PublishOnboardingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->__api_version_, output);
  }

  // repeated .ford.av.taas.PublishOnboardingInfo.TripOnboardInfo Trip_Onboard_Info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trip_onboard_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trip_onboard_info(static_cast<int>(i)), output);
  }

  // bool can_update_passengers = 3;
  if (this->can_update_passengers() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->can_update_passengers(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.PublishOnboardingInfo)
}

::google::protobuf::uint8* PublishOnboardingInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.PublishOnboardingInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->__api_version_, deterministic, target);
  }

  // repeated .ford.av.taas.PublishOnboardingInfo.TripOnboardInfo Trip_Onboard_Info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trip_onboard_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->trip_onboard_info(static_cast<int>(i)), deterministic, target);
  }

  // bool can_update_passengers = 3;
  if (this->can_update_passengers() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->can_update_passengers(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.PublishOnboardingInfo)
  return target;
}

size_t PublishOnboardingInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.PublishOnboardingInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ford.av.taas.PublishOnboardingInfo.TripOnboardInfo Trip_Onboard_Info = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->trip_onboard_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trip_onboard_info(static_cast<int>(i)));
    }
  }

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->__api_version_);
  }

  // bool can_update_passengers = 3;
  if (this->can_update_passengers() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishOnboardingInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.PublishOnboardingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishOnboardingInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishOnboardingInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.PublishOnboardingInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.PublishOnboardingInfo)
    MergeFrom(*source);
  }
}

void PublishOnboardingInfo::MergeFrom(const PublishOnboardingInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.PublishOnboardingInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trip_onboard_info_.MergeFrom(from.trip_onboard_info_);
  if (from.has___api_version()) {
    mutable___api_version()->::ford::av::taas::__ApiVersion::MergeFrom(from.__api_version());
  }
  if (from.can_update_passengers() != 0) {
    set_can_update_passengers(from.can_update_passengers());
  }
}

void PublishOnboardingInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.PublishOnboardingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishOnboardingInfo::CopyFrom(const PublishOnboardingInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.PublishOnboardingInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishOnboardingInfo::IsInitialized() const {
  return true;
}

void PublishOnboardingInfo::Swap(PublishOnboardingInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishOnboardingInfo::InternalSwap(PublishOnboardingInfo* other) {
  using std::swap;
  trip_onboard_info_.InternalSwap(&other->trip_onboard_info_);
  swap(__api_version_, other->__api_version_);
  swap(can_update_passengers_, other->can_update_passengers_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishOnboardingInfo::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublishMrc::InitAsDefaultInstance() {
  ::ford::av::taas::_PublishMrc_default_instance_._instance.get_mutable()->__api_version_ = const_cast< ::ford::av::taas::__ApiVersion*>(
      ::ford::av::taas::__ApiVersion::internal_default_instance());
}
void PublishMrc::clear___api_version() {
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishMrc::kApiVersionFieldNumber;
const int PublishMrc::kFaultDescriptionFieldNumber;
const int PublishMrc::kCompletedFieldNumber;
const int PublishMrc::kRecoverableFieldNumber;
const int PublishMrc::kDoorsOpenFieldNumber;
const int PublishMrc::kLeoStopActiveFieldNumber;
const int PublishMrc::kPesStateFieldNumber;
const int PublishMrc::kCloudStopActiveFieldNumber;
const int PublishMrc::kConveniencePulloverFieldNumber;
const int PublishMrc::kLiftgateOpenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishMrc::PublishMrc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishMrc();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.PublishMrc)
}
PublishMrc::PublishMrc(const PublishMrc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has___api_version()) {
    __api_version_ = new ::ford::av::taas::__ApiVersion(*from.__api_version_);
  } else {
    __api_version_ = NULL;
  }
  ::memcpy(&fault_description_, &from.fault_description_,
    static_cast<size_t>(reinterpret_cast<char*>(&liftgate_open_) -
    reinterpret_cast<char*>(&fault_description_)) + sizeof(liftgate_open_));
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.PublishMrc)
}

void PublishMrc::SharedCtor() {
  ::memset(&__api_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&liftgate_open_) -
      reinterpret_cast<char*>(&__api_version_)) + sizeof(liftgate_open_));
  _cached_size_ = 0;
}

PublishMrc::~PublishMrc() {
  // @@protoc_insertion_point(destructor:ford.av.taas.PublishMrc)
  SharedDtor();
}

void PublishMrc::SharedDtor() {
  if (this != internal_default_instance()) delete __api_version_;
}

void PublishMrc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishMrc::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishMrc& PublishMrc::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishMrc();
  return *internal_default_instance();
}

PublishMrc* PublishMrc::New(::google::protobuf::Arena* arena) const {
  PublishMrc* n = new PublishMrc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishMrc::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.PublishMrc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
  ::memset(&fault_description_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&liftgate_open_) -
      reinterpret_cast<char*>(&fault_description_)) + sizeof(liftgate_open_));
  _internal_metadata_.Clear();
}

bool PublishMrc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.PublishMrc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ford.av.taas.__ApiVersion __api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable___api_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ford.av.taas.PublishMrc.MrcDescription fault_description = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_fault_description(static_cast< ::ford::av::taas::PublishMrc_MrcDescription >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool completed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &completed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ford.av.taas.PublishMrc.Recoverable recoverable = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_recoverable(static_cast< ::ford::av::taas::PublishMrc_Recoverable >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool doors_open = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &doors_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool leo_stop_active = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &leo_stop_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ford.av.taas.PublishMrc.PesState pes_state = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_pes_state(static_cast< ::ford::av::taas::PublishMrc_PesState >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool cloud_stop_active = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cloud_stop_active_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ford.av.taas.PublishMrc.ConveniencePullover convenience_pullover = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_convenience_pullover(static_cast< ::ford::av::taas::PublishMrc_ConveniencePullover >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool liftgate_open = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &liftgate_open_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.PublishMrc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.PublishMrc)
  return false;
#undef DO_
}

void PublishMrc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.PublishMrc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->__api_version_, output);
  }

  // .ford.av.taas.PublishMrc.MrcDescription fault_description = 2;
  if (this->fault_description() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->fault_description(), output);
  }

  // bool completed = 3;
  if (this->completed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->completed(), output);
  }

  // .ford.av.taas.PublishMrc.Recoverable recoverable = 4;
  if (this->recoverable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->recoverable(), output);
  }

  // bool doors_open = 5;
  if (this->doors_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->doors_open(), output);
  }

  // bool leo_stop_active = 6;
  if (this->leo_stop_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->leo_stop_active(), output);
  }

  // .ford.av.taas.PublishMrc.PesState pes_state = 7;
  if (this->pes_state() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->pes_state(), output);
  }

  // bool cloud_stop_active = 8;
  if (this->cloud_stop_active() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->cloud_stop_active(), output);
  }

  // .ford.av.taas.PublishMrc.ConveniencePullover convenience_pullover = 9;
  if (this->convenience_pullover() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->convenience_pullover(), output);
  }

  // bool liftgate_open = 10;
  if (this->liftgate_open() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->liftgate_open(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.PublishMrc)
}

::google::protobuf::uint8* PublishMrc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.PublishMrc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->__api_version_, deterministic, target);
  }

  // .ford.av.taas.PublishMrc.MrcDescription fault_description = 2;
  if (this->fault_description() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->fault_description(), target);
  }

  // bool completed = 3;
  if (this->completed() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->completed(), target);
  }

  // .ford.av.taas.PublishMrc.Recoverable recoverable = 4;
  if (this->recoverable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->recoverable(), target);
  }

  // bool doors_open = 5;
  if (this->doors_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->doors_open(), target);
  }

  // bool leo_stop_active = 6;
  if (this->leo_stop_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->leo_stop_active(), target);
  }

  // .ford.av.taas.PublishMrc.PesState pes_state = 7;
  if (this->pes_state() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      7, this->pes_state(), target);
  }

  // bool cloud_stop_active = 8;
  if (this->cloud_stop_active() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->cloud_stop_active(), target);
  }

  // .ford.av.taas.PublishMrc.ConveniencePullover convenience_pullover = 9;
  if (this->convenience_pullover() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->convenience_pullover(), target);
  }

  // bool liftgate_open = 10;
  if (this->liftgate_open() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->liftgate_open(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.PublishMrc)
  return target;
}

size_t PublishMrc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.PublishMrc)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->__api_version_);
  }

  // .ford.av.taas.PublishMrc.MrcDescription fault_description = 2;
  if (this->fault_description() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->fault_description());
  }

  // .ford.av.taas.PublishMrc.Recoverable recoverable = 4;
  if (this->recoverable() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->recoverable());
  }

  // bool completed = 3;
  if (this->completed() != 0) {
    total_size += 1 + 1;
  }

  // bool doors_open = 5;
  if (this->doors_open() != 0) {
    total_size += 1 + 1;
  }

  // bool leo_stop_active = 6;
  if (this->leo_stop_active() != 0) {
    total_size += 1 + 1;
  }

  // bool cloud_stop_active = 8;
  if (this->cloud_stop_active() != 0) {
    total_size += 1 + 1;
  }

  // .ford.av.taas.PublishMrc.PesState pes_state = 7;
  if (this->pes_state() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->pes_state());
  }

  // .ford.av.taas.PublishMrc.ConveniencePullover convenience_pullover = 9;
  if (this->convenience_pullover() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->convenience_pullover());
  }

  // bool liftgate_open = 10;
  if (this->liftgate_open() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishMrc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.PublishMrc)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishMrc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishMrc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.PublishMrc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.PublishMrc)
    MergeFrom(*source);
  }
}

void PublishMrc::MergeFrom(const PublishMrc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.PublishMrc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has___api_version()) {
    mutable___api_version()->::ford::av::taas::__ApiVersion::MergeFrom(from.__api_version());
  }
  if (from.fault_description() != 0) {
    set_fault_description(from.fault_description());
  }
  if (from.recoverable() != 0) {
    set_recoverable(from.recoverable());
  }
  if (from.completed() != 0) {
    set_completed(from.completed());
  }
  if (from.doors_open() != 0) {
    set_doors_open(from.doors_open());
  }
  if (from.leo_stop_active() != 0) {
    set_leo_stop_active(from.leo_stop_active());
  }
  if (from.cloud_stop_active() != 0) {
    set_cloud_stop_active(from.cloud_stop_active());
  }
  if (from.pes_state() != 0) {
    set_pes_state(from.pes_state());
  }
  if (from.convenience_pullover() != 0) {
    set_convenience_pullover(from.convenience_pullover());
  }
  if (from.liftgate_open() != 0) {
    set_liftgate_open(from.liftgate_open());
  }
}

void PublishMrc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.PublishMrc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishMrc::CopyFrom(const PublishMrc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.PublishMrc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishMrc::IsInitialized() const {
  return true;
}

void PublishMrc::Swap(PublishMrc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishMrc::InternalSwap(PublishMrc* other) {
  using std::swap;
  swap(__api_version_, other->__api_version_);
  swap(fault_description_, other->fault_description_);
  swap(recoverable_, other->recoverable_);
  swap(completed_, other->completed_);
  swap(doors_open_, other->doors_open_);
  swap(leo_stop_active_, other->leo_stop_active_);
  swap(cloud_stop_active_, other->cloud_stop_active_);
  swap(pes_state_, other->pes_state_);
  swap(convenience_pullover_, other->convenience_pullover_);
  swap(liftgate_open_, other->liftgate_open_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishMrc::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublishDriveUpdates::InitAsDefaultInstance() {
  ::ford::av::taas::_PublishDriveUpdates_default_instance_._instance.get_mutable()->__api_version_ = const_cast< ::ford::av::taas::__ApiVersion*>(
      ::ford::av::taas::__ApiVersion::internal_default_instance());
}
void PublishDriveUpdates::clear___api_version() {
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishDriveUpdates::kApiVersionFieldNumber;
const int PublishDriveUpdates::kArrivalImminentFieldNumber;
const int PublishDriveUpdates::kEtaFieldNumber;
const int PublishDriveUpdates::kStopLocationUpdatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishDriveUpdates::PublishDriveUpdates()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishDriveUpdates();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.PublishDriveUpdates)
}
PublishDriveUpdates::PublishDriveUpdates(const PublishDriveUpdates& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has___api_version()) {
    __api_version_ = new ::ford::av::taas::__ApiVersion(*from.__api_version_);
  } else {
    __api_version_ = NULL;
  }
  ::memcpy(&eta_, &from.eta_,
    static_cast<size_t>(reinterpret_cast<char*>(&stop_location_updated_) -
    reinterpret_cast<char*>(&eta_)) + sizeof(stop_location_updated_));
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.PublishDriveUpdates)
}

void PublishDriveUpdates::SharedCtor() {
  ::memset(&__api_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_location_updated_) -
      reinterpret_cast<char*>(&__api_version_)) + sizeof(stop_location_updated_));
  _cached_size_ = 0;
}

PublishDriveUpdates::~PublishDriveUpdates() {
  // @@protoc_insertion_point(destructor:ford.av.taas.PublishDriveUpdates)
  SharedDtor();
}

void PublishDriveUpdates::SharedDtor() {
  if (this != internal_default_instance()) delete __api_version_;
}

void PublishDriveUpdates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishDriveUpdates::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishDriveUpdates& PublishDriveUpdates::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishDriveUpdates();
  return *internal_default_instance();
}

PublishDriveUpdates* PublishDriveUpdates::New(::google::protobuf::Arena* arena) const {
  PublishDriveUpdates* n = new PublishDriveUpdates;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishDriveUpdates::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.PublishDriveUpdates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
  ::memset(&eta_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&stop_location_updated_) -
      reinterpret_cast<char*>(&eta_)) + sizeof(stop_location_updated_));
  _internal_metadata_.Clear();
}

bool PublishDriveUpdates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.PublishDriveUpdates)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ford.av.taas.__ApiVersion __api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable___api_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool arrival_imminent = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &arrival_imminent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 eta = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool stop_location_updated = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &stop_location_updated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.PublishDriveUpdates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.PublishDriveUpdates)
  return false;
#undef DO_
}

void PublishDriveUpdates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.PublishDriveUpdates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->__api_version_, output);
  }

  // bool arrival_imminent = 2;
  if (this->arrival_imminent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->arrival_imminent(), output);
  }

  // uint32 eta = 3;
  if (this->eta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->eta(), output);
  }

  // bool stop_location_updated = 4;
  if (this->stop_location_updated() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->stop_location_updated(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.PublishDriveUpdates)
}

::google::protobuf::uint8* PublishDriveUpdates::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.PublishDriveUpdates)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->__api_version_, deterministic, target);
  }

  // bool arrival_imminent = 2;
  if (this->arrival_imminent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->arrival_imminent(), target);
  }

  // uint32 eta = 3;
  if (this->eta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->eta(), target);
  }

  // bool stop_location_updated = 4;
  if (this->stop_location_updated() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->stop_location_updated(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.PublishDriveUpdates)
  return target;
}

size_t PublishDriveUpdates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.PublishDriveUpdates)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->__api_version_);
  }

  // uint32 eta = 3;
  if (this->eta() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eta());
  }

  // bool arrival_imminent = 2;
  if (this->arrival_imminent() != 0) {
    total_size += 1 + 1;
  }

  // bool stop_location_updated = 4;
  if (this->stop_location_updated() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishDriveUpdates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.PublishDriveUpdates)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishDriveUpdates* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishDriveUpdates>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.PublishDriveUpdates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.PublishDriveUpdates)
    MergeFrom(*source);
  }
}

void PublishDriveUpdates::MergeFrom(const PublishDriveUpdates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.PublishDriveUpdates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has___api_version()) {
    mutable___api_version()->::ford::av::taas::__ApiVersion::MergeFrom(from.__api_version());
  }
  if (from.eta() != 0) {
    set_eta(from.eta());
  }
  if (from.arrival_imminent() != 0) {
    set_arrival_imminent(from.arrival_imminent());
  }
  if (from.stop_location_updated() != 0) {
    set_stop_location_updated(from.stop_location_updated());
  }
}

void PublishDriveUpdates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.PublishDriveUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishDriveUpdates::CopyFrom(const PublishDriveUpdates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.PublishDriveUpdates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishDriveUpdates::IsInitialized() const {
  return true;
}

void PublishDriveUpdates::Swap(PublishDriveUpdates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishDriveUpdates::InternalSwap(PublishDriveUpdates* other) {
  using std::swap;
  swap(__api_version_, other->__api_version_);
  swap(eta_, other->eta_);
  swap(arrival_imminent_, other->arrival_imminent_);
  swap(stop_location_updated_, other->stop_location_updated_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishDriveUpdates::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublishOffboardingTrips::InitAsDefaultInstance() {
  ::ford::av::taas::_PublishOffboardingTrips_default_instance_._instance.get_mutable()->__api_version_ = const_cast< ::ford::av::taas::__ApiVersion*>(
      ::ford::av::taas::__ApiVersion::internal_default_instance());
}
void PublishOffboardingTrips::clear___api_version() {
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishOffboardingTrips::kApiVersionFieldNumber;
const int PublishOffboardingTrips::kTripIdsOffboardingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishOffboardingTrips::PublishOffboardingTrips()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishOffboardingTrips();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.PublishOffboardingTrips)
}
PublishOffboardingTrips::PublishOffboardingTrips(const PublishOffboardingTrips& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      trip_ids_offboarding_(from.trip_ids_offboarding_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has___api_version()) {
    __api_version_ = new ::ford::av::taas::__ApiVersion(*from.__api_version_);
  } else {
    __api_version_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.PublishOffboardingTrips)
}

void PublishOffboardingTrips::SharedCtor() {
  __api_version_ = NULL;
  _cached_size_ = 0;
}

PublishOffboardingTrips::~PublishOffboardingTrips() {
  // @@protoc_insertion_point(destructor:ford.av.taas.PublishOffboardingTrips)
  SharedDtor();
}

void PublishOffboardingTrips::SharedDtor() {
  if (this != internal_default_instance()) delete __api_version_;
}

void PublishOffboardingTrips::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishOffboardingTrips::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishOffboardingTrips& PublishOffboardingTrips::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishOffboardingTrips();
  return *internal_default_instance();
}

PublishOffboardingTrips* PublishOffboardingTrips::New(::google::protobuf::Arena* arena) const {
  PublishOffboardingTrips* n = new PublishOffboardingTrips;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishOffboardingTrips::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.PublishOffboardingTrips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trip_ids_offboarding_.Clear();
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
  _internal_metadata_.Clear();
}

bool PublishOffboardingTrips::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.PublishOffboardingTrips)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ford.av.taas.__ApiVersion __api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable___api_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes trip_ids_offboarding = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_trip_ids_offboarding()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.PublishOffboardingTrips)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.PublishOffboardingTrips)
  return false;
#undef DO_
}

void PublishOffboardingTrips::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.PublishOffboardingTrips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->__api_version_, output);
  }

  // repeated bytes trip_ids_offboarding = 2;
  for (int i = 0, n = this->trip_ids_offboarding_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->trip_ids_offboarding(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.PublishOffboardingTrips)
}

::google::protobuf::uint8* PublishOffboardingTrips::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.PublishOffboardingTrips)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->__api_version_, deterministic, target);
  }

  // repeated bytes trip_ids_offboarding = 2;
  for (int i = 0, n = this->trip_ids_offboarding_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(2, this->trip_ids_offboarding(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.PublishOffboardingTrips)
  return target;
}

size_t PublishOffboardingTrips::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.PublishOffboardingTrips)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated bytes trip_ids_offboarding = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->trip_ids_offboarding_size());
  for (int i = 0, n = this->trip_ids_offboarding_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->trip_ids_offboarding(i));
  }

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->__api_version_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishOffboardingTrips::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.PublishOffboardingTrips)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishOffboardingTrips* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishOffboardingTrips>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.PublishOffboardingTrips)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.PublishOffboardingTrips)
    MergeFrom(*source);
  }
}

void PublishOffboardingTrips::MergeFrom(const PublishOffboardingTrips& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.PublishOffboardingTrips)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trip_ids_offboarding_.MergeFrom(from.trip_ids_offboarding_);
  if (from.has___api_version()) {
    mutable___api_version()->::ford::av::taas::__ApiVersion::MergeFrom(from.__api_version());
  }
}

void PublishOffboardingTrips::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.PublishOffboardingTrips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishOffboardingTrips::CopyFrom(const PublishOffboardingTrips& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.PublishOffboardingTrips)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishOffboardingTrips::IsInitialized() const {
  return true;
}

void PublishOffboardingTrips::Swap(PublishOffboardingTrips* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishOffboardingTrips::InternalSwap(PublishOffboardingTrips* other) {
  using std::swap;
  trip_ids_offboarding_.InternalSwap(&other->trip_ids_offboarding_);
  swap(__api_version_, other->__api_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishOffboardingTrips::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishActiveTripInfo_TripActiveInfo_DropOffGPS::kDropOffLatitudeDegreeFieldNumber;
const int PublishActiveTripInfo_TripActiveInfo_DropOffGPS::kDropOffLatitudeMinuteFieldNumber;
const int PublishActiveTripInfo_TripActiveInfo_DropOffGPS::kDropOffLatitudeMminFieldNumber;
const int PublishActiveTripInfo_TripActiveInfo_DropOffGPS::kDropOffLatitiudeOrientationFieldNumber;
const int PublishActiveTripInfo_TripActiveInfo_DropOffGPS::kDropOffLongitudeDegreeFieldNumber;
const int PublishActiveTripInfo_TripActiveInfo_DropOffGPS::kDropOffLongitudeMinuteFieldNumber;
const int PublishActiveTripInfo_TripActiveInfo_DropOffGPS::kDropOffLongitudeMminFieldNumber;
const int PublishActiveTripInfo_TripActiveInfo_DropOffGPS::kDropOffLongitudeOrientationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishActiveTripInfo_TripActiveInfo_DropOffGPS::PublishActiveTripInfo_TripActiveInfo_DropOffGPS()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishActiveTripInfo_TripActiveInfo_DropOffGPS();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS)
}
PublishActiveTripInfo_TripActiveInfo_DropOffGPS::PublishActiveTripInfo_TripActiveInfo_DropOffGPS(const PublishActiveTripInfo_TripActiveInfo_DropOffGPS& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&drop_off_latitude_degree_, &from.drop_off_latitude_degree_,
    static_cast<size_t>(reinterpret_cast<char*>(&drop_off_longitude_mmin_) -
    reinterpret_cast<char*>(&drop_off_latitude_degree_)) + sizeof(drop_off_longitude_mmin_));
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS)
}

void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::SharedCtor() {
  ::memset(&drop_off_latitude_degree_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drop_off_longitude_mmin_) -
      reinterpret_cast<char*>(&drop_off_latitude_degree_)) + sizeof(drop_off_longitude_mmin_));
  _cached_size_ = 0;
}

PublishActiveTripInfo_TripActiveInfo_DropOffGPS::~PublishActiveTripInfo_TripActiveInfo_DropOffGPS() {
  // @@protoc_insertion_point(destructor:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS)
  SharedDtor();
}

void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::SharedDtor() {
}

void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishActiveTripInfo_TripActiveInfo_DropOffGPS::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishActiveTripInfo_TripActiveInfo_DropOffGPS& PublishActiveTripInfo_TripActiveInfo_DropOffGPS::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishActiveTripInfo_TripActiveInfo_DropOffGPS();
  return *internal_default_instance();
}

PublishActiveTripInfo_TripActiveInfo_DropOffGPS* PublishActiveTripInfo_TripActiveInfo_DropOffGPS::New(::google::protobuf::Arena* arena) const {
  PublishActiveTripInfo_TripActiveInfo_DropOffGPS* n = new PublishActiveTripInfo_TripActiveInfo_DropOffGPS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&drop_off_latitude_degree_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drop_off_longitude_mmin_) -
      reinterpret_cast<char*>(&drop_off_latitude_degree_)) + sizeof(drop_off_longitude_mmin_));
  _internal_metadata_.Clear();
}

bool PublishActiveTripInfo_TripActiveInfo_DropOffGPS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 drop_off_latitude_degree = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_off_latitude_degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 drop_off_latitude_minute = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_off_latitude_minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 drop_off_latitude_mmin = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_off_latitude_mmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool drop_off_latitiude_orientation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drop_off_latitiude_orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 drop_off_longitude_degree = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_off_longitude_degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 drop_off_longitude_minute = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_off_longitude_minute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 drop_off_longitude_mmin = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &drop_off_longitude_mmin_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool drop_off_longitude_orientation = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &drop_off_longitude_orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS)
  return false;
#undef DO_
}

void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 drop_off_latitude_degree = 1;
  if (this->drop_off_latitude_degree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->drop_off_latitude_degree(), output);
  }

  // uint32 drop_off_latitude_minute = 2;
  if (this->drop_off_latitude_minute() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->drop_off_latitude_minute(), output);
  }

  // uint32 drop_off_latitude_mmin = 3;
  if (this->drop_off_latitude_mmin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->drop_off_latitude_mmin(), output);
  }

  // bool drop_off_latitiude_orientation = 4;
  if (this->drop_off_latitiude_orientation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->drop_off_latitiude_orientation(), output);
  }

  // uint32 drop_off_longitude_degree = 5;
  if (this->drop_off_longitude_degree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->drop_off_longitude_degree(), output);
  }

  // uint32 drop_off_longitude_minute = 6;
  if (this->drop_off_longitude_minute() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->drop_off_longitude_minute(), output);
  }

  // uint32 drop_off_longitude_mmin = 7;
  if (this->drop_off_longitude_mmin() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->drop_off_longitude_mmin(), output);
  }

  // bool drop_off_longitude_orientation = 8;
  if (this->drop_off_longitude_orientation() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->drop_off_longitude_orientation(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS)
}

::google::protobuf::uint8* PublishActiveTripInfo_TripActiveInfo_DropOffGPS::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 drop_off_latitude_degree = 1;
  if (this->drop_off_latitude_degree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->drop_off_latitude_degree(), target);
  }

  // uint32 drop_off_latitude_minute = 2;
  if (this->drop_off_latitude_minute() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->drop_off_latitude_minute(), target);
  }

  // uint32 drop_off_latitude_mmin = 3;
  if (this->drop_off_latitude_mmin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->drop_off_latitude_mmin(), target);
  }

  // bool drop_off_latitiude_orientation = 4;
  if (this->drop_off_latitiude_orientation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->drop_off_latitiude_orientation(), target);
  }

  // uint32 drop_off_longitude_degree = 5;
  if (this->drop_off_longitude_degree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->drop_off_longitude_degree(), target);
  }

  // uint32 drop_off_longitude_minute = 6;
  if (this->drop_off_longitude_minute() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->drop_off_longitude_minute(), target);
  }

  // uint32 drop_off_longitude_mmin = 7;
  if (this->drop_off_longitude_mmin() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->drop_off_longitude_mmin(), target);
  }

  // bool drop_off_longitude_orientation = 8;
  if (this->drop_off_longitude_orientation() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->drop_off_longitude_orientation(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS)
  return target;
}

size_t PublishActiveTripInfo_TripActiveInfo_DropOffGPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint32 drop_off_latitude_degree = 1;
  if (this->drop_off_latitude_degree() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->drop_off_latitude_degree());
  }

  // uint32 drop_off_latitude_minute = 2;
  if (this->drop_off_latitude_minute() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->drop_off_latitude_minute());
  }

  // uint32 drop_off_latitude_mmin = 3;
  if (this->drop_off_latitude_mmin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->drop_off_latitude_mmin());
  }

  // uint32 drop_off_longitude_degree = 5;
  if (this->drop_off_longitude_degree() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->drop_off_longitude_degree());
  }

  // uint32 drop_off_longitude_minute = 6;
  if (this->drop_off_longitude_minute() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->drop_off_longitude_minute());
  }

  // bool drop_off_latitiude_orientation = 4;
  if (this->drop_off_latitiude_orientation() != 0) {
    total_size += 1 + 1;
  }

  // bool drop_off_longitude_orientation = 8;
  if (this->drop_off_longitude_orientation() != 0) {
    total_size += 1 + 1;
  }

  // uint32 drop_off_longitude_mmin = 7;
  if (this->drop_off_longitude_mmin() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->drop_off_longitude_mmin());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishActiveTripInfo_TripActiveInfo_DropOffGPS* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishActiveTripInfo_TripActiveInfo_DropOffGPS>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS)
    MergeFrom(*source);
  }
}

void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::MergeFrom(const PublishActiveTripInfo_TripActiveInfo_DropOffGPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.drop_off_latitude_degree() != 0) {
    set_drop_off_latitude_degree(from.drop_off_latitude_degree());
  }
  if (from.drop_off_latitude_minute() != 0) {
    set_drop_off_latitude_minute(from.drop_off_latitude_minute());
  }
  if (from.drop_off_latitude_mmin() != 0) {
    set_drop_off_latitude_mmin(from.drop_off_latitude_mmin());
  }
  if (from.drop_off_longitude_degree() != 0) {
    set_drop_off_longitude_degree(from.drop_off_longitude_degree());
  }
  if (from.drop_off_longitude_minute() != 0) {
    set_drop_off_longitude_minute(from.drop_off_longitude_minute());
  }
  if (from.drop_off_latitiude_orientation() != 0) {
    set_drop_off_latitiude_orientation(from.drop_off_latitiude_orientation());
  }
  if (from.drop_off_longitude_orientation() != 0) {
    set_drop_off_longitude_orientation(from.drop_off_longitude_orientation());
  }
  if (from.drop_off_longitude_mmin() != 0) {
    set_drop_off_longitude_mmin(from.drop_off_longitude_mmin());
  }
}

void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::CopyFrom(const PublishActiveTripInfo_TripActiveInfo_DropOffGPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishActiveTripInfo_TripActiveInfo_DropOffGPS::IsInitialized() const {
  return true;
}

void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::Swap(PublishActiveTripInfo_TripActiveInfo_DropOffGPS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishActiveTripInfo_TripActiveInfo_DropOffGPS::InternalSwap(PublishActiveTripInfo_TripActiveInfo_DropOffGPS* other) {
  using std::swap;
  swap(drop_off_latitude_degree_, other->drop_off_latitude_degree_);
  swap(drop_off_latitude_minute_, other->drop_off_latitude_minute_);
  swap(drop_off_latitude_mmin_, other->drop_off_latitude_mmin_);
  swap(drop_off_longitude_degree_, other->drop_off_longitude_degree_);
  swap(drop_off_longitude_minute_, other->drop_off_longitude_minute_);
  swap(drop_off_latitiude_orientation_, other->drop_off_latitiude_orientation_);
  swap(drop_off_longitude_orientation_, other->drop_off_longitude_orientation_);
  swap(drop_off_longitude_mmin_, other->drop_off_longitude_mmin_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishActiveTripInfo_TripActiveInfo_DropOffGPS::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublishActiveTripInfo_TripActiveInfo::InitAsDefaultInstance() {
  ::ford::av::taas::_PublishActiveTripInfo_TripActiveInfo_default_instance_._instance.get_mutable()->drop_off_gps_ = const_cast< ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS*>(
      ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishActiveTripInfo_TripActiveInfo::kTripIdFieldNumber;
const int PublishActiveTripInfo_TripActiveInfo::kDropOffNameFieldNumber;
const int PublishActiveTripInfo_TripActiveInfo::kDropOffGPSFieldNumber;
const int PublishActiveTripInfo_TripActiveInfo::kEtaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishActiveTripInfo_TripActiveInfo::PublishActiveTripInfo_TripActiveInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishActiveTripInfo_TripActiveInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.PublishActiveTripInfo.TripActiveInfo)
}
PublishActiveTripInfo_TripActiveInfo::PublishActiveTripInfo_TripActiveInfo(const PublishActiveTripInfo_TripActiveInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  trip_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.trip_id().size() > 0) {
    trip_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trip_id_);
  }
  drop_off_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.drop_off_name().size() > 0) {
    drop_off_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drop_off_name_);
  }
  if (from.has_drop_off_gps()) {
    drop_off_gps_ = new ::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS(*from.drop_off_gps_);
  } else {
    drop_off_gps_ = NULL;
  }
  eta_ = from.eta_;
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.PublishActiveTripInfo.TripActiveInfo)
}

void PublishActiveTripInfo_TripActiveInfo::SharedCtor() {
  trip_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_off_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&drop_off_gps_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&eta_) -
      reinterpret_cast<char*>(&drop_off_gps_)) + sizeof(eta_));
  _cached_size_ = 0;
}

PublishActiveTripInfo_TripActiveInfo::~PublishActiveTripInfo_TripActiveInfo() {
  // @@protoc_insertion_point(destructor:ford.av.taas.PublishActiveTripInfo.TripActiveInfo)
  SharedDtor();
}

void PublishActiveTripInfo_TripActiveInfo::SharedDtor() {
  trip_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_off_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete drop_off_gps_;
}

void PublishActiveTripInfo_TripActiveInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishActiveTripInfo_TripActiveInfo::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishActiveTripInfo_TripActiveInfo& PublishActiveTripInfo_TripActiveInfo::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishActiveTripInfo_TripActiveInfo();
  return *internal_default_instance();
}

PublishActiveTripInfo_TripActiveInfo* PublishActiveTripInfo_TripActiveInfo::New(::google::protobuf::Arena* arena) const {
  PublishActiveTripInfo_TripActiveInfo* n = new PublishActiveTripInfo_TripActiveInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishActiveTripInfo_TripActiveInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.PublishActiveTripInfo.TripActiveInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trip_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  drop_off_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && drop_off_gps_ != NULL) {
    delete drop_off_gps_;
  }
  drop_off_gps_ = NULL;
  eta_ = 0u;
  _internal_metadata_.Clear();
}

bool PublishActiveTripInfo_TripActiveInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.PublishActiveTripInfo.TripActiveInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes trip_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_trip_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string drop_off_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_drop_off_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->drop_off_name().data(), static_cast<int>(this->drop_off_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ford.av.taas.PublishActiveTripInfo.TripActiveInfo.drop_off_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS drop_off_GPS = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_drop_off_gps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 eta = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &eta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.PublishActiveTripInfo.TripActiveInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.PublishActiveTripInfo.TripActiveInfo)
  return false;
#undef DO_
}

void PublishActiveTripInfo_TripActiveInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.PublishActiveTripInfo.TripActiveInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes trip_id = 1;
  if (this->trip_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->trip_id(), output);
  }

  // string drop_off_name = 2;
  if (this->drop_off_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drop_off_name().data(), static_cast<int>(this->drop_off_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ford.av.taas.PublishActiveTripInfo.TripActiveInfo.drop_off_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->drop_off_name(), output);
  }

  // .ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS drop_off_GPS = 3;
  if (this->has_drop_off_gps()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->drop_off_gps_, output);
  }

  // uint32 eta = 4;
  if (this->eta() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->eta(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.PublishActiveTripInfo.TripActiveInfo)
}

::google::protobuf::uint8* PublishActiveTripInfo_TripActiveInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.PublishActiveTripInfo.TripActiveInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes trip_id = 1;
  if (this->trip_id().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->trip_id(), target);
  }

  // string drop_off_name = 2;
  if (this->drop_off_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->drop_off_name().data(), static_cast<int>(this->drop_off_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ford.av.taas.PublishActiveTripInfo.TripActiveInfo.drop_off_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->drop_off_name(), target);
  }

  // .ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS drop_off_GPS = 3;
  if (this->has_drop_off_gps()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->drop_off_gps_, deterministic, target);
  }

  // uint32 eta = 4;
  if (this->eta() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->eta(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.PublishActiveTripInfo.TripActiveInfo)
  return target;
}

size_t PublishActiveTripInfo_TripActiveInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.PublishActiveTripInfo.TripActiveInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes trip_id = 1;
  if (this->trip_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->trip_id());
  }

  // string drop_off_name = 2;
  if (this->drop_off_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->drop_off_name());
  }

  // .ford.av.taas.PublishActiveTripInfo.TripActiveInfo.DropOffGPS drop_off_GPS = 3;
  if (this->has_drop_off_gps()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->drop_off_gps_);
  }

  // uint32 eta = 4;
  if (this->eta() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->eta());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishActiveTripInfo_TripActiveInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.PublishActiveTripInfo.TripActiveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishActiveTripInfo_TripActiveInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishActiveTripInfo_TripActiveInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.PublishActiveTripInfo.TripActiveInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.PublishActiveTripInfo.TripActiveInfo)
    MergeFrom(*source);
  }
}

void PublishActiveTripInfo_TripActiveInfo::MergeFrom(const PublishActiveTripInfo_TripActiveInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.PublishActiveTripInfo.TripActiveInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trip_id().size() > 0) {

    trip_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.trip_id_);
  }
  if (from.drop_off_name().size() > 0) {

    drop_off_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.drop_off_name_);
  }
  if (from.has_drop_off_gps()) {
    mutable_drop_off_gps()->::ford::av::taas::PublishActiveTripInfo_TripActiveInfo_DropOffGPS::MergeFrom(from.drop_off_gps());
  }
  if (from.eta() != 0) {
    set_eta(from.eta());
  }
}

void PublishActiveTripInfo_TripActiveInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.PublishActiveTripInfo.TripActiveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishActiveTripInfo_TripActiveInfo::CopyFrom(const PublishActiveTripInfo_TripActiveInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.PublishActiveTripInfo.TripActiveInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishActiveTripInfo_TripActiveInfo::IsInitialized() const {
  return true;
}

void PublishActiveTripInfo_TripActiveInfo::Swap(PublishActiveTripInfo_TripActiveInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishActiveTripInfo_TripActiveInfo::InternalSwap(PublishActiveTripInfo_TripActiveInfo* other) {
  using std::swap;
  trip_id_.Swap(&other->trip_id_);
  drop_off_name_.Swap(&other->drop_off_name_);
  swap(drop_off_gps_, other->drop_off_gps_);
  swap(eta_, other->eta_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishActiveTripInfo_TripActiveInfo::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PublishActiveTripInfo::InitAsDefaultInstance() {
  ::ford::av::taas::_PublishActiveTripInfo_default_instance_._instance.get_mutable()->__api_version_ = const_cast< ::ford::av::taas::__ApiVersion*>(
      ::ford::av::taas::__ApiVersion::internal_default_instance());
}
void PublishActiveTripInfo::clear___api_version() {
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PublishActiveTripInfo::kApiVersionFieldNumber;
const int PublishActiveTripInfo::kTripActiveInfoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PublishActiveTripInfo::PublishActiveTripInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishActiveTripInfo();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ford.av.taas.PublishActiveTripInfo)
}
PublishActiveTripInfo::PublishActiveTripInfo(const PublishActiveTripInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      trip_active_info_(from.trip_active_info_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has___api_version()) {
    __api_version_ = new ::ford::av::taas::__ApiVersion(*from.__api_version_);
  } else {
    __api_version_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ford.av.taas.PublishActiveTripInfo)
}

void PublishActiveTripInfo::SharedCtor() {
  __api_version_ = NULL;
  _cached_size_ = 0;
}

PublishActiveTripInfo::~PublishActiveTripInfo() {
  // @@protoc_insertion_point(destructor:ford.av.taas.PublishActiveTripInfo)
  SharedDtor();
}

void PublishActiveTripInfo::SharedDtor() {
  if (this != internal_default_instance()) delete __api_version_;
}

void PublishActiveTripInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PublishActiveTripInfo::descriptor() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PublishActiveTripInfo& PublishActiveTripInfo::default_instance() {
  ::protobuf_TVF_5fTo_5fDXP_2eproto::InitDefaultsPublishActiveTripInfo();
  return *internal_default_instance();
}

PublishActiveTripInfo* PublishActiveTripInfo::New(::google::protobuf::Arena* arena) const {
  PublishActiveTripInfo* n = new PublishActiveTripInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PublishActiveTripInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ford.av.taas.PublishActiveTripInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trip_active_info_.Clear();
  if (GetArenaNoVirtual() == NULL && __api_version_ != NULL) {
    delete __api_version_;
  }
  __api_version_ = NULL;
  _internal_metadata_.Clear();
}

bool PublishActiveTripInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ford.av.taas.PublishActiveTripInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ford.av.taas.__ApiVersion __api_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable___api_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ford.av.taas.PublishActiveTripInfo.TripActiveInfo trip_active_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_trip_active_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ford.av.taas.PublishActiveTripInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ford.av.taas.PublishActiveTripInfo)
  return false;
#undef DO_
}

void PublishActiveTripInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ford.av.taas.PublishActiveTripInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->__api_version_, output);
  }

  // repeated .ford.av.taas.PublishActiveTripInfo.TripActiveInfo trip_active_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trip_active_info_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trip_active_info(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ford.av.taas.PublishActiveTripInfo)
}

::google::protobuf::uint8* PublishActiveTripInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ford.av.taas.PublishActiveTripInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, *this->__api_version_, deterministic, target);
  }

  // repeated .ford.av.taas.PublishActiveTripInfo.TripActiveInfo trip_active_info = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->trip_active_info_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->trip_active_info(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ford.av.taas.PublishActiveTripInfo)
  return target;
}

size_t PublishActiveTripInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ford.av.taas.PublishActiveTripInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ford.av.taas.PublishActiveTripInfo.TripActiveInfo trip_active_info = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->trip_active_info_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->trip_active_info(static_cast<int>(i)));
    }
  }

  // .ford.av.taas.__ApiVersion __api_version = 1;
  if (this->has___api_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *this->__api_version_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PublishActiveTripInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ford.av.taas.PublishActiveTripInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PublishActiveTripInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PublishActiveTripInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ford.av.taas.PublishActiveTripInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ford.av.taas.PublishActiveTripInfo)
    MergeFrom(*source);
  }
}

void PublishActiveTripInfo::MergeFrom(const PublishActiveTripInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ford.av.taas.PublishActiveTripInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trip_active_info_.MergeFrom(from.trip_active_info_);
  if (from.has___api_version()) {
    mutable___api_version()->::ford::av::taas::__ApiVersion::MergeFrom(from.__api_version());
  }
}

void PublishActiveTripInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ford.av.taas.PublishActiveTripInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PublishActiveTripInfo::CopyFrom(const PublishActiveTripInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ford.av.taas.PublishActiveTripInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublishActiveTripInfo::IsInitialized() const {
  return true;
}

void PublishActiveTripInfo::Swap(PublishActiveTripInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PublishActiveTripInfo::InternalSwap(PublishActiveTripInfo* other) {
  using std::swap;
  trip_active_info_.InternalSwap(&other->trip_active_info_);
  swap(__api_version_, other->__api_version_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PublishActiveTripInfo::GetMetadata() const {
  protobuf_TVF_5fTo_5fDXP_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_TVF_5fTo_5fDXP_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace taas
}  // namespace av
}  // namespace ford

// @@protoc_insertion_point(global_scope)
